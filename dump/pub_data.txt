AdvertiseTuple(topic='/torso/joint_group_velocity_controller/command', queue_size=1, message_type='std_msgs::Float64MultiArray', nesting=0, variable='command_pub_', function='KinematicExtensionTorso', line=99, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='base/command', queue_size=1, message_type='geometry_msgs::Twist', nesting=0, variable='base_vel_pub_', function='KinematicExtensionBaseActive', line=80, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='base/command', queue_size=1, message_type='geometry_msgs::Twist', nesting=0, variable='base_vel_pub_', function='KinematicExtensionBaseActive', line=80, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='/torso/joint_group_velocity_controller/command', queue_size=1, message_type='std_msgs::Float64MultiArray', nesting=0, variable='command_pub_', function='KinematicExtensionTorso', line=99, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_group_velocity_controller/command', queue_size=1, message_type='std_msgs::Float64MultiArray', nesting=0, variable='pub_', function='ControllerInterfaceVelocity', line=68, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_group_position_controller/command', queue_size=1, message_type='std_msgs::Float64MultiArray', nesting=0, variable='pub_', function='ControllerInterfacePosition', line=88, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_trajectory_controller/command', queue_size=1, message_type='trajectory_msgs::JointTrajectory', nesting=0, variable='pub_', function='ControllerInterfaceTrajectory', line=108, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_states', queue_size=1, message_type='sensor_msgs::JointState', nesting=0, variable='pub_', function='ControllerInterfaceJointStates', line=128, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='tra_pub', nesting=1, function='chatterCallback', line=102, scope=[[int] goal_trajectory(#road), [_bus_type] (#bus)=(#bus), [void] tra_pub.publish(#tra_point)])
AdvertiseTuple(topic='tra_point', queue_size=1000, message_type='aubo_msgs::TraPoint', nesting=0, variable='tra_pub', function='main', line=117, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='power_state', queue_size=1, message_type='cob_msgs::PowerState', nesting=0, variable='topicPub_power_state_', function='cob_voltage_control_ros', line=49, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='em_stop_state', queue_size=1, message_type='cob_msgs::EmergencyStopState', nesting=0, variable='topicPub_em_stop_state_', function='cob_voltage_control_ros', line=50, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='current', queue_size=10, message_type='std_msgs::Float64', nesting=0, variable='topicPub_Current_', function='cob_voltage_control_ros', line=52, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='voltage', queue_size=10, message_type='std_msgs::Float64', nesting=0, variable='topicPub_Voltage_', function='cob_voltage_control_ros', line=53, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='topicPub_Voltage_', nesting=0, function='update', line=80, scope=[void] update())
PublishTuple(variable='topicPub_Current_', nesting=0, function='update', line=81, scope=[void] update())
PublishTuple(variable='topicPub_power_state_', nesting=0, function='update', line=82, scope=[void] update())
PublishTuple(variable='topicPub_em_stop_state_', nesting=0, function='update', line=83, scope=[void] update())
AdvertiseTuple(topic='velocity', queue_size=10, message_type='geometry_msgs::Twist', nesting=0, variable='velocity_commander_', function='init', line=54, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='debug/feedback', queue_size=10, message_type='std_msgs::String', nesting=0, variable='debug_jabber_', function='init', line=55, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='debug_jabber_', nesting=1, function='syncCb', line=129, scope=[[KDL::Rotation] rot = ([KDL::Rotation] new Rotation()), [void] quaternionMsgToKDL(#orientation, #rot), [double] r = (None), [void] rot.GetRPY(#r, #p, #y), [ecl::LegacyPose2D<double>] pose = ([ecl::LegacyPose2D<double>] LegacyPose2D()), [void] pose.x(#x), [void] pose.y(#y), [void] pose.heading([const Angle<double>] Angle()), [void] dock_.update(#data, #bumper, #charger, #pose), [std_msgs::StringPtr] debug_log = ([std_msgs::StringPtr] shared_ptr()), [std::basic_string<char>] operator=(#data, [std::string] dock_.getDebugStream()), [void] debug_jabber_.publish(#debug_log), if [([bool] dock_.canRun(), [[geometry_msgs::TwistPtr] cmd_vel = ([geometry_msgs::TwistPtr] shared_ptr()), [_x_type] (#x)=([double] dock_.getVX()), [_z_type] (#z)=([double] dock_.getWZ()), [void] velocity_commander_.publish(#cmd_vel)])]])
PublishTuple(variable='velocity_commander_', nesting=2, function='syncCb', line=136, scope=[[geometry_msgs::TwistPtr] cmd_vel = ([geometry_msgs::TwistPtr] shared_ptr()), [_x_type] (#x)=([double] dock_.getVX()), [_z_type] (#z)=([double] dock_.getWZ()), [void] velocity_commander_.publish(#cmd_vel)])
AdvertiseTuple(topic='cmd_vel', queue_size=1, message_type='geometry_msgs::Twist', nesting=0, variable='cmdpub_', function='onInit', line=110, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='marker', queue_size=1, message_type='visualization_msgs::Marker', nesting=0, variable='markerpub_', function='onInit', line=111, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='bbox', queue_size=1, message_type='visualization_msgs::Marker', nesting=0, variable='bboxpub_', function='onInit', line=112, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='cmdpub_', nesting=3, function='imagecb', line=200, scope=[[void] cmdpub_.publish([geometry_msgs::TwistPtr] shared_ptr())])
PublishTuple(variable='cmdpub_', nesting=2, function='imagecb', line=213, scope=[[geometry_msgs::TwistPtr] cmd = ([geometry_msgs::TwistPtr] shared_ptr()), [_x_type] (#x)=([double] ([double] (#z)-(#goal_z_))*(#z_scale_)), [_z_type] (#z)=([double] ([float] -(#x))*(#x_scale_)), [void] cmdpub_.publish(#cmd)])
PublishTuple(variable='cmdpub_', nesting=2, function='imagecb', line=223, scope=[[void] cmdpub_.publish([geometry_msgs::TwistPtr] shared_ptr())])
PublishTuple(variable='cmdpub_', nesting=1, function='changeModeSrvCb', line=236, scope=[[void] cmdpub_.publish([geometry_msgs::TwistPtr] shared_ptr()), [bool] (#enabled_)=(False)])
PublishTuple(variable='markerpub_', nesting=0, function='publishMarker', line=273, scope=[void] publishMarker(x, y, z))
PublishTuple(variable='bboxpub_', nesting=0, function='publishBbox', line=308, scope=[void] publishBbox())
AdvertiseTuple(topic='robotiq_force_torque_sensor', queue_size=512, message_type='robotiq_force_torque_sensor::ft_sensor', nesting=0, variable='sensor_pub', function='main', line=176, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='robotiq_force_torque_wrench', queue_size=512, message_type='geometry_msgs::WrenchStamped', nesting=0, variable='wrench_pub', function='main', line=177, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='sensor_pub', nesting=3, function='main', line=201, scope=[[void] sensor_pub.publish(#msgStream), [ros::Time] operator=(#stamp, [ros::Time] now()), [_x_type] (#x)=(#Fx), [_y_type] (#y)=(#Fy), [_z_type] (#z)=(#Fz), [_x_type] (#x)=(#Mx), [_y_type] (#y)=(#My), [_z_type] (#z)=(#Mz), [void] wrench_pub.publish(#wrenchMsg)])
PublishTuple(variable='wrench_pub', nesting=3, function='main', line=211, scope=[[void] sensor_pub.publish(#msgStream), [ros::Time] operator=(#stamp, [ros::Time] now()), [_x_type] (#x)=(#Fx), [_y_type] (#y)=(#Fy), [_z_type] (#z)=(#Fz), [_x_type] (#x)=(#Mx), [_y_type] (#y)=(#My), [_z_type] (#z)=(#Mz), [void] wrench_pub.publish(#wrenchMsg)])
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=5, message_type='sr_robot_msgs::sendupdate', nesting=0, variable='shadowhand_pub', function='ShadowhandToCybergloveRemapper', line=72, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='shadowhand_pub', nesting=0, function='jointstatesCallback', line=122, scope=[void] jointstatesCallback(msg))
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=5, message_type='sr_robot_msgs::sendupdate', nesting=0, variable='shadowhand_pub', function='ShadowhandToCybergloveRemapper', line=72, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='shadowhand_pub', nesting=0, function='jointstatesCallback', line=122, scope=[void] jointstatesCallback(msg))
AdvertiseTuple(topic='/joint_states', queue_size=1, message_type='sensor_msgs::JointState', nesting=0, variable='topicPub_JointState', function='NodeClass', line=239, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='state', queue_size=1, message_type='control_msgs::JointTrajectoryControllerState', nesting=0, variable='topicPub_ControllerState', function='NodeClass', line=245, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='/diagnostics', queue_size=1, message_type='diagnostic_msgs::DiagnosticArray', nesting=0, variable='topicPub_DiagnosticGlobal_', function='NodeClass', line=246, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='diagnostic', queue_size=1, message_type='diagnostic_msgs::DiagnosticStatus', nesting=0, variable='topicPub_Diagnostic', function='NodeClass', line=248, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='topicPub_JointState', nesting=0, function='publish_JointStates', line=674, scope=[bool] publish_JointStates())
PublishTuple(variable='topicPub_ControllerState', nesting=0, function='publish_JointStates', line=676, scope=[bool] publish_JointStates())
PublishTuple(variable='topicPub_Diagnostic', nesting=0, function='publish_JointStates', line=715, scope=[bool] publish_JointStates())
PublishTuple(variable='topicPub_DiagnosticGlobal_', nesting=0, function='publish_JointStates', line=744, scope=[bool] publish_JointStates())
AdvertiseTuple(topic='/base_bl_caster_r_wheel_controller/command', queue_size=1, message_type='std_msgs::Float64', nesting=0, variable='bl_caster_pub', function='NodeClass', line=225, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='/base_br_caster_r_wheel_controller/command', queue_size=1, message_type='std_msgs::Float64', nesting=0, variable='br_caster_pub', function='NodeClass', line=226, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='/base_fl_caster_r_wheel_controller/command', queue_size=1, message_type='std_msgs::Float64', nesting=0, variable='fl_caster_pub', function='NodeClass', line=227, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='/base_fr_caster_r_wheel_controller/command', queue_size=1, message_type='std_msgs::Float64', nesting=0, variable='fr_caster_pub', function='NodeClass', line=228, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='/base_bl_caster_rotation_controller/command', queue_size=1, message_type='std_msgs::Float64', nesting=0, variable='bl_steer_pub', function='NodeClass', line=229, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='/base_br_caster_rotation_controller/command', queue_size=1, message_type='std_msgs::Float64', nesting=0, variable='br_steer_pub', function='NodeClass', line=230, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='/base_fl_caster_rotation_controller/command', queue_size=1, message_type='std_msgs::Float64', nesting=0, variable='fl_steer_pub', function='NodeClass', line=231, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='/base_fr_caster_rotation_controller/command', queue_size=1, message_type='std_msgs::Float64', nesting=0, variable='fr_steer_pub', function='NodeClass', line=232, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='state', queue_size=1, message_type='control_msgs::JointTrajectoryControllerState', nesting=0, variable='topicPub_ControllerState', function='NodeClass', line=245, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='/diagnostics', queue_size=1, message_type='diagnostic_msgs::DiagnosticArray', nesting=0, variable='topicPub_DiagnosticGlobal_', function='NodeClass', line=246, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='diagnostic', queue_size=1, message_type='diagnostic_msgs::DiagnosticStatus', nesting=0, variable='topicPub_Diagnostic', function='NodeClass', line=248, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='fl_caster_pub', nesting=3, function='topicCallback_JointStateCmd', line=392, scope=[[void] fl_caster_pub.publish(#fl)])
PublishTuple(variable='fr_caster_pub', nesting=3, function='topicCallback_JointStateCmd', line=394, scope=[[void] fr_caster_pub.publish(#fl)])
PublishTuple(variable='bl_caster_pub', nesting=3, function='topicCallback_JointStateCmd', line=396, scope=[[void] bl_caster_pub.publish(#fl)])
PublishTuple(variable='br_caster_pub', nesting=3, function='topicCallback_JointStateCmd', line=398, scope=[[void] br_caster_pub.publish(#fl)])
PublishTuple(variable='fl_steer_pub', nesting=3, function='topicCallback_JointStateCmd', line=401, scope=[[void] fl_steer_pub.publish(#fl)])
PublishTuple(variable='fr_steer_pub', nesting=3, function='topicCallback_JointStateCmd', line=403, scope=[[void] fr_steer_pub.publish(#fl)])
PublishTuple(variable='bl_steer_pub', nesting=3, function='topicCallback_JointStateCmd', line=405, scope=[[void] bl_steer_pub.publish(#fl)])
PublishTuple(variable='br_steer_pub', nesting=3, function='topicCallback_JointStateCmd', line=407, scope=[[void] br_steer_pub.publish(#fl)])
PublishTuple(variable='topicPub_ControllerState', nesting=0, function='publish_JointStates', line=676, scope=[bool] publish_JointStates())
PublishTuple(variable='topicPub_Diagnostic', nesting=0, function='publish_JointStates', line=715, scope=[bool] publish_JointStates())
PublishTuple(variable='topicPub_DiagnosticGlobal_', nesting=0, function='publish_JointStates', line=744, scope=[bool] publish_JointStates())
AdvertiseTuple(topic='feedback_states', queue_size=1, message_type='control_msgs::FollowJointTrajectoryFeedback', nesting=0, variable='pub_joint_control_state_', function='init', line=56, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='dynamic_feedback_states', queue_size=1, message_type='motoman_msgs::DynamicJointTrajectoryFeedback', nesting=0, variable='dynamic_pub_joint_control_state_', function='init', line=58, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_states', queue_size=1, message_type='sensor_msgs::JointState', nesting=0, variable='pub_joint_sensor_state_', function='init', line=60, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='dynamic_pub_joint_control_state_', nesting=0, function='create_messages', line=108, scope=[bool] create_messages(msg_in, control_state, sensor_state))
PublishTuple(variable='pub_joint_control_state_', nesting=0, function='create_messages', line=148, scope=[bool] create_messages(msg_in, control_state, sensor_state, robot_id))
PublishTuple(variable='pub_joint_sensor_state_', nesting=0, function='create_messages', line=156, scope=[bool] create_messages(msg_in, control_state, sensor_state, robot_id))
AdvertiseTuple(topic='feedback_states', queue_size=1, message_type='control_msgs::FollowJointTrajectoryFeedback', nesting=0, variable='pub_joint_control_state_', function='init', line=56, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='dynamic_feedback_states', queue_size=1, message_type='motoman_msgs::DynamicJointTrajectoryFeedback', nesting=0, variable='dynamic_pub_joint_control_state_', function='init', line=58, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_states', queue_size=1, message_type='sensor_msgs::JointState', nesting=0, variable='pub_joint_sensor_state_', function='init', line=60, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='dynamic_pub_joint_control_state_', nesting=0, function='create_messages', line=108, scope=[bool] create_messages(msg_in, control_state, sensor_state))
PublishTuple(variable='pub_joint_control_state_', nesting=0, function='create_messages', line=148, scope=[bool] create_messages(msg_in, control_state, sensor_state, robot_id))
PublishTuple(variable='pub_joint_sensor_state_', nesting=0, function='create_messages', line=156, scope=[bool] create_messages(msg_in, control_state, sensor_state, robot_id))
AdvertiseTuple(topic='received_messages', queue_size=10, message_type='can_msgs::Frame', nesting=0, variable='can_topic_', function='SocketCANToTopic', line=38, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='can_topic_', nesting=0, function='frameCallback', line=79, scope=[void] frameCallback(f))
AdvertiseTuple(topic='base/command', queue_size=1, message_type='geometry_msgs::Twist', nesting=0, variable='base_vel_pub_', function='KinematicExtensionBaseActive', line=80, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='/torso/joint_group_velocity_controller/command', queue_size=1, message_type='std_msgs::Float64MultiArray', nesting=0, variable='command_pub_', function='KinematicExtensionTorso', line=99, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_group_velocity_controller/command', queue_size=1, message_type='std_msgs::Float64MultiArray', nesting=0, variable='pub_', function='ControllerInterfaceVelocity', line=68, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_group_position_controller/command', queue_size=1, message_type='std_msgs::Float64MultiArray', nesting=0, variable='pub_', function='ControllerInterfacePosition', line=88, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_trajectory_controller/command', queue_size=1, message_type='trajectory_msgs::JointTrajectory', nesting=0, variable='pub_', function='ControllerInterfaceTrajectory', line=108, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_states', queue_size=1, message_type='sensor_msgs::JointState', nesting=0, variable='pub_', function='ControllerInterfaceJointStates', line=128, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='base/command', queue_size=1, message_type='geometry_msgs::Twist', nesting=0, variable='base_vel_pub_', function='KinematicExtensionBaseActive', line=80, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='/torso/joint_group_velocity_controller/command', queue_size=1, message_type='std_msgs::Float64MultiArray', nesting=0, variable='command_pub_', function='KinematicExtensionTorso', line=99, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_group_velocity_controller/command', queue_size=1, message_type='std_msgs::Float64MultiArray', nesting=0, variable='pub_', function='ControllerInterfaceVelocity', line=68, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_group_position_controller/command', queue_size=1, message_type='std_msgs::Float64MultiArray', nesting=0, variable='pub_', function='ControllerInterfacePosition', line=88, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_trajectory_controller/command', queue_size=1, message_type='trajectory_msgs::JointTrajectory', nesting=0, variable='pub_', function='ControllerInterfaceTrajectory', line=108, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_states', queue_size=1, message_type='sensor_msgs::JointState', nesting=0, variable='pub_', function='ControllerInterfaceJointStates', line=128, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='base/command', queue_size=1, message_type='geometry_msgs::Twist', nesting=0, variable='base_vel_pub_', function='KinematicExtensionBaseActive', line=80, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='/torso/joint_group_velocity_controller/command', queue_size=1, message_type='std_msgs::Float64MultiArray', nesting=0, variable='command_pub_', function='KinematicExtensionTorso', line=99, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='enable', queue_size=1, message_type='std_msgs::String', nesting=0, variable='enable_pub_', function='JoyOp', line=70, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=True, param_topic=False, param_queue=False)
AdvertiseTuple(topic='disable', queue_size=1, message_type='std_msgs::String', nesting=0, variable='disable_pub_', function='JoyOp', line=71, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=True, param_topic=False, param_queue=False)
AdvertiseTuple(topic='cmd_vel', queue_size=1, message_type='geometry_msgs::Twist', nesting=0, variable='vel_pub_', function='JoyOp', line=72, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=True, param_topic=False, param_queue=False)
PublishTuple(variable='enable_pub_', nesting=1, function='JoyOp', line=125, scope=[[std_msgs::String] msg = ([std_msgs::String] String_()), [std::basic_string<char>] operator=(#data, all), [void] enable_pub_.publish(#msg)])
PublishTuple(variable='enable_pub_', nesting=2, function='publish', line=152, scope=[[std_msgs::String] msg = ([std_msgs::String] String_()), [std::basic_string<char>] operator=(#data, all), [void] enable_pub_.publish(#msg), [int] (#enabled_)=(True)])
PublishTuple(variable='enable_pub_', nesting=3, function='publish', line=167, scope=[[std_msgs::String] msg = ([std_msgs::String] String_()), [std::basic_string<char>] operator=(#data, all), [void] enable_pub_.publish(#msg), [int] (#enabled_)=(True)])
PublishTuple(variable='disable_pub_', nesting=2, function='publish', line=176, scope=[if [([int] #enabled_, [[std_msgs::String] msg = ([std_msgs::String] String_()), [std::basic_string<char>] operator=(#data, all), [void] enable_pub_.publish(#msg), [int] (#enabled_)=(True)]), (True, [])], [std_msgs::String] msg = ([std_msgs::String] String_()), [std::basic_string<char>] operator=(#data, all), [void] disable_pub_.publish(#msg), [int] (#enabled_)=(False)])
PublishTuple(variable='vel_pub_', nesting=2, function='publish', line=184, scope=[[void] vel_pub_.publish(#last_published_), [bool] (#zero_twist_published_)=(False)])
PublishTuple(variable='vel_pub_', nesting=2, function='publish', line=194, scope=[[void] vel_pub_.publish([geometry_msgs::Twist] *(None)), [bool] (#zero_twist_published_)=(True)])
AdvertiseTuple(topic=[const std::string] #BASE_CONTROLLER_COMMAND_TOPIC, queue_size=1, message_type='geometry_msgs::Twist', nesting=0, variable='pub_', function='TeleopCOBMarker', line=61, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='pub_', nesting=0, function='processFeedback', line=99, scope=[void] processFeedback(feedback))
AdvertiseTuple(topic=[std::string] #cmd_vel_topic_, queue_size=5, message_type='geometry_msgs::Twist', nesting=0, variable='pub_cmd_vel_', function='init', line=28, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='pub_cmd_vel_', nesting=0, function='moveAt', line=67, scope=[void] moveAt(v, w, t))
AdvertiseTuple(topic='diagnostics', queue_size=1, message_type='diagnostic_msgs::DiagnosticArray', nesting=0, variable='diagnostics_pub_', function='SoundAction', line=56, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='marker', queue_size=1, message_type='visualization_msgs::Marker', nesting=0, variable='pubMarker_', function='SoundAction', line=59, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='diagnostics_pub_', nesting=1, function='say', line=244, scope=[[std::basic_string<char>] operator=(#message, [basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+(Command say failed to play sound using mode , #mode)), [diagnostic_msgs::DiagnosticStatus] status = ([diagnostic_msgs::DiagnosticStatus] DiagnosticStatus_()), [_level_type] (#level)=(2), [std::basic_string<char>] operator=(#name, sound), [std::basic_string<char>] operator=(#message, #message), [void] status.push_back(#status), [ros::Time] operator=(#stamp, [ros::Time] now()), [void] diagnostics_pub_.publish(#diagnostics_), [void] status.resize(0, [value_type] (default)), return False])
PublishTuple(variable='diagnostics_pub_', nesting=1, function='play', line=288, scope=[[std::basic_string<char>] operator=(#message, [basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+(Could not play file %s, #filename)), [diagnostic_msgs::DiagnosticStatus] status = ([diagnostic_msgs::DiagnosticStatus] DiagnosticStatus_()), [_level_type] (#level)=(2), [std::basic_string<char>] operator=(#name, sound), [std::basic_string<char>] operator=(#message, #message), [void] status.push_back(#status), [ros::Time] operator=(#stamp, [ros::Time] now()), [void] diagnostics_pub_.publish(#diagnostics_), [void] status.resize(0, [value_type] (default)), return #ret])
PublishTuple(variable='diagnostics_pub_', nesting=0, function='timer_cb', line=307, scope=[void] timer_cb())
PublishTuple(variable='pubMarker_', nesting=0, function='publish_marker', line=361, scope=[void] publish_marker(data))
AdvertiseTuple(topic=[basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+(#joint_path_action_name, /joint_path_command), queue_size=1, message_type='motoman_msgs::DynamicJointTrajectory', nesting=1, variable='pub_trajectory_command_', function='JointTrajectoryAction', line=83, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_path_command', queue_size=1, message_type='motoman_msgs::DynamicJointTrajectory', nesting=0, variable='pub_trajectory_command_', function='JointTrajectoryAction', line=105, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='pub_trajectory_command_', nesting=0, function='goalCB', line=304, scope=[void] goalCB(gh))
PublishTuple(variable='pub_trajectory_command_', nesting=0, function='abortGoal', line=585, scope=[void] abortGoal())
AdvertiseTuple(topic=[basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+([basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+([basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+(#ns_str, /), #name_str), /feedback_states), queue_size=1, message_type='control_msgs::FollowJointTrajectoryFeedback', nesting=1, variable='pub_joint_control_state_', function='init', line=62, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+([basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+([basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+(#ns_str, /), #name_str), /joint_states), queue_size=1, message_type='sensor_msgs::JointState', nesting=1, variable='pub_joint_sensor_state_', function='init', line=64, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='feedback_states', queue_size=1, message_type='control_msgs::FollowJointTrajectoryFeedback', nesting=0, variable='pub_joint_control_state_', function='init', line=79, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_states', queue_size=1, message_type='sensor_msgs::JointState', nesting=0, variable='pub_joint_sensor_state_', function='init', line=81, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='pub_joint_control_state_', nesting=0, function='create_messages', line=161, scope=[bool] create_messages(msg_in, control_state, sensor_state))
PublishTuple(variable='pub_joint_sensor_state_', nesting=0, function='create_messages', line=162, scope=[bool] create_messages(msg_in, control_state, sensor_state))
AdvertiseTuple(topic=[basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+([basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+([basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+(#ns_str, /), #name_str), /feedback_states), queue_size=1, message_type='control_msgs::FollowJointTrajectoryFeedback', nesting=1, variable='pub_joint_control_state_', function='init', line=62, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+([basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+([basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+(#ns_str, /), #name_str), /joint_states), queue_size=1, message_type='sensor_msgs::JointState', nesting=1, variable='pub_joint_sensor_state_', function='init', line=64, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='feedback_states', queue_size=1, message_type='control_msgs::FollowJointTrajectoryFeedback', nesting=0, variable='pub_joint_control_state_', function='init', line=79, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_states', queue_size=1, message_type='sensor_msgs::JointState', nesting=0, variable='pub_joint_sensor_state_', function='init', line=81, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='pub_joint_control_state_', nesting=0, function='create_messages', line=161, scope=[bool] create_messages(msg_in, control_state, sensor_state))
PublishTuple(variable='pub_joint_sensor_state_', nesting=0, function='create_messages', line=162, scope=[bool] create_messages(msg_in, control_state, sensor_state))
AdvertiseTuple(topic='command_velocity', queue_size=10, message_type='geometry_msgs::Twist', nesting=0, variable='command_velocity_publisher_', function='init', line=217, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='pose_reached', queue_size=10, message_type='std_msgs::Bool', nesting=0, variable='pose_reached_publisher_', function='init', line=218, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='pose_reached_publisher_', nesting=2, function='getControlOutput', line=403, scope=[[bool] (#pose_reached_)=(True), [std_msgs::Bool] bool_msg = ([std_msgs::Bool] Bool_()), [_data_type] (#data)=(True), [void] pose_reached_publisher_.publish(#bool_msg)])
PublishTuple(variable='command_velocity_publisher_', nesting=0, function='setControlOutput', line=453, scope=[void] setControlOutput())
PublishTuple(variable='pub', nesting=0, function='callback', line=87, scope=[void] callback(msg))
AdvertiseTuple(topic=[basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+([basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+([basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+(sh_, #child_name), #controller_type), /command), queue_size=2, message_type='std_msgs::Float64', nesting=0, variable='pub', function='main', line=117, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #topic_name_, queue_size=1, message_type='visualization_msgs::Marker', nesting=0, variable='marker_pub_', function='VelocityLimitedMarker', line=90, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
PublishTuple(variable='marker_pub_', nesting=2, function='publishMarkers', line=317, scope=[[ros::Time] operator=(#stamp, [ros::Time] now()), [void] interpolateColor(#x_vel_diff, #color), [void] marker_pub_.publish(#x_pos_marker_)])
PublishTuple(variable='marker_pub_', nesting=3, function='publishMarkers', line=324, scope=[[ros::Time] operator=(#stamp, [ros::Time] now()), [void] interpolateColor(#x_vel_diff, #color), [void] marker_pub_.publish(#x_neg_marker_)])
PublishTuple(variable='marker_pub_', nesting=2, function='publishMarkers', line=338, scope=[[ros::Time] operator=(#stamp, [ros::Time] now()), [void] interpolateColor(#y_vel_diff, #color), [void] marker_pub_.publish(#y_pos_marker_)])
PublishTuple(variable='marker_pub_', nesting=3, function='publishMarkers', line=345, scope=[[ros::Time] operator=(#stamp, [ros::Time] now()), [void] interpolateColor(#y_vel_diff, #color), [void] marker_pub_.publish(#y_neg_marker_)])
PublishTuple(variable='marker_pub_', nesting=2, function='publishMarkers', line=359, scope=[[ros::Time] operator=(#stamp, [ros::Time] now()), [void] interpolateColor(#theta_vel_diff, #color), [void] marker_pub_.publish(#theta_pos_marker_)])
PublishTuple(variable='marker_pub_', nesting=3, function='publishMarkers', line=366, scope=[[ros::Time] operator=(#stamp, [ros::Time] now()), [void] interpolateColor(#theta_vel_diff, #color), [void] marker_pub_.publish(#theta_neg_marker_)])
AdvertiseTuple(topic='cmd_vel', queue_size=100, message_type='geometry_msgs::Twist', nesting=0, variable='pub_cmd_vel', function='init', line=77, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='pub_cmd_vel', nesting=3, function='spin', line=111, scope=[[void] snap(), [void] pub_cmd_vel.publish(#zero_cmd_vel), [cv::Mat] pano = ([cv::Mat] new Mat()), [cv::Stitcher] stitcher = ([cv::Stitcher] createDefault(False)), [cv::Stitcher::Status] status = ([cv::Stitcher::Status] stitcher.stitch([const cv::_InputArray] new _InputArray(#images_), [const cv::_OutputArray] new _OutputArray(#pano))), [void] log([std::string] basic_string()), [cv_bridge::CvImage] cv_img = ([cv_bridge::CvImage] new CvImage()), [cv::Mat] operator=(#image, #pano), [std::basic_string<char>] operator=(#encoding, bgr8), [ros::Time] operator=(#stamp, [ros::Time] now()), [void] pub_stitched.publish([const sensor_msgs::ImageConstPtr] shared_ptr()), [void] log([std::string] basic_string()), [bool] (#is_active)=(False)])
PublishTuple(variable='pub_cmd_vel', nesting=5, function='spin', line=138, scope=[[void] pub_cmd_vel.publish(#zero_cmd_vel), [bool] (#take_snapshot)=(True)])
PublishTuple(variable='pub_cmd_vel', nesting=0, function='rotate', line=181, scope=[void] rotate())
AdvertiseTuple(topic='joint_command', queue_size=1, message_type='control_msgs::JointTrajectoryControllerState', nesting=0, variable='topic_pub_controller_joint_command_', function='NodeClass', line=210, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='odometry', queue_size=1, message_type='nav_msgs::Odometry', nesting=0, variable='topic_pub_odometry_', function='NodeClass', line=212, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='topic_pub_controller_joint_command_', nesting=2, function='topicCallbackDiagnostic', line=413, scope=[[void] topic_pub_controller_joint_command_.publish(#joint_state_cmd)])
AdvertiseTuple(topic='joy', queue_size=1, message_type='sensor_msgs::Joy', nesting=0, variable='keyboard_pub', function='main', line=379, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='keyboard_pub', nesting=1, function='main', line=435, scope=[[void] spinOnce(), [sensor_msgs::Joy] msg = ([sensor_msgs::Joy] Joy_()), [void] axes.resize(6, [value_type] (default)), [void] buttons.resize(12, [value_type] (default)), if [([bool] ([ssize_t] read(#kfd, [char *] &(#c), 1))<(0), [[void] perror(read():), [void] exit([int] -(1))])], switch [([bool] (#c)==(110), [if [([bool] #fast_toggle, [[bool] (#fast_toggle)=(False)]), (True, [[bool] (#fast_toggle)=(True)])]]), ([bool] (#c)==(109), [if [([bool] #mode, [[bool] (#mode)=(False)]), (True, [[bool] (#mode)=(True)])]]), ([bool] (#c)==(104), [[void] showHelp()])], [void] composeJoyMessage(#msg, #c), [void] keyboard_pub.publish(#msg)])
AdvertiseTuple(topic=[std::string] #frw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_frw_', function='RbcarControllerClass', line=270, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #flw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_flw_', function='RbcarControllerClass', line=271, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #blw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_blw_', function='RbcarControllerClass', line=272, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #brw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_brw_', function='RbcarControllerClass', line=273, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #frw_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_pos_frw_', function='RbcarControllerClass', line=274, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #flw_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_pos_flw_', function='RbcarControllerClass', line=275, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic='/rbcar_robot_control/odom', queue_size=1000, message_type='nav_msgs::Odometry', nesting=0, variable='odom_pub_', function='RbcarControllerClass', line=281, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='ref_vel_frw_', nesting=0, function='UpdateControl', line=367, scope=[void] UpdateControl())
PublishTuple(variable='ref_vel_flw_', nesting=0, function='UpdateControl', line=368, scope=[void] UpdateControl())
PublishTuple(variable='ref_vel_blw_', nesting=0, function='UpdateControl', line=369, scope=[void] UpdateControl())
PublishTuple(variable='ref_vel_brw_', nesting=0, function='UpdateControl', line=370, scope=[void] UpdateControl())
PublishTuple(variable='ref_pos_frw_', nesting=0, function='UpdateControl', line=371, scope=[void] UpdateControl())
PublishTuple(variable='ref_pos_flw_', nesting=0, function='UpdateControl', line=372, scope=[void] UpdateControl())
PublishTuple(variable='odom_pub_', nesting=0, function='PublishOdometry', line=488, scope=[void] PublishOdometry())
AdvertiseTuple(topic=[std::string] #frw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_frw_', function='SummitXLControllerClass', line=348, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #flw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_flw_', function='SummitXLControllerClass', line=349, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #blw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_blw_', function='SummitXLControllerClass', line=350, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #brw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_brw_', function='SummitXLControllerClass', line=351, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #frw_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=1, variable='ref_pos_frw_', function='SummitXLControllerClass', line=354, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #flw_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=1, variable='ref_pos_flw_', function='SummitXLControllerClass', line=355, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #blw_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=1, variable='ref_pos_blw_', function='SummitXLControllerClass', line=356, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #brw_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=1, variable='ref_pos_brw_', function='SummitXLControllerClass', line=357, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #scissor_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=2, variable='ref_pos_scissor_', function='SummitXLControllerClass', line=360, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #pan_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_pos_pan_', function='SummitXLControllerClass', line=363, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #tilt_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_pos_tilt_', function='SummitXLControllerClass', line=364, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic='/summit_xl/odom', queue_size=1000, message_type='nav_msgs::Odometry', nesting=0, variable='odom_pub_', function='SummitXLControllerClass', line=375, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='ref_vel_frw_', nesting=1, function='UpdateControl', line=458, scope=[[double] dUl = ([double] (#v_ref_x_)-([double] ([double] (0.5)*(#summit_xl_d_tracks_m_))*(#w_ref_))), [double] dUr = ([double] (#v_ref_x_)+([double] ([double] (0.5)*(#summit_xl_d_tracks_m_))*(#w_ref_))), [double] limit = (40.0), [std_msgs::Float64] frw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_msg = ([std_msgs::Float64] Float64_()), [double] k1 = (5.0), [_data_type] (#data)=([double] -([double] saturation([double] (#k1)*(#dUr), [double] -(#limit), #limit))), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] -([double] saturation([double] (#k1)*(#dUr), [double] -(#limit), #limit))), [void] ref_vel_frw_.publish(#frw_ref_msg), [void] ref_vel_flw_.publish(#flw_ref_msg), [void] ref_vel_blw_.publish(#blw_ref_msg), [void] ref_vel_brw_.publish(#brw_ref_msg)])
PublishTuple(variable='ref_vel_flw_', nesting=1, function='UpdateControl', line=459, scope=[[double] dUl = ([double] (#v_ref_x_)-([double] ([double] (0.5)*(#summit_xl_d_tracks_m_))*(#w_ref_))), [double] dUr = ([double] (#v_ref_x_)+([double] ([double] (0.5)*(#summit_xl_d_tracks_m_))*(#w_ref_))), [double] limit = (40.0), [std_msgs::Float64] frw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_msg = ([std_msgs::Float64] Float64_()), [double] k1 = (5.0), [_data_type] (#data)=([double] -([double] saturation([double] (#k1)*(#dUr), [double] -(#limit), #limit))), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] -([double] saturation([double] (#k1)*(#dUr), [double] -(#limit), #limit))), [void] ref_vel_frw_.publish(#frw_ref_msg), [void] ref_vel_flw_.publish(#flw_ref_msg), [void] ref_vel_blw_.publish(#blw_ref_msg), [void] ref_vel_brw_.publish(#brw_ref_msg)])
PublishTuple(variable='ref_vel_blw_', nesting=1, function='UpdateControl', line=460, scope=[[double] dUl = ([double] (#v_ref_x_)-([double] ([double] (0.5)*(#summit_xl_d_tracks_m_))*(#w_ref_))), [double] dUr = ([double] (#v_ref_x_)+([double] ([double] (0.5)*(#summit_xl_d_tracks_m_))*(#w_ref_))), [double] limit = (40.0), [std_msgs::Float64] frw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_msg = ([std_msgs::Float64] Float64_()), [double] k1 = (5.0), [_data_type] (#data)=([double] -([double] saturation([double] (#k1)*(#dUr), [double] -(#limit), #limit))), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] -([double] saturation([double] (#k1)*(#dUr), [double] -(#limit), #limit))), [void] ref_vel_frw_.publish(#frw_ref_msg), [void] ref_vel_flw_.publish(#flw_ref_msg), [void] ref_vel_blw_.publish(#blw_ref_msg), [void] ref_vel_brw_.publish(#brw_ref_msg)])
PublishTuple(variable='ref_vel_brw_', nesting=1, function='UpdateControl', line=461, scope=[[double] dUl = ([double] (#v_ref_x_)-([double] ([double] (0.5)*(#summit_xl_d_tracks_m_))*(#w_ref_))), [double] dUr = ([double] (#v_ref_x_)+([double] ([double] (0.5)*(#summit_xl_d_tracks_m_))*(#w_ref_))), [double] limit = (40.0), [std_msgs::Float64] frw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_msg = ([std_msgs::Float64] Float64_()), [double] k1 = (5.0), [_data_type] (#data)=([double] -([double] saturation([double] (#k1)*(#dUr), [double] -(#limit), #limit))), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] -([double] saturation([double] (#k1)*(#dUr), [double] -(#limit), #limit))), [void] ref_vel_frw_.publish(#frw_ref_msg), [void] ref_vel_flw_.publish(#flw_ref_msg), [void] ref_vel_blw_.publish(#blw_ref_msg), [void] ref_vel_brw_.publish(#brw_ref_msg)])
PublishTuple(variable='odom_pub_', nesting=0, function='PublishOdometry', line=737, scope=[void] PublishOdometry())
AdvertiseTuple(topic=[std::string] #frw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_frw_', function='SummitXLControllerClass', line=353, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #flw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_flw_', function='SummitXLControllerClass', line=354, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #blw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_blw_', function='SummitXLControllerClass', line=355, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #brw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_brw_', function='SummitXLControllerClass', line=356, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #scissor_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=1, variable='ref_pos_scissor_', function='SummitXLControllerClass', line=360, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #pan_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_pos_pan_', function='SummitXLControllerClass', line=363, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #tilt_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_pos_tilt_', function='SummitXLControllerClass', line=364, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #odom_topic_, queue_size=1000, message_type='nav_msgs::Odometry', nesting=0, variable='odom_pub_', function='SummitXLControllerClass', line=373, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic='/gazebo/set_model_state', queue_size=1, message_type='gazebo_msgs::ModelState', nesting=0, variable='gazebo_set_model_', function='SummitXLControllerClass', line=380, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='ref_vel_frw_', nesting=1, function='UpdateControl', line=444, scope=[[double] v_left_mps = (None), [double] (#v_left_mps)=([double] ([double] ([double] ([double] operator[](#velocity, #blw_vel_))+([double] operator[](#velocity, #flw_vel_)))/(2.0))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_right_mps)=([double] ([double] ([double] ([double] operator[](#velocity, #brw_vel_))+([double] operator[](#velocity, #frw_vel_)))/(2.0))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#linearSpeedXMps_)=([double] ([double] (#v_right_mps)+(#v_left_mps))/(2.0)), [double] (#angularSpeedRads_)=([double] ([double] (#v_right_mps)-(#v_left_mps))/(#summit_xl_d_tracks_m_)), [std_msgs::Float64] frw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] ([double] (#v_ref_x_)+([double] ([double] (#w_ref_)*(#summit_xl_d_tracks_m_))/(2.0)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [_data_type] (#data)=([double] ([double] (#v_ref_x_)+([double] ([double] (#w_ref_)*(#summit_xl_d_tracks_m_))/(2.0)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [_data_type] (#data)=([double] ([double] (#v_ref_x_)-([double] ([double] (#w_ref_)*(#summit_xl_d_tracks_m_))/(2.0)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [_data_type] (#data)=([double] ([double] (#v_ref_x_)-([double] ([double] (#w_ref_)*(#summit_xl_d_tracks_m_))/(2.0)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [void] ref_vel_frw_.publish(#frw_ref_msg), [void] ref_vel_flw_.publish(#flw_ref_msg), [void] ref_vel_blw_.publish(#blw_ref_msg), [void] ref_vel_brw_.publish(#brw_ref_msg)])
PublishTuple(variable='ref_vel_flw_', nesting=1, function='UpdateControl', line=445, scope=[[double] v_left_mps = (None), [double] (#v_left_mps)=([double] ([double] ([double] ([double] operator[](#velocity, #blw_vel_))+([double] operator[](#velocity, #flw_vel_)))/(2.0))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_right_mps)=([double] ([double] ([double] ([double] operator[](#velocity, #brw_vel_))+([double] operator[](#velocity, #frw_vel_)))/(2.0))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#linearSpeedXMps_)=([double] ([double] (#v_right_mps)+(#v_left_mps))/(2.0)), [double] (#angularSpeedRads_)=([double] ([double] (#v_right_mps)-(#v_left_mps))/(#summit_xl_d_tracks_m_)), [std_msgs::Float64] frw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] ([double] (#v_ref_x_)+([double] ([double] (#w_ref_)*(#summit_xl_d_tracks_m_))/(2.0)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [_data_type] (#data)=([double] ([double] (#v_ref_x_)+([double] ([double] (#w_ref_)*(#summit_xl_d_tracks_m_))/(2.0)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [_data_type] (#data)=([double] ([double] (#v_ref_x_)-([double] ([double] (#w_ref_)*(#summit_xl_d_tracks_m_))/(2.0)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [_data_type] (#data)=([double] ([double] (#v_ref_x_)-([double] ([double] (#w_ref_)*(#summit_xl_d_tracks_m_))/(2.0)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [void] ref_vel_frw_.publish(#frw_ref_msg), [void] ref_vel_flw_.publish(#flw_ref_msg), [void] ref_vel_blw_.publish(#blw_ref_msg), [void] ref_vel_brw_.publish(#brw_ref_msg)])
PublishTuple(variable='ref_vel_blw_', nesting=1, function='UpdateControl', line=446, scope=[[double] v_left_mps = (None), [double] (#v_left_mps)=([double] ([double] ([double] ([double] operator[](#velocity, #blw_vel_))+([double] operator[](#velocity, #flw_vel_)))/(2.0))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_right_mps)=([double] ([double] ([double] ([double] operator[](#velocity, #brw_vel_))+([double] operator[](#velocity, #frw_vel_)))/(2.0))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#linearSpeedXMps_)=([double] ([double] (#v_right_mps)+(#v_left_mps))/(2.0)), [double] (#angularSpeedRads_)=([double] ([double] (#v_right_mps)-(#v_left_mps))/(#summit_xl_d_tracks_m_)), [std_msgs::Float64] frw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] ([double] (#v_ref_x_)+([double] ([double] (#w_ref_)*(#summit_xl_d_tracks_m_))/(2.0)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [_data_type] (#data)=([double] ([double] (#v_ref_x_)+([double] ([double] (#w_ref_)*(#summit_xl_d_tracks_m_))/(2.0)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [_data_type] (#data)=([double] ([double] (#v_ref_x_)-([double] ([double] (#w_ref_)*(#summit_xl_d_tracks_m_))/(2.0)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [_data_type] (#data)=([double] ([double] (#v_ref_x_)-([double] ([double] (#w_ref_)*(#summit_xl_d_tracks_m_))/(2.0)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [void] ref_vel_frw_.publish(#frw_ref_msg), [void] ref_vel_flw_.publish(#flw_ref_msg), [void] ref_vel_blw_.publish(#blw_ref_msg), [void] ref_vel_brw_.publish(#brw_ref_msg)])
PublishTuple(variable='ref_vel_brw_', nesting=1, function='UpdateControl', line=447, scope=[[double] v_left_mps = (None), [double] (#v_left_mps)=([double] ([double] ([double] ([double] operator[](#velocity, #blw_vel_))+([double] operator[](#velocity, #flw_vel_)))/(2.0))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_right_mps)=([double] ([double] ([double] ([double] operator[](#velocity, #brw_vel_))+([double] operator[](#velocity, #frw_vel_)))/(2.0))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#linearSpeedXMps_)=([double] ([double] (#v_right_mps)+(#v_left_mps))/(2.0)), [double] (#angularSpeedRads_)=([double] ([double] (#v_right_mps)-(#v_left_mps))/(#summit_xl_d_tracks_m_)), [std_msgs::Float64] frw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] ([double] (#v_ref_x_)+([double] ([double] (#w_ref_)*(#summit_xl_d_tracks_m_))/(2.0)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [_data_type] (#data)=([double] ([double] (#v_ref_x_)+([double] ([double] (#w_ref_)*(#summit_xl_d_tracks_m_))/(2.0)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [_data_type] (#data)=([double] ([double] (#v_ref_x_)-([double] ([double] (#w_ref_)*(#summit_xl_d_tracks_m_))/(2.0)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [_data_type] (#data)=([double] ([double] (#v_ref_x_)-([double] ([double] (#w_ref_)*(#summit_xl_d_tracks_m_))/(2.0)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [void] ref_vel_frw_.publish(#frw_ref_msg), [void] ref_vel_flw_.publish(#flw_ref_msg), [void] ref_vel_blw_.publish(#blw_ref_msg), [void] ref_vel_brw_.publish(#brw_ref_msg)])
PublishTuple(variable='ref_vel_frw_', nesting=1, function='UpdateControl', line=490, scope=[[double] v_frw_mps = (None), [double] (#v_frw_mps)=([double] ([double] operator[](#velocity, #frw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_flw_mps)=([double] ([double] operator[](#velocity, #flw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_blw_mps)=([double] ([double] operator[](#velocity, #blw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_brw_mps)=([double] ([double] operator[](#velocity, #brw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] vx = (#v_ref_x_), [double] vy = (#v_ref_y_), [double] w = (#w_ref_), [double] L = (#summit_xl_wheelbase_), [double] W = (#summit_xl_trackwidth_), [double] lab = ([double] ([double] (0.446)+(0.408))/(2.0)), [double] q1 = ([double] ([double] ([double] (#v_ref_x_)+(#v_ref_y_))+([double] (#lab)*(#w_ref_)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] q2 = ([double] ([double] ([double] (#v_ref_x_)-(#v_ref_y_))-([double] (#lab)*(#w_ref_)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] q3 = ([double] ([double] ([double] (#v_ref_x_)+(#v_ref_y_))-([double] (#lab)*(#w_ref_)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] q4 = ([double] ([double] ([double] (#v_ref_x_)-(#v_ref_y_))+([double] (#lab)*(#w_ref_)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] limit = (40.0), [std_msgs::Float64] frw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] saturation(#q1, [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation(#q2, [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation(#q3, [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation(#q4, [double] -(#limit), #limit)), [void] ref_vel_frw_.publish(#frw_ref_vel_msg), [void] ref_vel_flw_.publish(#flw_ref_vel_msg), [void] ref_vel_blw_.publish(#blw_ref_vel_msg), [void] ref_vel_brw_.publish(#brw_ref_vel_msg)])
PublishTuple(variable='ref_vel_flw_', nesting=1, function='UpdateControl', line=491, scope=[[double] v_frw_mps = (None), [double] (#v_frw_mps)=([double] ([double] operator[](#velocity, #frw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_flw_mps)=([double] ([double] operator[](#velocity, #flw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_blw_mps)=([double] ([double] operator[](#velocity, #blw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_brw_mps)=([double] ([double] operator[](#velocity, #brw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] vx = (#v_ref_x_), [double] vy = (#v_ref_y_), [double] w = (#w_ref_), [double] L = (#summit_xl_wheelbase_), [double] W = (#summit_xl_trackwidth_), [double] lab = ([double] ([double] (0.446)+(0.408))/(2.0)), [double] q1 = ([double] ([double] ([double] (#v_ref_x_)+(#v_ref_y_))+([double] (#lab)*(#w_ref_)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] q2 = ([double] ([double] ([double] (#v_ref_x_)-(#v_ref_y_))-([double] (#lab)*(#w_ref_)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] q3 = ([double] ([double] ([double] (#v_ref_x_)+(#v_ref_y_))-([double] (#lab)*(#w_ref_)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] q4 = ([double] ([double] ([double] (#v_ref_x_)-(#v_ref_y_))+([double] (#lab)*(#w_ref_)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] limit = (40.0), [std_msgs::Float64] frw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] saturation(#q1, [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation(#q2, [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation(#q3, [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation(#q4, [double] -(#limit), #limit)), [void] ref_vel_frw_.publish(#frw_ref_vel_msg), [void] ref_vel_flw_.publish(#flw_ref_vel_msg), [void] ref_vel_blw_.publish(#blw_ref_vel_msg), [void] ref_vel_brw_.publish(#brw_ref_vel_msg)])
PublishTuple(variable='ref_vel_blw_', nesting=1, function='UpdateControl', line=492, scope=[[double] v_frw_mps = (None), [double] (#v_frw_mps)=([double] ([double] operator[](#velocity, #frw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_flw_mps)=([double] ([double] operator[](#velocity, #flw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_blw_mps)=([double] ([double] operator[](#velocity, #blw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_brw_mps)=([double] ([double] operator[](#velocity, #brw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] vx = (#v_ref_x_), [double] vy = (#v_ref_y_), [double] w = (#w_ref_), [double] L = (#summit_xl_wheelbase_), [double] W = (#summit_xl_trackwidth_), [double] lab = ([double] ([double] (0.446)+(0.408))/(2.0)), [double] q1 = ([double] ([double] ([double] (#v_ref_x_)+(#v_ref_y_))+([double] (#lab)*(#w_ref_)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] q2 = ([double] ([double] ([double] (#v_ref_x_)-(#v_ref_y_))-([double] (#lab)*(#w_ref_)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] q3 = ([double] ([double] ([double] (#v_ref_x_)+(#v_ref_y_))-([double] (#lab)*(#w_ref_)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] q4 = ([double] ([double] ([double] (#v_ref_x_)-(#v_ref_y_))+([double] (#lab)*(#w_ref_)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] limit = (40.0), [std_msgs::Float64] frw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] saturation(#q1, [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation(#q2, [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation(#q3, [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation(#q4, [double] -(#limit), #limit)), [void] ref_vel_frw_.publish(#frw_ref_vel_msg), [void] ref_vel_flw_.publish(#flw_ref_vel_msg), [void] ref_vel_blw_.publish(#blw_ref_vel_msg), [void] ref_vel_brw_.publish(#brw_ref_vel_msg)])
PublishTuple(variable='ref_vel_brw_', nesting=1, function='UpdateControl', line=493, scope=[[double] v_frw_mps = (None), [double] (#v_frw_mps)=([double] ([double] operator[](#velocity, #frw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_flw_mps)=([double] ([double] operator[](#velocity, #flw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_blw_mps)=([double] ([double] operator[](#velocity, #blw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_brw_mps)=([double] ([double] operator[](#velocity, #brw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] vx = (#v_ref_x_), [double] vy = (#v_ref_y_), [double] w = (#w_ref_), [double] L = (#summit_xl_wheelbase_), [double] W = (#summit_xl_trackwidth_), [double] lab = ([double] ([double] (0.446)+(0.408))/(2.0)), [double] q1 = ([double] ([double] ([double] (#v_ref_x_)+(#v_ref_y_))+([double] (#lab)*(#w_ref_)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] q2 = ([double] ([double] ([double] (#v_ref_x_)-(#v_ref_y_))-([double] (#lab)*(#w_ref_)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] q3 = ([double] ([double] ([double] (#v_ref_x_)+(#v_ref_y_))-([double] (#lab)*(#w_ref_)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] q4 = ([double] ([double] ([double] (#v_ref_x_)-(#v_ref_y_))+([double] (#lab)*(#w_ref_)))/([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] limit = (40.0), [std_msgs::Float64] frw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] saturation(#q1, [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation(#q2, [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation(#q3, [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation(#q4, [double] -(#limit), #limit)), [void] ref_vel_frw_.publish(#frw_ref_vel_msg), [void] ref_vel_flw_.publish(#flw_ref_vel_msg), [void] ref_vel_blw_.publish(#blw_ref_vel_msg), [void] ref_vel_brw_.publish(#brw_ref_vel_msg)])
PublishTuple(variable='ref_pos_scissor_', nesting=1, function='UpdateControl', line=504, scope=[[double] scissor_ref_pos = (0.0), [double] (#scissor_ref_pos)+=([double] (#v_ref_z_)/(#desired_freq_)), [std_msgs::Float64] scissor_ref_pos_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] saturation(#scissor_ref_pos, 0.0, 0.5)), [void] ref_pos_scissor_.publish(#scissor_ref_pos_msg)])
PublishTuple(variable='ref_pos_pan_', nesting=0, function='UpdateControl', line=510, scope=[void] UpdateControl())
PublishTuple(variable='ref_pos_tilt_', nesting=0, function='UpdateControl', line=512, scope=[void] UpdateControl())
PublishTuple(variable='odom_pub_', nesting=1, function='PublishOdometry', line=632, scope=[[void] odom_pub_.publish(#odom)])
AdvertiseTuple(topic='/guardian_node/odom', queue_size=30, message_type='nav_msgs::Odometry', nesting=0, variable='odom_pub', function='main', line=438, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='/guardian_node/state', queue_size=30, message_type='guardian_node::guardian_state', nesting=0, variable='state_pub', function='main', line=439, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='odom_pub', nesting=1, function='main', line=545, scope=[[ros::Time] operator=(#current_time, [ros::Time] now()), [_pose] operator=(#robot_pose, [pose] guardian_hw_interface.GetPose()), [double] (#dt)=([double] operator-.toSec()), [geometry_msgs::Quaternion] odom_quat = ([geometry_msgs::Quaternion] createQuaternionMsgFromYaw(#pa)), if [([bool] #publish_tf_, [[geometry_msgs::TransformStamped] odom_trans = ([geometry_msgs::TransformStamped] TransformStamped_()), [ros::Time] operator=(#stamp, #current_time), [std::basic_string<char>] operator=(#frame_id, odom), [std::basic_string<char>] operator=(#child_frame_id, base_footprint), [_x_type] (#x)=(#px), [_y_type] (#y)=(#py), [_z_type] (#z)=(0.0), [geometry_msgs::Quaternion_<std::allocator<void> >] operator=(#rotation, #odom_quat), [void] odom_broadcaster.sendTransform(#odom_trans)])], [nav_msgs::Odometry] odom = ([nav_msgs::Odometry] Odometry_()), [ros::Time] operator=(#stamp, #current_time), [std::basic_string<char>] operator=(#frame_id, odom), [std::basic_string<char>] operator=(#child_frame_id, base_footprint), [_x_type] (#x)=(#px), [_y_type] (#y)=(#py), [_z_type] (#z)=(0.0), [geometry_msgs::Quaternion_<std::allocator<void> >] operator=(#orientation, #odom_quat), [boost::array<double, 36>] operator=(#covariance, [boost::array<double, 36>] operator().operator array()), [_x_type] (#x)=(#vx), [_y_type] (#y)=(#vy), [_z_type] (#z)=(#va), [boost::array<double, 36>] operator=(#covariance, [boost::array<double, 36>] operator().operator array()), [void] odom_pub.publish(#odom), [void] CheckRobotState(), [void] state_pub.publish(#robot_state), [ros::Time] operator=(#last_time, #current_time), [void] updater_controller.update(), [void] spinOnce(), [bool] r.sleep()])
PublishTuple(variable='state_pub', nesting=1, function='main', line=547, scope=[[ros::Time] operator=(#current_time, [ros::Time] now()), [_pose] operator=(#robot_pose, [pose] guardian_hw_interface.GetPose()), [double] (#dt)=([double] operator-.toSec()), [geometry_msgs::Quaternion] odom_quat = ([geometry_msgs::Quaternion] createQuaternionMsgFromYaw(#pa)), if [([bool] #publish_tf_, [[geometry_msgs::TransformStamped] odom_trans = ([geometry_msgs::TransformStamped] TransformStamped_()), [ros::Time] operator=(#stamp, #current_time), [std::basic_string<char>] operator=(#frame_id, odom), [std::basic_string<char>] operator=(#child_frame_id, base_footprint), [_x_type] (#x)=(#px), [_y_type] (#y)=(#py), [_z_type] (#z)=(0.0), [geometry_msgs::Quaternion_<std::allocator<void> >] operator=(#rotation, #odom_quat), [void] odom_broadcaster.sendTransform(#odom_trans)])], [nav_msgs::Odometry] odom = ([nav_msgs::Odometry] Odometry_()), [ros::Time] operator=(#stamp, #current_time), [std::basic_string<char>] operator=(#frame_id, odom), [std::basic_string<char>] operator=(#child_frame_id, base_footprint), [_x_type] (#x)=(#px), [_y_type] (#y)=(#py), [_z_type] (#z)=(0.0), [geometry_msgs::Quaternion_<std::allocator<void> >] operator=(#orientation, #odom_quat), [boost::array<double, 36>] operator=(#covariance, [boost::array<double, 36>] operator().operator array()), [_x_type] (#x)=(#vx), [_y_type] (#y)=(#vy), [_z_type] (#z)=(#va), [boost::array<double, 36>] operator=(#covariance, [boost::array<double, 36>] operator().operator array()), [void] odom_pub.publish(#odom), [void] CheckRobotState(), [void] state_pub.publish(#robot_state), [ros::Time] operator=(#last_time, #current_time), [void] updater_controller.update(), [void] spinOnce(), [bool] r.sleep()])
AdvertiseTuple(topic='odom', queue_size=30, message_type='nav_msgs::Odometry', nesting=0, variable='odom_pub', function='main', line=434, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='state', queue_size=30, message_type='guardian_node::guardian_state', nesting=0, variable='state_pub', function='main', line=435, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='/joint_states', queue_size=10, message_type='sensor_msgs::JointState', nesting=0, variable='joint_state_pub_', function='main', line=439, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='odom_pub', nesting=1, function='main', line=529, scope=[[ros::Time] operator=(#current_time, [ros::Time] now()), [_pose] operator=(#robot_pose, [pose] guardian_hw_interface.GetPose()), [double] (#dt)=([double] operator-.toSec()), [geometry_msgs::Quaternion] odom_quat = ([geometry_msgs::Quaternion] createQuaternionMsgFromYaw(#pa)), if [([bool] #publish_tf_, [[geometry_msgs::TransformStamped] odom_trans = ([geometry_msgs::TransformStamped] TransformStamped_()), [ros::Time] operator=(#stamp, #current_time), [std::basic_string<char>] operator=(#frame_id, #odom_frame_id_), [std::basic_string<char>] operator=(#child_frame_id, #base_frame_id_), [_x_type] (#x)=(#px), [_y_type] (#y)=(#py), [_z_type] (#z)=(0.0), [geometry_msgs::Quaternion_<std::allocator<void> >] operator=(#rotation, #odom_quat), [void] odom_broadcaster.sendTransform(#odom_trans)])], [nav_msgs::Odometry] odom = ([nav_msgs::Odometry] Odometry_()), [ros::Time] operator=(#stamp, #current_time), [std::basic_string<char>] operator=(#frame_id, #odom_frame_id_), [std::basic_string<char>] operator=(#child_frame_id, #base_frame_id_), [_x_type] (#x)=(#px), [_y_type] (#y)=(#py), [_z_type] (#z)=(0.0), [geometry_msgs::Quaternion_<std::allocator<void> >] operator=(#orientation, #odom_quat), [boost::array<double, 36>] operator=(#covariance, [boost::array<double, 36>] operator().operator array()), [_x_type] (#x)=(#vx), [_y_type] (#y)=(#vy), [_z_type] (#z)=(#va), [boost::array<double, 36>] operator=(#covariance, [boost::array<double, 36>] operator().operator array()), [void] odom_pub.publish(#odom), [void] CheckRobotState(), [void] state_pub.publish(#robot_state), [ros::Time] operator=(#last_time, #current_time), [ros::Time] operator=(#stamp, [ros::Time] now()), [void] guardian_hw_interface.GetRPM([float *] &(#left_rpm), [float *] &(#right_rpm)), [double] (#inc_left_wheel)=([double] ([double] ([double] (#left_rpm)*(3.1416))/(3600))/(#desired_freq_)), [double] (#inc_right_wheel)=([double] ([double] ([double] (#right_rpm)*(3.1416))/(3600))/(#desired_freq_)), [double] ([double] operator[](#position, 0))=([double] ([double] operator[](#position, 0))+(#inc_left_wheel)), [double] ([double] operator[](#position, 1))=([double] ([double] operator[](#position, 1))+(#inc_left_wheel)), [double] ([double] operator[](#position, 2))=([double] ([double] operator[](#position, 2))+(#inc_right_wheel)), [double] ([double] operator[](#position, 3))=([double] ([double] operator[](#position, 3))+(#inc_right_wheel)), [void] joint_state_pub_.publish(#robot_joints_), [void] updater_controller.update(), [void] spinOnce(), [bool] r.sleep()])
PublishTuple(variable='state_pub', nesting=1, function='main', line=531, scope=[[ros::Time] operator=(#current_time, [ros::Time] now()), [_pose] operator=(#robot_pose, [pose] guardian_hw_interface.GetPose()), [double] (#dt)=([double] operator-.toSec()), [geometry_msgs::Quaternion] odom_quat = ([geometry_msgs::Quaternion] createQuaternionMsgFromYaw(#pa)), if [([bool] #publish_tf_, [[geometry_msgs::TransformStamped] odom_trans = ([geometry_msgs::TransformStamped] TransformStamped_()), [ros::Time] operator=(#stamp, #current_time), [std::basic_string<char>] operator=(#frame_id, #odom_frame_id_), [std::basic_string<char>] operator=(#child_frame_id, #base_frame_id_), [_x_type] (#x)=(#px), [_y_type] (#y)=(#py), [_z_type] (#z)=(0.0), [geometry_msgs::Quaternion_<std::allocator<void> >] operator=(#rotation, #odom_quat), [void] odom_broadcaster.sendTransform(#odom_trans)])], [nav_msgs::Odometry] odom = ([nav_msgs::Odometry] Odometry_()), [ros::Time] operator=(#stamp, #current_time), [std::basic_string<char>] operator=(#frame_id, #odom_frame_id_), [std::basic_string<char>] operator=(#child_frame_id, #base_frame_id_), [_x_type] (#x)=(#px), [_y_type] (#y)=(#py), [_z_type] (#z)=(0.0), [geometry_msgs::Quaternion_<std::allocator<void> >] operator=(#orientation, #odom_quat), [boost::array<double, 36>] operator=(#covariance, [boost::array<double, 36>] operator().operator array()), [_x_type] (#x)=(#vx), [_y_type] (#y)=(#vy), [_z_type] (#z)=(#va), [boost::array<double, 36>] operator=(#covariance, [boost::array<double, 36>] operator().operator array()), [void] odom_pub.publish(#odom), [void] CheckRobotState(), [void] state_pub.publish(#robot_state), [ros::Time] operator=(#last_time, #current_time), [ros::Time] operator=(#stamp, [ros::Time] now()), [void] guardian_hw_interface.GetRPM([float *] &(#left_rpm), [float *] &(#right_rpm)), [double] (#inc_left_wheel)=([double] ([double] ([double] (#left_rpm)*(3.1416))/(3600))/(#desired_freq_)), [double] (#inc_right_wheel)=([double] ([double] ([double] (#right_rpm)*(3.1416))/(3600))/(#desired_freq_)), [double] ([double] operator[](#position, 0))=([double] ([double] operator[](#position, 0))+(#inc_left_wheel)), [double] ([double] operator[](#position, 1))=([double] ([double] operator[](#position, 1))+(#inc_left_wheel)), [double] ([double] operator[](#position, 2))=([double] ([double] operator[](#position, 2))+(#inc_right_wheel)), [double] ([double] operator[](#position, 3))=([double] ([double] operator[](#position, 3))+(#inc_right_wheel)), [void] joint_state_pub_.publish(#robot_joints_), [void] updater_controller.update(), [void] spinOnce(), [bool] r.sleep()])
PublishTuple(variable='joint_state_pub_', nesting=1, function='main', line=549, scope=[[ros::Time] operator=(#current_time, [ros::Time] now()), [_pose] operator=(#robot_pose, [pose] guardian_hw_interface.GetPose()), [double] (#dt)=([double] operator-.toSec()), [geometry_msgs::Quaternion] odom_quat = ([geometry_msgs::Quaternion] createQuaternionMsgFromYaw(#pa)), if [([bool] #publish_tf_, [[geometry_msgs::TransformStamped] odom_trans = ([geometry_msgs::TransformStamped] TransformStamped_()), [ros::Time] operator=(#stamp, #current_time), [std::basic_string<char>] operator=(#frame_id, #odom_frame_id_), [std::basic_string<char>] operator=(#child_frame_id, #base_frame_id_), [_x_type] (#x)=(#px), [_y_type] (#y)=(#py), [_z_type] (#z)=(0.0), [geometry_msgs::Quaternion_<std::allocator<void> >] operator=(#rotation, #odom_quat), [void] odom_broadcaster.sendTransform(#odom_trans)])], [nav_msgs::Odometry] odom = ([nav_msgs::Odometry] Odometry_()), [ros::Time] operator=(#stamp, #current_time), [std::basic_string<char>] operator=(#frame_id, #odom_frame_id_), [std::basic_string<char>] operator=(#child_frame_id, #base_frame_id_), [_x_type] (#x)=(#px), [_y_type] (#y)=(#py), [_z_type] (#z)=(0.0), [geometry_msgs::Quaternion_<std::allocator<void> >] operator=(#orientation, #odom_quat), [boost::array<double, 36>] operator=(#covariance, [boost::array<double, 36>] operator().operator array()), [_x_type] (#x)=(#vx), [_y_type] (#y)=(#vy), [_z_type] (#z)=(#va), [boost::array<double, 36>] operator=(#covariance, [boost::array<double, 36>] operator().operator array()), [void] odom_pub.publish(#odom), [void] CheckRobotState(), [void] state_pub.publish(#robot_state), [ros::Time] operator=(#last_time, #current_time), [ros::Time] operator=(#stamp, [ros::Time] now()), [void] guardian_hw_interface.GetRPM([float *] &(#left_rpm), [float *] &(#right_rpm)), [double] (#inc_left_wheel)=([double] ([double] ([double] (#left_rpm)*(3.1416))/(3600))/(#desired_freq_)), [double] (#inc_right_wheel)=([double] ([double] ([double] (#right_rpm)*(3.1416))/(3600))/(#desired_freq_)), [double] ([double] operator[](#position, 0))=([double] ([double] operator[](#position, 0))+(#inc_left_wheel)), [double] ([double] operator[](#position, 1))=([double] ([double] operator[](#position, 1))+(#inc_left_wheel)), [double] ([double] operator[](#position, 2))=([double] ([double] operator[](#position, 2))+(#inc_right_wheel)), [double] ([double] operator[](#position, 3))=([double] ([double] operator[](#position, 3))+(#inc_right_wheel)), [void] joint_state_pub_.publish(#robot_joints_), [void] updater_controller.update(), [void] spinOnce(), [bool] r.sleep()])
AdvertiseTuple(topic=[std::string] #frw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_frw_', function='GuardianControllerClass', line=300, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #flw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_flw_', function='GuardianControllerClass', line=301, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #blw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_blw_', function='GuardianControllerClass', line=302, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #brw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_brw_', function='GuardianControllerClass', line=303, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #pan_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_pos_pan_', function='GuardianControllerClass', line=305, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #tilt_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_pos_tilt_', function='GuardianControllerClass', line=306, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic='/guardian/odom', queue_size=1000, message_type='nav_msgs::Odometry', nesting=0, variable='odom_pub_', function='GuardianControllerClass', line=317, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='ref_vel_frw_', nesting=1, function='UpdateControl', line=428, scope=[[double] v_left_mps = (None), [double] (#v_left_mps)=([double] ([double] ([double] ([double] operator[](#velocity, #blw_vel_))+([double] operator[](#velocity, #flw_vel_)))/(2.0))*([double] (#guardian_wheel_diameter_)/(2.0))), [double] (#v_right_mps)=([double] ([double] -([double] ([double] ([double] operator[](#velocity, #brw_vel_))+([double] operator[](#velocity, #frw_vel_)))/(2.0)))*([double] (#guardian_wheel_diameter_)/(2.0))), [double] (#linearSpeedXMps_)=([double] ([double] (#v_right_mps)+(#v_left_mps))/(2.0)), [double] (#angularSpeedRads_)=([double] ([double] (#v_right_mps)-(#v_left_mps))/(#guardian_d_tracks_m_)), [double] epv = (0.0), [double] epw = (0.0), [double] epvant = (0.0), [double] epwant = (0.0), [double] kpv = (2.5), [double] kdv = (0.0), [double] kpw = (25.0), [double] kdw = (15.0), [double] (#epv)=([double] (#v_ref_x_)-(#linearSpeedXMps_)), [double] (#epw)=([double] (#w_ref_)-(#angularSpeedRads_)), [double] uv = ([double] ([double] (#kpv)*(#epv))+([double] (#kdv)*([double] (#epv)-(#epvant)))), [double] uw = ([double] ([double] (#kpw)*(#epw))+([double] (#kdw)*([double] (#epw)-(#epwant)))), [double] (#epvant)=(#epv), [double] (#epwant)=(#epw), [double] dUl = ([double] (#uv)-([double] ([double] (0.5)*(#guardian_d_tracks_m_))*(#uw))), [double] dUr = ([double] -([double] (#uv)+([double] ([double] (0.5)*(#guardian_d_tracks_m_))*(#uw)))), [double] limit = (100.0), [std_msgs::Float64] frw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_msg = ([std_msgs::Float64] Float64_()), [double] k1 = (0.5), [_data_type] (#data)=([double] saturation([double] ([double] -(#k1))*(#dUr), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(#k1))*(#dUr), [double] -(#limit), #limit)), [void] ref_vel_frw_.publish(#frw_ref_msg), [void] ref_vel_flw_.publish(#flw_ref_msg), [void] ref_vel_blw_.publish(#blw_ref_msg), [void] ref_vel_brw_.publish(#brw_ref_msg)])
PublishTuple(variable='ref_vel_flw_', nesting=1, function='UpdateControl', line=429, scope=[[double] v_left_mps = (None), [double] (#v_left_mps)=([double] ([double] ([double] ([double] operator[](#velocity, #blw_vel_))+([double] operator[](#velocity, #flw_vel_)))/(2.0))*([double] (#guardian_wheel_diameter_)/(2.0))), [double] (#v_right_mps)=([double] ([double] -([double] ([double] ([double] operator[](#velocity, #brw_vel_))+([double] operator[](#velocity, #frw_vel_)))/(2.0)))*([double] (#guardian_wheel_diameter_)/(2.0))), [double] (#linearSpeedXMps_)=([double] ([double] (#v_right_mps)+(#v_left_mps))/(2.0)), [double] (#angularSpeedRads_)=([double] ([double] (#v_right_mps)-(#v_left_mps))/(#guardian_d_tracks_m_)), [double] epv = (0.0), [double] epw = (0.0), [double] epvant = (0.0), [double] epwant = (0.0), [double] kpv = (2.5), [double] kdv = (0.0), [double] kpw = (25.0), [double] kdw = (15.0), [double] (#epv)=([double] (#v_ref_x_)-(#linearSpeedXMps_)), [double] (#epw)=([double] (#w_ref_)-(#angularSpeedRads_)), [double] uv = ([double] ([double] (#kpv)*(#epv))+([double] (#kdv)*([double] (#epv)-(#epvant)))), [double] uw = ([double] ([double] (#kpw)*(#epw))+([double] (#kdw)*([double] (#epw)-(#epwant)))), [double] (#epvant)=(#epv), [double] (#epwant)=(#epw), [double] dUl = ([double] (#uv)-([double] ([double] (0.5)*(#guardian_d_tracks_m_))*(#uw))), [double] dUr = ([double] -([double] (#uv)+([double] ([double] (0.5)*(#guardian_d_tracks_m_))*(#uw)))), [double] limit = (100.0), [std_msgs::Float64] frw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_msg = ([std_msgs::Float64] Float64_()), [double] k1 = (0.5), [_data_type] (#data)=([double] saturation([double] ([double] -(#k1))*(#dUr), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(#k1))*(#dUr), [double] -(#limit), #limit)), [void] ref_vel_frw_.publish(#frw_ref_msg), [void] ref_vel_flw_.publish(#flw_ref_msg), [void] ref_vel_blw_.publish(#blw_ref_msg), [void] ref_vel_brw_.publish(#brw_ref_msg)])
PublishTuple(variable='ref_vel_blw_', nesting=1, function='UpdateControl', line=430, scope=[[double] v_left_mps = (None), [double] (#v_left_mps)=([double] ([double] ([double] ([double] operator[](#velocity, #blw_vel_))+([double] operator[](#velocity, #flw_vel_)))/(2.0))*([double] (#guardian_wheel_diameter_)/(2.0))), [double] (#v_right_mps)=([double] ([double] -([double] ([double] ([double] operator[](#velocity, #brw_vel_))+([double] operator[](#velocity, #frw_vel_)))/(2.0)))*([double] (#guardian_wheel_diameter_)/(2.0))), [double] (#linearSpeedXMps_)=([double] ([double] (#v_right_mps)+(#v_left_mps))/(2.0)), [double] (#angularSpeedRads_)=([double] ([double] (#v_right_mps)-(#v_left_mps))/(#guardian_d_tracks_m_)), [double] epv = (0.0), [double] epw = (0.0), [double] epvant = (0.0), [double] epwant = (0.0), [double] kpv = (2.5), [double] kdv = (0.0), [double] kpw = (25.0), [double] kdw = (15.0), [double] (#epv)=([double] (#v_ref_x_)-(#linearSpeedXMps_)), [double] (#epw)=([double] (#w_ref_)-(#angularSpeedRads_)), [double] uv = ([double] ([double] (#kpv)*(#epv))+([double] (#kdv)*([double] (#epv)-(#epvant)))), [double] uw = ([double] ([double] (#kpw)*(#epw))+([double] (#kdw)*([double] (#epw)-(#epwant)))), [double] (#epvant)=(#epv), [double] (#epwant)=(#epw), [double] dUl = ([double] (#uv)-([double] ([double] (0.5)*(#guardian_d_tracks_m_))*(#uw))), [double] dUr = ([double] -([double] (#uv)+([double] ([double] (0.5)*(#guardian_d_tracks_m_))*(#uw)))), [double] limit = (100.0), [std_msgs::Float64] frw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_msg = ([std_msgs::Float64] Float64_()), [double] k1 = (0.5), [_data_type] (#data)=([double] saturation([double] ([double] -(#k1))*(#dUr), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(#k1))*(#dUr), [double] -(#limit), #limit)), [void] ref_vel_frw_.publish(#frw_ref_msg), [void] ref_vel_flw_.publish(#flw_ref_msg), [void] ref_vel_blw_.publish(#blw_ref_msg), [void] ref_vel_brw_.publish(#brw_ref_msg)])
PublishTuple(variable='ref_vel_brw_', nesting=1, function='UpdateControl', line=431, scope=[[double] v_left_mps = (None), [double] (#v_left_mps)=([double] ([double] ([double] ([double] operator[](#velocity, #blw_vel_))+([double] operator[](#velocity, #flw_vel_)))/(2.0))*([double] (#guardian_wheel_diameter_)/(2.0))), [double] (#v_right_mps)=([double] ([double] -([double] ([double] ([double] operator[](#velocity, #brw_vel_))+([double] operator[](#velocity, #frw_vel_)))/(2.0)))*([double] (#guardian_wheel_diameter_)/(2.0))), [double] (#linearSpeedXMps_)=([double] ([double] (#v_right_mps)+(#v_left_mps))/(2.0)), [double] (#angularSpeedRads_)=([double] ([double] (#v_right_mps)-(#v_left_mps))/(#guardian_d_tracks_m_)), [double] epv = (0.0), [double] epw = (0.0), [double] epvant = (0.0), [double] epwant = (0.0), [double] kpv = (2.5), [double] kdv = (0.0), [double] kpw = (25.0), [double] kdw = (15.0), [double] (#epv)=([double] (#v_ref_x_)-(#linearSpeedXMps_)), [double] (#epw)=([double] (#w_ref_)-(#angularSpeedRads_)), [double] uv = ([double] ([double] (#kpv)*(#epv))+([double] (#kdv)*([double] (#epv)-(#epvant)))), [double] uw = ([double] ([double] (#kpw)*(#epw))+([double] (#kdw)*([double] (#epw)-(#epwant)))), [double] (#epvant)=(#epv), [double] (#epwant)=(#epw), [double] dUl = ([double] (#uv)-([double] ([double] (0.5)*(#guardian_d_tracks_m_))*(#uw))), [double] dUr = ([double] -([double] (#uv)+([double] ([double] (0.5)*(#guardian_d_tracks_m_))*(#uw)))), [double] limit = (100.0), [std_msgs::Float64] frw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_msg = ([std_msgs::Float64] Float64_()), [double] k1 = (0.5), [_data_type] (#data)=([double] saturation([double] ([double] -(#k1))*(#dUr), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(#k1))*(#dUr), [double] -(#limit), #limit)), [void] ref_vel_frw_.publish(#frw_ref_msg), [void] ref_vel_flw_.publish(#flw_ref_msg), [void] ref_vel_blw_.publish(#blw_ref_msg), [void] ref_vel_brw_.publish(#brw_ref_msg)])
PublishTuple(variable='ref_pos_pan_', nesting=0, function='UpdateControl', line=437, scope=[void] UpdateControl())
PublishTuple(variable='ref_pos_tilt_', nesting=0, function='UpdateControl', line=439, scope=[void] UpdateControl())
PublishTuple(variable='odom_pub_', nesting=0, function='PublishOdometry', line=519, scope=[void] PublishOdometry())
AdvertiseTuple(topic=[std::string] #fwd_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_fwd_', function='AGVSControllerClass', line=271, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #bwd_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_bwd_', function='AGVSControllerClass', line=272, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #fwd_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_pos_fwd_', function='AGVSControllerClass', line=273, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #bwd_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_pos_bwd_', function='AGVSControllerClass', line=274, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #elevator_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_pos_elevator_', function='AGVSControllerClass', line=275, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic='odom', queue_size=1000, message_type='nav_msgs::Odometry', nesting=0, variable='odom_pub_', function='AGVSControllerClass', line=282, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='odom_pub_', nesting=0, function='PublishOdometry', line=444, scope=[void] PublishOdometry())
PublishTuple(variable='ref_vel_fwd_', nesting=0, function='UpdateControl', line=475, scope=[void] UpdateControl())
PublishTuple(variable='ref_vel_bwd_', nesting=0, function='UpdateControl', line=476, scope=[void] UpdateControl())
PublishTuple(variable='ref_pos_fwd_', nesting=0, function='UpdateControl', line=478, scope=[void] UpdateControl())
PublishTuple(variable='ref_pos_bwd_', nesting=0, function='UpdateControl', line=480, scope=[void] UpdateControl())
PublishTuple(variable='ref_pos_elevator_', nesting=0, function='SetElevatorPosition', line=490, scope=[void] SetElevatorPosition(val))
AdvertiseTuple(topic='obstacle_distance/distance_markers', queue_size=1, message_type='visualization_msgs::MarkerArray', nesting=0, variable='marker_pub_', function='init', line=52, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=True, param_topic=False, param_queue=False)
PublishTuple(variable='marker_pub_', nesting=0, function='obstacleDistancesCallback', line=142, scope=[void] obstacleDistancesCallback(msg))
AdvertiseTuple(topic='scan_out', queue_size=1, message_type='sensor_msgs::LaserScan', nesting=0, variable='topicPub_laser_scan', function='NodeClass', line=86, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='topicPub_laser_scan', nesting=1, function='scanCallback', line=93, scope=[[void] topicPub_laser_scan.publish([const sensor_msgs::LaserScan_<std::allocator<void> >] operator*(#msg)), return])
PublishTuple(variable='topicPub_laser_scan', nesting=0, function='scanCallback', line=139, scope=[void] scanCallback(msg))
AdvertiseTuple(topic='scan', queue_size=1, message_type='sensor_msgs::LaserScan', nesting=0, variable='topicPub_LaserScan', function='NodeClass', line=214, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='scan_standby', queue_size=1, message_type='std_msgs::Bool', nesting=0, variable='topicPub_InStandby', function='NodeClass', line=215, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='/diagnostics', queue_size=1, message_type='diagnostic_msgs::DiagnosticArray', nesting=0, variable='topicPub_Diagnostic_', function='NodeClass', line=216, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='topicPub_InStandby', nesting=0, function='publishStandby', line=253, scope=[void] publishStandby(inStandby))
PublishTuple(variable='topicPub_LaserScan', nesting=0, function='publishLaserScan', line=329, scope=[void] publishLaserScan(vdDistM, vdAngRAD, vdIntensAU, iSickTimeStamp, iSickNow))
PublishTuple(variable='topicPub_Diagnostic_', nesting=0, function='publishLaserScan', line=338, scope=[void] publishLaserScan(vdDistM, vdAngRAD, vdIntensAU, iSickTimeStamp, iSickNow))
PublishTuple(variable='topicPub_Diagnostic_', nesting=0, function='publishError', line=348, scope=[void] publishError(error_str))
PublishTuple(variable='topicPub_Diagnostic_', nesting=0, function='publishWarn', line=358, scope=[void] publishWarn(warn_str))
AdvertiseTuple(topic='diagnostics', queue_size=2, message_type='diagnostic_msgs::DiagnosticArray', nesting=0, variable='sr_diagnostics_pub', function='SRDiagnosticer', line=74, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='sr_diagnostics_pub', nesting=0, function='publish', line=164, scope=[void] publish())
AdvertiseTuple(topic='diagnostics', queue_size=2, message_type='diagnostic_msgs::DiagnosticArray', nesting=0, variable='sr_diagnostics_pub', function='SRDiagnosticer', line=74, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='sr_diagnostics_pub', nesting=0, function='publish', line=164, scope=[void] publish())
AdvertiseTuple(topic='diagnostics', queue_size=2, message_type='diagnostic_msgs::DiagnosticArray', nesting=0, variable='sr_diagnostics_pub', function='SRDiagnosticer', line=74, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='sr_diagnostics_pub', nesting=0, function='publish', line=164, scope=[void] publish())
AdvertiseTuple(topic='srh/sendupdate', queue_size=2, message_type='sr_robot_msgs::sendupdate', nesting=1, variable='sr_hand_target_pub', function='HandCommander', line=84, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+(#controller, /command), queue_size=2, message_type='std_msgs::Float64', nesting=3, variable='operator[]', function='initializeEthercatHand', line=115, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='sr_hand_target_pub', nesting=1, function='sendCommands', line=149, scope=[[sr_robot_msgs::sendupdate] sendupdate_msg = ([sr_robot_msgs::sendupdate] sendupdate_()), [_sendupdate_length_type] (#sendupdate_length)=([size_type] joint_vector.size()), [std::vector<sr_robot_msgs::joint_<std::allocator<void> >, std::allocator<sr_robot_msgs::joint_<std::allocator<void> > > >] operator=(#sendupdate_list, #joint_vector), [void] sr_hand_target_pub.publish(#sendupdate_msg)])
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='sensor_msgs::JointState', nesting=0, variable='sr_jointstate_pos_pub', function='SRPublisher', line=66, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='sensor_msgs::JointState', nesting=0, variable='sr_jointstate_target_pub', function='SRPublisher', line=68, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='sr_robot_msgs::joints_data', nesting=0, variable='sr_pub', function='SRPublisher', line=72, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='sr_pub', nesting=0, function='publish', line=148, scope=[void] publish())
PublishTuple(variable='sr_jointstate_pos_pub', nesting=0, function='publish', line=150, scope=[void] publish())
PublishTuple(variable='sr_jointstate_target_pub', nesting=0, function='publish', line=152, scope=[void] publish())
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='sensor_msgs::JointState', nesting=0, variable='sr_jointstate_pos_pub', function='SRPublisher', line=66, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='sensor_msgs::JointState', nesting=0, variable='sr_jointstate_target_pub', function='SRPublisher', line=68, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='sr_robot_msgs::joints_data', nesting=0, variable='sr_pub', function='SRPublisher', line=72, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='sr_pub', nesting=0, function='publish', line=148, scope=[void] publish())
PublishTuple(variable='sr_jointstate_pos_pub', nesting=0, function='publish', line=150, scope=[void] publish())
PublishTuple(variable='sr_jointstate_target_pub', nesting=0, function='publish', line=152, scope=[void] publish())
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='sensor_msgs::JointState', nesting=0, variable='sr_jointstate_pos_pub', function='SRPublisher', line=66, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='sensor_msgs::JointState', nesting=0, variable='sr_jointstate_target_pub', function='SRPublisher', line=68, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='sr_robot_msgs::joints_data', nesting=0, variable='sr_pub', function='SRPublisher', line=72, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='sr_pub', nesting=0, function='publish', line=148, scope=[void] publish())
PublishTuple(variable='sr_jointstate_pos_pub', nesting=0, function='publish', line=150, scope=[void] publish())
PublishTuple(variable='sr_jointstate_target_pub', nesting=0, function='publish', line=152, scope=[void] publish())
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='std_msgs::Float64', nesting=0, variable=None, function='initializeMap', line=70, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='std_msgs::Float64', nesting=0, variable=None, function='initializeMap', line=78, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='std_msgs::Float64', nesting=0, variable=None, function='initializeMap', line=86, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='std_msgs::Float64', nesting=0, variable=None, function='initializeMap', line=92, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='std_msgs::Float64', nesting=0, variable=None, function='initializeMap', line=103, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='std_msgs::Float64', nesting=0, variable=None, function='initializeMap', line=111, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='std_msgs::Float64', nesting=0, variable=None, function='initializeMap', line=117, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='std_msgs::Float64', nesting=0, variable=None, function='initializeMap', line=127, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='std_msgs::Float64', nesting=0, variable=None, function='initializeMap', line=135, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='std_msgs::Float64', nesting=0, variable=None, function='initializeMap', line=141, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='std_msgs::Float64', nesting=0, variable=None, function='initializeMap', line=152, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='std_msgs::Float64', nesting=0, variable=None, function='initializeMap', line=160, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='std_msgs::Float64', nesting=0, variable=None, function='initializeMap', line=168, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='std_msgs::Float64', nesting=0, variable=None, function='initializeMap', line=176, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='std_msgs::Float64', nesting=0, variable=None, function='initializeMap', line=184, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='std_msgs::Float64', nesting=0, variable=None, function='initializeMap', line=192, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='std_msgs::Float64', nesting=0, variable=None, function='initializeMap', line=200, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='std_msgs::Float64', nesting=0, variable=None, function='initializeMap', line=208, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='std_msgs::Float64', nesting=0, variable=None, function='initializeMap', line=216, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='std_msgs::Float64', nesting=0, variable=None, function='initializeMap', line=224, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='operator[]', nesting=0, function='sendupdate', line=287, scope=[int16_t] sendupdate(joint_name, target))
AdvertiseTuple(topic='odometry', queue_size=1, message_type='nav_msgs::Odometry', nesting=0, variable='topic_pub_odometry_', function='init', line=46, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='topic_pub_odometry_', nesting=0, function='publish', line=124, scope=[void] publish())
AdvertiseTuple(topic='cmd_drive', queue_size=1, message_type='grizzly_msgs::Drive', nesting=0, variable='pub_', function='MotionGenerator', line=42, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #frw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_frw_', function='SummitXLControllerClass', line=356, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #flw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_flw_', function='SummitXLControllerClass', line=357, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #blw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_blw_', function='SummitXLControllerClass', line=358, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #brw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_brw_', function='SummitXLControllerClass', line=359, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #frw_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=1, variable='ref_pos_frw_', function='SummitXLControllerClass', line=362, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #flw_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=1, variable='ref_pos_flw_', function='SummitXLControllerClass', line=363, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #blw_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=1, variable='ref_pos_blw_', function='SummitXLControllerClass', line=364, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #brw_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=1, variable='ref_pos_brw_', function='SummitXLControllerClass', line=365, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #scissor_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=2, variable='ref_pos_scissor_', function='SummitXLControllerClass', line=368, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #pan_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_pos_pan_', function='SummitXLControllerClass', line=371, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #tilt_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_pos_tilt_', function='SummitXLControllerClass', line=372, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #odom_topic_, queue_size=1000, message_type='nav_msgs::Odometry', nesting=0, variable='odom_pub_', function='SummitXLControllerClass', line=382, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
PublishTuple(variable='ref_vel_frw_', nesting=1, function='UpdateControl', line=501, scope=[[double] v_left_mps = (None), [double] (#v_left_mps)=([double] ([double] ([double] ([double] operator[](#velocity, #blw_vel_))+([double] operator[](#velocity, #flw_vel_)))/(2.0))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_right_mps)=([double] ([double] -([double] ([double] ([double] operator[](#velocity, #brw_vel_))+([double] operator[](#velocity, #frw_vel_)))/(2.0)))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#linearSpeedXMps_)=([double] ([double] (#v_right_mps)+(#v_left_mps))/(2.0)), [double] (#angularSpeedRads_)=([double] ([double] (#v_right_mps)-(#v_left_mps))/(#summit_xl_d_tracks_m_)), [double] epv = (0.0), [double] epw = (0.0), [double] epvant = (0.0), [double] epwant = (0.0), [double] kpv = (2.5), [double] kdv = (0.0), [double] kpw = (25.0), [double] kdw = (15.0), [double] (#epv)=([double] (#v_ref_x_)-(#linearSpeedXMps_)), [double] (#epw)=([double] (#w_ref_)-(#angularSpeedRads_)), [double] uv = ([double] ([double] (#kpv)*(#epv))+([double] (#kdv)*([double] (#epv)-(#epvant)))), [double] uw = ([double] ([double] (#kpw)*(#epw))+([double] (#kdw)*([double] (#epw)-(#epwant)))), [double] (#epvant)=(#epv), [double] (#epwant)=(#epw), [double] dUl = ([double] (#uv)-([double] ([double] (0.5)*(#summit_xl_d_tracks_m_))*(#uw))), [double] dUr = ([double] -([double] (#uv)+([double] ([double] (0.5)*(#summit_xl_d_tracks_m_))*(#uw)))), [double] limit = (40.0), [std_msgs::Float64] frw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_msg = ([std_msgs::Float64] Float64_()), [double] k1 = (0.5), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUr), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUr), [double] -(#limit), #limit)), [void] ref_vel_frw_.publish(#frw_ref_msg), [void] ref_vel_flw_.publish(#flw_ref_msg), [void] ref_vel_blw_.publish(#blw_ref_msg), [void] ref_vel_brw_.publish(#brw_ref_msg)])
PublishTuple(variable='ref_vel_flw_', nesting=1, function='UpdateControl', line=502, scope=[[double] v_left_mps = (None), [double] (#v_left_mps)=([double] ([double] ([double] ([double] operator[](#velocity, #blw_vel_))+([double] operator[](#velocity, #flw_vel_)))/(2.0))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_right_mps)=([double] ([double] -([double] ([double] ([double] operator[](#velocity, #brw_vel_))+([double] operator[](#velocity, #frw_vel_)))/(2.0)))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#linearSpeedXMps_)=([double] ([double] (#v_right_mps)+(#v_left_mps))/(2.0)), [double] (#angularSpeedRads_)=([double] ([double] (#v_right_mps)-(#v_left_mps))/(#summit_xl_d_tracks_m_)), [double] epv = (0.0), [double] epw = (0.0), [double] epvant = (0.0), [double] epwant = (0.0), [double] kpv = (2.5), [double] kdv = (0.0), [double] kpw = (25.0), [double] kdw = (15.0), [double] (#epv)=([double] (#v_ref_x_)-(#linearSpeedXMps_)), [double] (#epw)=([double] (#w_ref_)-(#angularSpeedRads_)), [double] uv = ([double] ([double] (#kpv)*(#epv))+([double] (#kdv)*([double] (#epv)-(#epvant)))), [double] uw = ([double] ([double] (#kpw)*(#epw))+([double] (#kdw)*([double] (#epw)-(#epwant)))), [double] (#epvant)=(#epv), [double] (#epwant)=(#epw), [double] dUl = ([double] (#uv)-([double] ([double] (0.5)*(#summit_xl_d_tracks_m_))*(#uw))), [double] dUr = ([double] -([double] (#uv)+([double] ([double] (0.5)*(#summit_xl_d_tracks_m_))*(#uw)))), [double] limit = (40.0), [std_msgs::Float64] frw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_msg = ([std_msgs::Float64] Float64_()), [double] k1 = (0.5), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUr), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUr), [double] -(#limit), #limit)), [void] ref_vel_frw_.publish(#frw_ref_msg), [void] ref_vel_flw_.publish(#flw_ref_msg), [void] ref_vel_blw_.publish(#blw_ref_msg), [void] ref_vel_brw_.publish(#brw_ref_msg)])
PublishTuple(variable='ref_vel_blw_', nesting=1, function='UpdateControl', line=503, scope=[[double] v_left_mps = (None), [double] (#v_left_mps)=([double] ([double] ([double] ([double] operator[](#velocity, #blw_vel_))+([double] operator[](#velocity, #flw_vel_)))/(2.0))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_right_mps)=([double] ([double] -([double] ([double] ([double] operator[](#velocity, #brw_vel_))+([double] operator[](#velocity, #frw_vel_)))/(2.0)))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#linearSpeedXMps_)=([double] ([double] (#v_right_mps)+(#v_left_mps))/(2.0)), [double] (#angularSpeedRads_)=([double] ([double] (#v_right_mps)-(#v_left_mps))/(#summit_xl_d_tracks_m_)), [double] epv = (0.0), [double] epw = (0.0), [double] epvant = (0.0), [double] epwant = (0.0), [double] kpv = (2.5), [double] kdv = (0.0), [double] kpw = (25.0), [double] kdw = (15.0), [double] (#epv)=([double] (#v_ref_x_)-(#linearSpeedXMps_)), [double] (#epw)=([double] (#w_ref_)-(#angularSpeedRads_)), [double] uv = ([double] ([double] (#kpv)*(#epv))+([double] (#kdv)*([double] (#epv)-(#epvant)))), [double] uw = ([double] ([double] (#kpw)*(#epw))+([double] (#kdw)*([double] (#epw)-(#epwant)))), [double] (#epvant)=(#epv), [double] (#epwant)=(#epw), [double] dUl = ([double] (#uv)-([double] ([double] (0.5)*(#summit_xl_d_tracks_m_))*(#uw))), [double] dUr = ([double] -([double] (#uv)+([double] ([double] (0.5)*(#summit_xl_d_tracks_m_))*(#uw)))), [double] limit = (40.0), [std_msgs::Float64] frw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_msg = ([std_msgs::Float64] Float64_()), [double] k1 = (0.5), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUr), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUr), [double] -(#limit), #limit)), [void] ref_vel_frw_.publish(#frw_ref_msg), [void] ref_vel_flw_.publish(#flw_ref_msg), [void] ref_vel_blw_.publish(#blw_ref_msg), [void] ref_vel_brw_.publish(#brw_ref_msg)])
PublishTuple(variable='ref_vel_brw_', nesting=1, function='UpdateControl', line=504, scope=[[double] v_left_mps = (None), [double] (#v_left_mps)=([double] ([double] ([double] ([double] operator[](#velocity, #blw_vel_))+([double] operator[](#velocity, #flw_vel_)))/(2.0))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_right_mps)=([double] ([double] -([double] ([double] ([double] operator[](#velocity, #brw_vel_))+([double] operator[](#velocity, #frw_vel_)))/(2.0)))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#linearSpeedXMps_)=([double] ([double] (#v_right_mps)+(#v_left_mps))/(2.0)), [double] (#angularSpeedRads_)=([double] ([double] (#v_right_mps)-(#v_left_mps))/(#summit_xl_d_tracks_m_)), [double] epv = (0.0), [double] epw = (0.0), [double] epvant = (0.0), [double] epwant = (0.0), [double] kpv = (2.5), [double] kdv = (0.0), [double] kpw = (25.0), [double] kdw = (15.0), [double] (#epv)=([double] (#v_ref_x_)-(#linearSpeedXMps_)), [double] (#epw)=([double] (#w_ref_)-(#angularSpeedRads_)), [double] uv = ([double] ([double] (#kpv)*(#epv))+([double] (#kdv)*([double] (#epv)-(#epvant)))), [double] uw = ([double] ([double] (#kpw)*(#epw))+([double] (#kdw)*([double] (#epw)-(#epwant)))), [double] (#epvant)=(#epv), [double] (#epwant)=(#epw), [double] dUl = ([double] (#uv)-([double] ([double] (0.5)*(#summit_xl_d_tracks_m_))*(#uw))), [double] dUr = ([double] -([double] (#uv)+([double] ([double] (0.5)*(#summit_xl_d_tracks_m_))*(#uw)))), [double] limit = (40.0), [std_msgs::Float64] frw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_msg = ([std_msgs::Float64] Float64_()), [double] k1 = (0.5), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUr), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUr), [double] -(#limit), #limit)), [void] ref_vel_frw_.publish(#frw_ref_msg), [void] ref_vel_flw_.publish(#flw_ref_msg), [void] ref_vel_blw_.publish(#blw_ref_msg), [void] ref_vel_brw_.publish(#brw_ref_msg)])
PublishTuple(variable='ref_vel_frw_', nesting=1, function='UpdateControl', line=561, scope=[[double] v_frw_mps = (None), [double] (#v_frw_mps)=([double] ([double] operator[](#velocity, #frw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_flw_mps)=([double] ([double] operator[](#velocity, #flw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_blw_mps)=([double] ([double] operator[](#velocity, #blw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_brw_mps)=([double] ([double] operator[](#velocity, #brw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] vx = (#v_ref_x_), [double] vy = (#v_ref_y_), [double] w = (#w_ref_), [double] L = (#summit_xl_wheelbase_), [double] W = (#summit_xl_trackwidth_), [double] x1 = ([double] (#L)/(2.0)), [double] y1 = ([double] ([double] -(#W))/(2.0)), [double] wx1 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y1))), [double] wy1 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x1))), [double] q1 = ([double] -([double] sqrt([double] ([double] (#wx1)*(#wx1))+([double] (#wy1)*(#wy1))))), [double] a1 = ([double] radnorm([double] atan2(#wy1, #wx1))), [double] x2 = ([double] (#L)/(2.0)), [double] y2 = ([double] (#W)/(2.0)), [double] wx2 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y2))), [double] wy2 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x2))), [double] q2 = ([double] sqrt([double] ([double] (#wx2)*(#wx2))+([double] (#wy2)*(#wy2)))), [double] a2 = ([double] radnorm([double] atan2(#wy2, #wx2))), [double] x3 = ([double] ([double] -(#L))/(2.0)), [double] y3 = ([double] (#W)/(2.0)), [double] wx3 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y3))), [double] wy3 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x3))), [double] q3 = ([double] sqrt([double] ([double] (#wx3)*(#wx3))+([double] (#wy3)*(#wy3)))), [double] a3 = ([double] radnorm([double] atan2(#wy3, #wx3))), [double] x4 = ([double] ([double] -(#L))/(2.0)), [double] y4 = ([double] ([double] -(#W))/(2.0)), [double] wx4 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y4))), [double] wy4 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x4))), [double] q4 = ([double] -([double] sqrt([double] ([double] (#wx4)*(#wx4))+([double] (#wy4)*(#wy4))))), [double] a4 = ([double] radnorm([double] atan2(#wy4, #wx4))), [double] limit = (40.0), [std_msgs::Float64] frw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #frw_vel_))-(#q1)), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #flw_vel_))-(#q2)), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #blw_vel_))-(#q3)), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #brw_vel_))-(#q4)), [double] -(#limit), #limit)), [void] ref_vel_frw_.publish(#frw_ref_vel_msg), [void] ref_vel_flw_.publish(#flw_ref_vel_msg), [void] ref_vel_blw_.publish(#blw_ref_vel_msg), [void] ref_vel_brw_.publish(#brw_ref_vel_msg), [std_msgs::Float64] frw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=(#a1), [_data_type] (#data)=(#a2), [_data_type] (#data)=(#a3), [_data_type] (#data)=(#a4), [void] ref_pos_frw_.publish(#frw_ref_pos_msg), [void] ref_pos_flw_.publish(#flw_ref_pos_msg), [void] ref_pos_blw_.publish(#blw_ref_pos_msg), [void] ref_pos_brw_.publish(#brw_ref_pos_msg)])
PublishTuple(variable='ref_vel_flw_', nesting=1, function='UpdateControl', line=562, scope=[[double] v_frw_mps = (None), [double] (#v_frw_mps)=([double] ([double] operator[](#velocity, #frw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_flw_mps)=([double] ([double] operator[](#velocity, #flw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_blw_mps)=([double] ([double] operator[](#velocity, #blw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_brw_mps)=([double] ([double] operator[](#velocity, #brw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] vx = (#v_ref_x_), [double] vy = (#v_ref_y_), [double] w = (#w_ref_), [double] L = (#summit_xl_wheelbase_), [double] W = (#summit_xl_trackwidth_), [double] x1 = ([double] (#L)/(2.0)), [double] y1 = ([double] ([double] -(#W))/(2.0)), [double] wx1 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y1))), [double] wy1 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x1))), [double] q1 = ([double] -([double] sqrt([double] ([double] (#wx1)*(#wx1))+([double] (#wy1)*(#wy1))))), [double] a1 = ([double] radnorm([double] atan2(#wy1, #wx1))), [double] x2 = ([double] (#L)/(2.0)), [double] y2 = ([double] (#W)/(2.0)), [double] wx2 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y2))), [double] wy2 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x2))), [double] q2 = ([double] sqrt([double] ([double] (#wx2)*(#wx2))+([double] (#wy2)*(#wy2)))), [double] a2 = ([double] radnorm([double] atan2(#wy2, #wx2))), [double] x3 = ([double] ([double] -(#L))/(2.0)), [double] y3 = ([double] (#W)/(2.0)), [double] wx3 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y3))), [double] wy3 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x3))), [double] q3 = ([double] sqrt([double] ([double] (#wx3)*(#wx3))+([double] (#wy3)*(#wy3)))), [double] a3 = ([double] radnorm([double] atan2(#wy3, #wx3))), [double] x4 = ([double] ([double] -(#L))/(2.0)), [double] y4 = ([double] ([double] -(#W))/(2.0)), [double] wx4 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y4))), [double] wy4 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x4))), [double] q4 = ([double] -([double] sqrt([double] ([double] (#wx4)*(#wx4))+([double] (#wy4)*(#wy4))))), [double] a4 = ([double] radnorm([double] atan2(#wy4, #wx4))), [double] limit = (40.0), [std_msgs::Float64] frw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #frw_vel_))-(#q1)), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #flw_vel_))-(#q2)), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #blw_vel_))-(#q3)), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #brw_vel_))-(#q4)), [double] -(#limit), #limit)), [void] ref_vel_frw_.publish(#frw_ref_vel_msg), [void] ref_vel_flw_.publish(#flw_ref_vel_msg), [void] ref_vel_blw_.publish(#blw_ref_vel_msg), [void] ref_vel_brw_.publish(#brw_ref_vel_msg), [std_msgs::Float64] frw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=(#a1), [_data_type] (#data)=(#a2), [_data_type] (#data)=(#a3), [_data_type] (#data)=(#a4), [void] ref_pos_frw_.publish(#frw_ref_pos_msg), [void] ref_pos_flw_.publish(#flw_ref_pos_msg), [void] ref_pos_blw_.publish(#blw_ref_pos_msg), [void] ref_pos_brw_.publish(#brw_ref_pos_msg)])
PublishTuple(variable='ref_vel_blw_', nesting=1, function='UpdateControl', line=563, scope=[[double] v_frw_mps = (None), [double] (#v_frw_mps)=([double] ([double] operator[](#velocity, #frw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_flw_mps)=([double] ([double] operator[](#velocity, #flw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_blw_mps)=([double] ([double] operator[](#velocity, #blw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_brw_mps)=([double] ([double] operator[](#velocity, #brw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] vx = (#v_ref_x_), [double] vy = (#v_ref_y_), [double] w = (#w_ref_), [double] L = (#summit_xl_wheelbase_), [double] W = (#summit_xl_trackwidth_), [double] x1 = ([double] (#L)/(2.0)), [double] y1 = ([double] ([double] -(#W))/(2.0)), [double] wx1 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y1))), [double] wy1 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x1))), [double] q1 = ([double] -([double] sqrt([double] ([double] (#wx1)*(#wx1))+([double] (#wy1)*(#wy1))))), [double] a1 = ([double] radnorm([double] atan2(#wy1, #wx1))), [double] x2 = ([double] (#L)/(2.0)), [double] y2 = ([double] (#W)/(2.0)), [double] wx2 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y2))), [double] wy2 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x2))), [double] q2 = ([double] sqrt([double] ([double] (#wx2)*(#wx2))+([double] (#wy2)*(#wy2)))), [double] a2 = ([double] radnorm([double] atan2(#wy2, #wx2))), [double] x3 = ([double] ([double] -(#L))/(2.0)), [double] y3 = ([double] (#W)/(2.0)), [double] wx3 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y3))), [double] wy3 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x3))), [double] q3 = ([double] sqrt([double] ([double] (#wx3)*(#wx3))+([double] (#wy3)*(#wy3)))), [double] a3 = ([double] radnorm([double] atan2(#wy3, #wx3))), [double] x4 = ([double] ([double] -(#L))/(2.0)), [double] y4 = ([double] ([double] -(#W))/(2.0)), [double] wx4 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y4))), [double] wy4 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x4))), [double] q4 = ([double] -([double] sqrt([double] ([double] (#wx4)*(#wx4))+([double] (#wy4)*(#wy4))))), [double] a4 = ([double] radnorm([double] atan2(#wy4, #wx4))), [double] limit = (40.0), [std_msgs::Float64] frw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #frw_vel_))-(#q1)), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #flw_vel_))-(#q2)), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #blw_vel_))-(#q3)), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #brw_vel_))-(#q4)), [double] -(#limit), #limit)), [void] ref_vel_frw_.publish(#frw_ref_vel_msg), [void] ref_vel_flw_.publish(#flw_ref_vel_msg), [void] ref_vel_blw_.publish(#blw_ref_vel_msg), [void] ref_vel_brw_.publish(#brw_ref_vel_msg), [std_msgs::Float64] frw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=(#a1), [_data_type] (#data)=(#a2), [_data_type] (#data)=(#a3), [_data_type] (#data)=(#a4), [void] ref_pos_frw_.publish(#frw_ref_pos_msg), [void] ref_pos_flw_.publish(#flw_ref_pos_msg), [void] ref_pos_blw_.publish(#blw_ref_pos_msg), [void] ref_pos_brw_.publish(#brw_ref_pos_msg)])
PublishTuple(variable='ref_vel_brw_', nesting=1, function='UpdateControl', line=564, scope=[[double] v_frw_mps = (None), [double] (#v_frw_mps)=([double] ([double] operator[](#velocity, #frw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_flw_mps)=([double] ([double] operator[](#velocity, #flw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_blw_mps)=([double] ([double] operator[](#velocity, #blw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_brw_mps)=([double] ([double] operator[](#velocity, #brw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] vx = (#v_ref_x_), [double] vy = (#v_ref_y_), [double] w = (#w_ref_), [double] L = (#summit_xl_wheelbase_), [double] W = (#summit_xl_trackwidth_), [double] x1 = ([double] (#L)/(2.0)), [double] y1 = ([double] ([double] -(#W))/(2.0)), [double] wx1 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y1))), [double] wy1 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x1))), [double] q1 = ([double] -([double] sqrt([double] ([double] (#wx1)*(#wx1))+([double] (#wy1)*(#wy1))))), [double] a1 = ([double] radnorm([double] atan2(#wy1, #wx1))), [double] x2 = ([double] (#L)/(2.0)), [double] y2 = ([double] (#W)/(2.0)), [double] wx2 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y2))), [double] wy2 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x2))), [double] q2 = ([double] sqrt([double] ([double] (#wx2)*(#wx2))+([double] (#wy2)*(#wy2)))), [double] a2 = ([double] radnorm([double] atan2(#wy2, #wx2))), [double] x3 = ([double] ([double] -(#L))/(2.0)), [double] y3 = ([double] (#W)/(2.0)), [double] wx3 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y3))), [double] wy3 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x3))), [double] q3 = ([double] sqrt([double] ([double] (#wx3)*(#wx3))+([double] (#wy3)*(#wy3)))), [double] a3 = ([double] radnorm([double] atan2(#wy3, #wx3))), [double] x4 = ([double] ([double] -(#L))/(2.0)), [double] y4 = ([double] ([double] -(#W))/(2.0)), [double] wx4 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y4))), [double] wy4 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x4))), [double] q4 = ([double] -([double] sqrt([double] ([double] (#wx4)*(#wx4))+([double] (#wy4)*(#wy4))))), [double] a4 = ([double] radnorm([double] atan2(#wy4, #wx4))), [double] limit = (40.0), [std_msgs::Float64] frw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #frw_vel_))-(#q1)), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #flw_vel_))-(#q2)), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #blw_vel_))-(#q3)), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #brw_vel_))-(#q4)), [double] -(#limit), #limit)), [void] ref_vel_frw_.publish(#frw_ref_vel_msg), [void] ref_vel_flw_.publish(#flw_ref_vel_msg), [void] ref_vel_blw_.publish(#blw_ref_vel_msg), [void] ref_vel_brw_.publish(#brw_ref_vel_msg), [std_msgs::Float64] frw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=(#a1), [_data_type] (#data)=(#a2), [_data_type] (#data)=(#a3), [_data_type] (#data)=(#a4), [void] ref_pos_frw_.publish(#frw_ref_pos_msg), [void] ref_pos_flw_.publish(#flw_ref_pos_msg), [void] ref_pos_blw_.publish(#blw_ref_pos_msg), [void] ref_pos_brw_.publish(#brw_ref_pos_msg)])
PublishTuple(variable='ref_pos_frw_', nesting=1, function='UpdateControl', line=574, scope=[[double] v_frw_mps = (None), [double] (#v_frw_mps)=([double] ([double] operator[](#velocity, #frw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_flw_mps)=([double] ([double] operator[](#velocity, #flw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_blw_mps)=([double] ([double] operator[](#velocity, #blw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_brw_mps)=([double] ([double] operator[](#velocity, #brw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] vx = (#v_ref_x_), [double] vy = (#v_ref_y_), [double] w = (#w_ref_), [double] L = (#summit_xl_wheelbase_), [double] W = (#summit_xl_trackwidth_), [double] x1 = ([double] (#L)/(2.0)), [double] y1 = ([double] ([double] -(#W))/(2.0)), [double] wx1 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y1))), [double] wy1 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x1))), [double] q1 = ([double] -([double] sqrt([double] ([double] (#wx1)*(#wx1))+([double] (#wy1)*(#wy1))))), [double] a1 = ([double] radnorm([double] atan2(#wy1, #wx1))), [double] x2 = ([double] (#L)/(2.0)), [double] y2 = ([double] (#W)/(2.0)), [double] wx2 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y2))), [double] wy2 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x2))), [double] q2 = ([double] sqrt([double] ([double] (#wx2)*(#wx2))+([double] (#wy2)*(#wy2)))), [double] a2 = ([double] radnorm([double] atan2(#wy2, #wx2))), [double] x3 = ([double] ([double] -(#L))/(2.0)), [double] y3 = ([double] (#W)/(2.0)), [double] wx3 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y3))), [double] wy3 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x3))), [double] q3 = ([double] sqrt([double] ([double] (#wx3)*(#wx3))+([double] (#wy3)*(#wy3)))), [double] a3 = ([double] radnorm([double] atan2(#wy3, #wx3))), [double] x4 = ([double] ([double] -(#L))/(2.0)), [double] y4 = ([double] ([double] -(#W))/(2.0)), [double] wx4 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y4))), [double] wy4 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x4))), [double] q4 = ([double] -([double] sqrt([double] ([double] (#wx4)*(#wx4))+([double] (#wy4)*(#wy4))))), [double] a4 = ([double] radnorm([double] atan2(#wy4, #wx4))), [double] limit = (40.0), [std_msgs::Float64] frw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #frw_vel_))-(#q1)), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #flw_vel_))-(#q2)), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #blw_vel_))-(#q3)), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #brw_vel_))-(#q4)), [double] -(#limit), #limit)), [void] ref_vel_frw_.publish(#frw_ref_vel_msg), [void] ref_vel_flw_.publish(#flw_ref_vel_msg), [void] ref_vel_blw_.publish(#blw_ref_vel_msg), [void] ref_vel_brw_.publish(#brw_ref_vel_msg), [std_msgs::Float64] frw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=(#a1), [_data_type] (#data)=(#a2), [_data_type] (#data)=(#a3), [_data_type] (#data)=(#a4), [void] ref_pos_frw_.publish(#frw_ref_pos_msg), [void] ref_pos_flw_.publish(#flw_ref_pos_msg), [void] ref_pos_blw_.publish(#blw_ref_pos_msg), [void] ref_pos_brw_.publish(#brw_ref_pos_msg)])
PublishTuple(variable='ref_pos_flw_', nesting=1, function='UpdateControl', line=575, scope=[[double] v_frw_mps = (None), [double] (#v_frw_mps)=([double] ([double] operator[](#velocity, #frw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_flw_mps)=([double] ([double] operator[](#velocity, #flw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_blw_mps)=([double] ([double] operator[](#velocity, #blw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_brw_mps)=([double] ([double] operator[](#velocity, #brw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] vx = (#v_ref_x_), [double] vy = (#v_ref_y_), [double] w = (#w_ref_), [double] L = (#summit_xl_wheelbase_), [double] W = (#summit_xl_trackwidth_), [double] x1 = ([double] (#L)/(2.0)), [double] y1 = ([double] ([double] -(#W))/(2.0)), [double] wx1 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y1))), [double] wy1 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x1))), [double] q1 = ([double] -([double] sqrt([double] ([double] (#wx1)*(#wx1))+([double] (#wy1)*(#wy1))))), [double] a1 = ([double] radnorm([double] atan2(#wy1, #wx1))), [double] x2 = ([double] (#L)/(2.0)), [double] y2 = ([double] (#W)/(2.0)), [double] wx2 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y2))), [double] wy2 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x2))), [double] q2 = ([double] sqrt([double] ([double] (#wx2)*(#wx2))+([double] (#wy2)*(#wy2)))), [double] a2 = ([double] radnorm([double] atan2(#wy2, #wx2))), [double] x3 = ([double] ([double] -(#L))/(2.0)), [double] y3 = ([double] (#W)/(2.0)), [double] wx3 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y3))), [double] wy3 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x3))), [double] q3 = ([double] sqrt([double] ([double] (#wx3)*(#wx3))+([double] (#wy3)*(#wy3)))), [double] a3 = ([double] radnorm([double] atan2(#wy3, #wx3))), [double] x4 = ([double] ([double] -(#L))/(2.0)), [double] y4 = ([double] ([double] -(#W))/(2.0)), [double] wx4 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y4))), [double] wy4 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x4))), [double] q4 = ([double] -([double] sqrt([double] ([double] (#wx4)*(#wx4))+([double] (#wy4)*(#wy4))))), [double] a4 = ([double] radnorm([double] atan2(#wy4, #wx4))), [double] limit = (40.0), [std_msgs::Float64] frw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #frw_vel_))-(#q1)), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #flw_vel_))-(#q2)), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #blw_vel_))-(#q3)), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #brw_vel_))-(#q4)), [double] -(#limit), #limit)), [void] ref_vel_frw_.publish(#frw_ref_vel_msg), [void] ref_vel_flw_.publish(#flw_ref_vel_msg), [void] ref_vel_blw_.publish(#blw_ref_vel_msg), [void] ref_vel_brw_.publish(#brw_ref_vel_msg), [std_msgs::Float64] frw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=(#a1), [_data_type] (#data)=(#a2), [_data_type] (#data)=(#a3), [_data_type] (#data)=(#a4), [void] ref_pos_frw_.publish(#frw_ref_pos_msg), [void] ref_pos_flw_.publish(#flw_ref_pos_msg), [void] ref_pos_blw_.publish(#blw_ref_pos_msg), [void] ref_pos_brw_.publish(#brw_ref_pos_msg)])
PublishTuple(variable='ref_pos_blw_', nesting=1, function='UpdateControl', line=576, scope=[[double] v_frw_mps = (None), [double] (#v_frw_mps)=([double] ([double] operator[](#velocity, #frw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_flw_mps)=([double] ([double] operator[](#velocity, #flw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_blw_mps)=([double] ([double] operator[](#velocity, #blw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_brw_mps)=([double] ([double] operator[](#velocity, #brw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] vx = (#v_ref_x_), [double] vy = (#v_ref_y_), [double] w = (#w_ref_), [double] L = (#summit_xl_wheelbase_), [double] W = (#summit_xl_trackwidth_), [double] x1 = ([double] (#L)/(2.0)), [double] y1 = ([double] ([double] -(#W))/(2.0)), [double] wx1 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y1))), [double] wy1 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x1))), [double] q1 = ([double] -([double] sqrt([double] ([double] (#wx1)*(#wx1))+([double] (#wy1)*(#wy1))))), [double] a1 = ([double] radnorm([double] atan2(#wy1, #wx1))), [double] x2 = ([double] (#L)/(2.0)), [double] y2 = ([double] (#W)/(2.0)), [double] wx2 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y2))), [double] wy2 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x2))), [double] q2 = ([double] sqrt([double] ([double] (#wx2)*(#wx2))+([double] (#wy2)*(#wy2)))), [double] a2 = ([double] radnorm([double] atan2(#wy2, #wx2))), [double] x3 = ([double] ([double] -(#L))/(2.0)), [double] y3 = ([double] (#W)/(2.0)), [double] wx3 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y3))), [double] wy3 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x3))), [double] q3 = ([double] sqrt([double] ([double] (#wx3)*(#wx3))+([double] (#wy3)*(#wy3)))), [double] a3 = ([double] radnorm([double] atan2(#wy3, #wx3))), [double] x4 = ([double] ([double] -(#L))/(2.0)), [double] y4 = ([double] ([double] -(#W))/(2.0)), [double] wx4 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y4))), [double] wy4 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x4))), [double] q4 = ([double] -([double] sqrt([double] ([double] (#wx4)*(#wx4))+([double] (#wy4)*(#wy4))))), [double] a4 = ([double] radnorm([double] atan2(#wy4, #wx4))), [double] limit = (40.0), [std_msgs::Float64] frw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #frw_vel_))-(#q1)), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #flw_vel_))-(#q2)), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #blw_vel_))-(#q3)), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #brw_vel_))-(#q4)), [double] -(#limit), #limit)), [void] ref_vel_frw_.publish(#frw_ref_vel_msg), [void] ref_vel_flw_.publish(#flw_ref_vel_msg), [void] ref_vel_blw_.publish(#blw_ref_vel_msg), [void] ref_vel_brw_.publish(#brw_ref_vel_msg), [std_msgs::Float64] frw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=(#a1), [_data_type] (#data)=(#a2), [_data_type] (#data)=(#a3), [_data_type] (#data)=(#a4), [void] ref_pos_frw_.publish(#frw_ref_pos_msg), [void] ref_pos_flw_.publish(#flw_ref_pos_msg), [void] ref_pos_blw_.publish(#blw_ref_pos_msg), [void] ref_pos_brw_.publish(#brw_ref_pos_msg)])
PublishTuple(variable='ref_pos_brw_', nesting=1, function='UpdateControl', line=577, scope=[[double] v_frw_mps = (None), [double] (#v_frw_mps)=([double] ([double] operator[](#velocity, #frw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_flw_mps)=([double] ([double] operator[](#velocity, #flw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_blw_mps)=([double] ([double] operator[](#velocity, #blw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] (#v_brw_mps)=([double] ([double] operator[](#velocity, #brw_vel_))*([double] (#summit_xl_wheel_diameter_)/(2.0))), [double] vx = (#v_ref_x_), [double] vy = (#v_ref_y_), [double] w = (#w_ref_), [double] L = (#summit_xl_wheelbase_), [double] W = (#summit_xl_trackwidth_), [double] x1 = ([double] (#L)/(2.0)), [double] y1 = ([double] ([double] -(#W))/(2.0)), [double] wx1 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y1))), [double] wy1 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x1))), [double] q1 = ([double] -([double] sqrt([double] ([double] (#wx1)*(#wx1))+([double] (#wy1)*(#wy1))))), [double] a1 = ([double] radnorm([double] atan2(#wy1, #wx1))), [double] x2 = ([double] (#L)/(2.0)), [double] y2 = ([double] (#W)/(2.0)), [double] wx2 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y2))), [double] wy2 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x2))), [double] q2 = ([double] sqrt([double] ([double] (#wx2)*(#wx2))+([double] (#wy2)*(#wy2)))), [double] a2 = ([double] radnorm([double] atan2(#wy2, #wx2))), [double] x3 = ([double] ([double] -(#L))/(2.0)), [double] y3 = ([double] (#W)/(2.0)), [double] wx3 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y3))), [double] wy3 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x3))), [double] q3 = ([double] sqrt([double] ([double] (#wx3)*(#wx3))+([double] (#wy3)*(#wy3)))), [double] a3 = ([double] radnorm([double] atan2(#wy3, #wx3))), [double] x4 = ([double] ([double] -(#L))/(2.0)), [double] y4 = ([double] ([double] -(#W))/(2.0)), [double] wx4 = ([double] (#v_ref_x_)-([double] (#w_ref_)*(#y4))), [double] wy4 = ([double] (#v_ref_y_)+([double] (#w_ref_)*(#x4))), [double] q4 = ([double] -([double] sqrt([double] ([double] (#wx4)*(#wx4))+([double] (#wy4)*(#wy4))))), [double] a4 = ([double] radnorm([double] atan2(#wy4, #wx4))), [double] limit = (40.0), [std_msgs::Float64] frw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_vel_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #frw_vel_))-(#q1)), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #flw_vel_))-(#q2)), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #blw_vel_))-(#q3)), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] ([double] -(1.0))*([double] ([double] operator[](#velocity, #brw_vel_))-(#q4)), [double] -(#limit), #limit)), [void] ref_vel_frw_.publish(#frw_ref_vel_msg), [void] ref_vel_flw_.publish(#flw_ref_vel_msg), [void] ref_vel_blw_.publish(#blw_ref_vel_msg), [void] ref_vel_brw_.publish(#brw_ref_vel_msg), [std_msgs::Float64] frw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_pos_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=(#a1), [_data_type] (#data)=(#a2), [_data_type] (#data)=(#a3), [_data_type] (#data)=(#a4), [void] ref_pos_frw_.publish(#frw_ref_pos_msg), [void] ref_pos_flw_.publish(#flw_ref_pos_msg), [void] ref_pos_blw_.publish(#blw_ref_pos_msg), [void] ref_pos_brw_.publish(#brw_ref_pos_msg)])
PublishTuple(variable='ref_pos_scissor_', nesting=1, function='UpdateControl', line=589, scope=[[double] scissor_ref_pos = (0.0), [double] (#scissor_ref_pos)+=([double] (#v_ref_z_)/(#desired_freq_)), [std_msgs::Float64] scissor_ref_pos_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] saturation(#scissor_ref_pos, 0.0, 0.5)), [void] ref_pos_scissor_.publish(#scissor_ref_pos_msg)])
PublishTuple(variable='ref_pos_pan_', nesting=0, function='UpdateControl', line=595, scope=[void] UpdateControl())
PublishTuple(variable='ref_pos_tilt_', nesting=0, function='UpdateControl', line=597, scope=[void] UpdateControl())
PublishTuple(variable='odom_pub_', nesting=0, function='PublishOdometry', line=704, scope=[void] PublishOdometry())
AdvertiseTuple(topic=[std::string] #frw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_frw_', function='SummitXLControllerClass', line=348, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #flw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_flw_', function='SummitXLControllerClass', line=349, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #blw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_blw_', function='SummitXLControllerClass', line=350, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #brw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_brw_', function='SummitXLControllerClass', line=351, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #frw_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=1, variable='ref_pos_frw_', function='SummitXLControllerClass', line=354, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #flw_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=1, variable='ref_pos_flw_', function='SummitXLControllerClass', line=355, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #blw_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=1, variable='ref_pos_blw_', function='SummitXLControllerClass', line=356, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #brw_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=1, variable='ref_pos_brw_', function='SummitXLControllerClass', line=357, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #scissor_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=2, variable='ref_pos_scissor_', function='SummitXLControllerClass', line=360, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #pan_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_pos_pan_', function='SummitXLControllerClass', line=363, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #tilt_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_pos_tilt_', function='SummitXLControllerClass', line=364, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic='/summit_xl/odom', queue_size=1000, message_type='nav_msgs::Odometry', nesting=0, variable='odom_pub_', function='SummitXLControllerClass', line=375, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='ref_vel_frw_', nesting=1, function='UpdateControl', line=458, scope=[[double] dUl = ([double] (#v_ref_x_)-([double] ([double] (0.5)*(#summit_xl_d_tracks_m_))*(#w_ref_))), [double] dUr = ([double] (#v_ref_x_)+([double] ([double] (0.5)*(#summit_xl_d_tracks_m_))*(#w_ref_))), [double] limit = (40.0), [std_msgs::Float64] frw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_msg = ([std_msgs::Float64] Float64_()), [double] k1 = (5.0), [_data_type] (#data)=([double] -([double] saturation([double] (#k1)*(#dUr), [double] -(#limit), #limit))), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] -([double] saturation([double] (#k1)*(#dUr), [double] -(#limit), #limit))), [void] ref_vel_frw_.publish(#frw_ref_msg), [void] ref_vel_flw_.publish(#flw_ref_msg), [void] ref_vel_blw_.publish(#blw_ref_msg), [void] ref_vel_brw_.publish(#brw_ref_msg)])
PublishTuple(variable='ref_vel_flw_', nesting=1, function='UpdateControl', line=459, scope=[[double] dUl = ([double] (#v_ref_x_)-([double] ([double] (0.5)*(#summit_xl_d_tracks_m_))*(#w_ref_))), [double] dUr = ([double] (#v_ref_x_)+([double] ([double] (0.5)*(#summit_xl_d_tracks_m_))*(#w_ref_))), [double] limit = (40.0), [std_msgs::Float64] frw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_msg = ([std_msgs::Float64] Float64_()), [double] k1 = (5.0), [_data_type] (#data)=([double] -([double] saturation([double] (#k1)*(#dUr), [double] -(#limit), #limit))), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] -([double] saturation([double] (#k1)*(#dUr), [double] -(#limit), #limit))), [void] ref_vel_frw_.publish(#frw_ref_msg), [void] ref_vel_flw_.publish(#flw_ref_msg), [void] ref_vel_blw_.publish(#blw_ref_msg), [void] ref_vel_brw_.publish(#brw_ref_msg)])
PublishTuple(variable='ref_vel_blw_', nesting=1, function='UpdateControl', line=460, scope=[[double] dUl = ([double] (#v_ref_x_)-([double] ([double] (0.5)*(#summit_xl_d_tracks_m_))*(#w_ref_))), [double] dUr = ([double] (#v_ref_x_)+([double] ([double] (0.5)*(#summit_xl_d_tracks_m_))*(#w_ref_))), [double] limit = (40.0), [std_msgs::Float64] frw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_msg = ([std_msgs::Float64] Float64_()), [double] k1 = (5.0), [_data_type] (#data)=([double] -([double] saturation([double] (#k1)*(#dUr), [double] -(#limit), #limit))), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] -([double] saturation([double] (#k1)*(#dUr), [double] -(#limit), #limit))), [void] ref_vel_frw_.publish(#frw_ref_msg), [void] ref_vel_flw_.publish(#flw_ref_msg), [void] ref_vel_blw_.publish(#blw_ref_msg), [void] ref_vel_brw_.publish(#brw_ref_msg)])
PublishTuple(variable='ref_vel_brw_', nesting=1, function='UpdateControl', line=461, scope=[[double] dUl = ([double] (#v_ref_x_)-([double] ([double] (0.5)*(#summit_xl_d_tracks_m_))*(#w_ref_))), [double] dUr = ([double] (#v_ref_x_)+([double] ([double] (0.5)*(#summit_xl_d_tracks_m_))*(#w_ref_))), [double] limit = (40.0), [std_msgs::Float64] frw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] flw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] blw_ref_msg = ([std_msgs::Float64] Float64_()), [std_msgs::Float64] brw_ref_msg = ([std_msgs::Float64] Float64_()), [double] k1 = (5.0), [_data_type] (#data)=([double] -([double] saturation([double] (#k1)*(#dUr), [double] -(#limit), #limit))), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] saturation([double] (#k1)*(#dUl), [double] -(#limit), #limit)), [_data_type] (#data)=([double] -([double] saturation([double] (#k1)*(#dUr), [double] -(#limit), #limit))), [void] ref_vel_frw_.publish(#frw_ref_msg), [void] ref_vel_flw_.publish(#flw_ref_msg), [void] ref_vel_blw_.publish(#blw_ref_msg), [void] ref_vel_brw_.publish(#brw_ref_msg)])
PublishTuple(variable='odom_pub_', nesting=0, function='PublishOdometry', line=737, scope=[void] PublishOdometry())
AdvertiseTuple(topic='odom', queue_size=1, message_type='nav_msgs::Odometry', nesting=0, variable='pub_odom', function='main', line=53, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_states', queue_size=1, message_type='sensor_msgs::JointState', nesting=0, variable='pub_joints', function='main', line=54, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #frame_id_, queue_size=0, message_type='sensor_msgs::Range', nesting=0, variable='pub_range_', function='Sensor', line=24, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='pub_range_', nesting=0, function='publish', line=29, scope=[void] publish())
PublishTuple(variable='filtered_scan_pub', nesting=0, function='input_scan_sub_callback', line=102, scope=[void] input_scan_sub_callback(input_scan))
AdvertiseTuple(topic='/scan_filtered', queue_size=50, message_type='sensor_msgs::LaserScan', nesting=0, variable='filtered_scan_pub', function='main', line=112, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_command', queue_size=1, message_type='control_msgs::JointTrajectoryControllerState', nesting=0, variable='topic_pub_controller_joint_command_', function='NodeClass', line=213, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='odometry', queue_size=1, message_type='nav_msgs::Odometry', nesting=0, variable='topic_pub_odometry_', function='NodeClass', line=215, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='topic_pub_controller_joint_command_', nesting=2, function='topicCallbackDiagnostic', line=404, scope=[[void] topic_pub_controller_joint_command_.publish(#joint_state_cmd)])
AdvertiseTuple(topic=[const std::string] #topic, queue_size=1000, message_type='sr_ronex_msgs::PWM', nesting=0, variable='pub', function='flash_LED', line=107, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='pub', nesting=1, function='flash_LED', line=130, scope=[[uint16_t] (#pwm_on_time_0)-=(10), if [([bool] ([bool] (#pwm_on_time_0)==(0))||([bool] (#pwm_on_time_0)>(#pwm_period)), [[uint16_t] (#pwm_on_time_0)=(#pwm_period)])], [sr_ronex_msgs::PWM] msg = ([sr_ronex_msgs::PWM] PWM_()), [_pwm_period_type] (#pwm_period)=(#pwm_period), [_pwm_on_time_0_type] (#pwm_on_time_0)=(#pwm_on_time_0), [_pwm_on_time_1_type] (#pwm_on_time_1)=(#pwm_on_time_1), [void] pub.publish(#msg), [void] spinOnce(), [bool] loop_rate.sleep()])
AdvertiseTuple(topic='/diagnostics', queue_size=1, message_type='diagnostic_msgs::DiagnosticArray', nesting=0, variable='topicPub_Diagnostics_', function='SdhNode', line=168, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_states', queue_size=1, message_type='sensor_msgs::JointState', nesting=0, variable='topicPub_JointState_', function='init', line=194, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_trajectory_controller/state', queue_size=1, message_type='control_msgs::JointTrajectoryControllerState', nesting=0, variable='topicPub_ControllerState_', function='init', line=195, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='tactile_data', queue_size=1, message_type='schunk_sdh::TactileSensor', nesting=0, variable='topicPub_TactileSensor_', function='init', line=197, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='topicPub_JointState_', nesting=1, function='updateSdh', line=727, scope=[if [([bool] (#hasNewGoal_)==(True), [[[void] sdh_.Stop()], if [([bool] operator==(#operationMode_, position), [[[void] sdh_.SetAxisTargetAngle(#axes_, #targetAngles_), [double] sdh_.MoveHand(False)]]), (True, [if [([bool] operator==(#operationMode_, velocity), [[[void] sdh_.SetAxisTargetVelocity(#axes_, #velocities_)]]), (True, [if [([bool] operator==(#operationMode_, effort), []), (True, [])]])]])], [bool] (#hasNewGoal_)=(False)])], [std::vector<double>] actualAngles = ([std::vector<double>] vector()), [[std::vector<double, std::allocator<double> >] operator=(#actualAngles, [std::vector<double>] sdh_.GetAxisActualAngle(#axes_))], [std::vector<double>] actualVelocities = ([std::vector<double>] vector()), [[std::vector<double, std::allocator<double> >] operator=(#actualVelocities, [std::vector<double>] sdh_.GetAxisActualVelocity(#axes_))], [ros::Time] time = ([ros::Time] now()), [sensor_msgs::JointState] msg = ([sensor_msgs::JointState] JointState_()), [ros::Time] operator=(#stamp, #time), [void] name.resize(#DOF_, [value_type] (default)), [void] position.resize(#DOF_, [value_type] (default)), [void] velocity.resize(#DOF_, [value_type] (default)), [void] effort.resize(#DOF_, [value_type] (default)), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#name, #joint_names_), [double] ([double] operator[](#position, 0))=([double] ([double] ([double] operator[](#actualAngles, 0))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 1))=([double] ([double] ([double] operator[](#actualAngles, 3))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 2))=([double] ([double] ([double] operator[](#actualAngles, 4))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 3))=([double] ([double] ([double] operator[](#actualAngles, 5))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 4))=([double] ([double] ([double] operator[](#actualAngles, 6))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 5))=([double] ([double] ([double] operator[](#actualAngles, 1))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 6))=([double] ([double] ([double] operator[](#actualAngles, 2))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 0))=([double] ([double] ([double] operator[](#actualVelocities, 0))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 1))=([double] ([double] ([double] operator[](#actualVelocities, 3))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 2))=([double] ([double] ([double] operator[](#actualVelocities, 4))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 3))=([double] ([double] ([double] operator[](#actualVelocities, 5))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 4))=([double] ([double] ([double] operator[](#actualVelocities, 6))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 5))=([double] ([double] ([double] operator[](#actualVelocities, 1))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 6))=([double] ([double] ([double] operator[](#actualVelocities, 2))*(#pi_))/(180.0)), [void] topicPub_JointState_.publish(#msg), [sensor_msgs::JointState] mimicjointmsg = ([sensor_msgs::JointState] JointState_()), [ros::Time] operator=(#stamp, #time), [void] name.resize(1, [value_type] (default)), [void] position.resize(1, [value_type] (default)), [void] velocity.resize(1, [value_type] (default)), [std::basic_string<char>] operator=([std::basic_string<char>] operator[](#name, 0), sdh_finger_21_joint), [double] ([double] operator[](#position, 0))=([double] operator[](#position, 0)), [double] ([double] operator[](#velocity, 0))=([double] operator[](#velocity, 0)), [void] topicPub_JointState_.publish(#mimicjointmsg), [control_msgs::JointTrajectoryControllerState] controllermsg = ([control_msgs::JointTrajectoryControllerState] JointTrajectoryControllerState_()), [ros::Time] operator=(#stamp, #time), [void] joint_names.resize(#DOF_, [value_type] (default)), [void] positions.resize(#DOF_, [value_type] (default)), [void] velocities.resize(#DOF_, [value_type] (default)), [void] positions.resize(#DOF_, [value_type] (default)), [void] velocities.resize(#DOF_, [value_type] (default)), [void] positions.resize(#DOF_, [value_type] (default)), [void] velocities.resize(#DOF_, [value_type] (default)), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#joint_names, #joint_names_), if [([bool] ([size_type] targetAngles_.size())!=(0), [[double] ([double] operator[](#positions, 0))=([double] ([double] ([double] operator[](#targetAngles_, 0))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 1))=([double] ([double] ([double] operator[](#targetAngles_, 3))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 2))=([double] ([double] ([double] operator[](#targetAngles_, 4))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 3))=([double] ([double] ([double] operator[](#targetAngles_, 5))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 4))=([double] ([double] ([double] operator[](#targetAngles_, 6))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 5))=([double] ([double] ([double] operator[](#targetAngles_, 1))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 6))=([double] ([double] ([double] operator[](#targetAngles_, 2))*(#pi_))/(180.0))])], [std::vector<double, std::allocator<double> >] operator=(#positions, #position), [std::vector<double, std::allocator<double> >] operator=(#velocities, #velocity), for [([bool] (#i)<(#DOF_), [[double] ([double] operator[](#positions, #i))=([double] ([double] operator[](#positions, #i))-([double] operator[](#positions, #i))), [double] ([double] operator[](#velocities, #i))=([double] ([double] operator[](#velocities, #i))-([double] operator[](#velocities, #i))), [int] _++(#i)])], [void] topicPub_ControllerState_.publish(#controllermsg), [std::vector<SDH::cSDH::eAxisState, std::allocator<SDH::cSDH::eAxisState> >] operator=(#state_, [std::vector<eAxisState>] sdh_.GetAxisActualState(#axes_))])
PublishTuple(variable='topicPub_JointState_', nesting=1, function='updateSdh', line=738, scope=[if [([bool] (#hasNewGoal_)==(True), [[[void] sdh_.Stop()], if [([bool] operator==(#operationMode_, position), [[[void] sdh_.SetAxisTargetAngle(#axes_, #targetAngles_), [double] sdh_.MoveHand(False)]]), (True, [if [([bool] operator==(#operationMode_, velocity), [[[void] sdh_.SetAxisTargetVelocity(#axes_, #velocities_)]]), (True, [if [([bool] operator==(#operationMode_, effort), []), (True, [])]])]])], [bool] (#hasNewGoal_)=(False)])], [std::vector<double>] actualAngles = ([std::vector<double>] vector()), [[std::vector<double, std::allocator<double> >] operator=(#actualAngles, [std::vector<double>] sdh_.GetAxisActualAngle(#axes_))], [std::vector<double>] actualVelocities = ([std::vector<double>] vector()), [[std::vector<double, std::allocator<double> >] operator=(#actualVelocities, [std::vector<double>] sdh_.GetAxisActualVelocity(#axes_))], [ros::Time] time = ([ros::Time] now()), [sensor_msgs::JointState] msg = ([sensor_msgs::JointState] JointState_()), [ros::Time] operator=(#stamp, #time), [void] name.resize(#DOF_, [value_type] (default)), [void] position.resize(#DOF_, [value_type] (default)), [void] velocity.resize(#DOF_, [value_type] (default)), [void] effort.resize(#DOF_, [value_type] (default)), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#name, #joint_names_), [double] ([double] operator[](#position, 0))=([double] ([double] ([double] operator[](#actualAngles, 0))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 1))=([double] ([double] ([double] operator[](#actualAngles, 3))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 2))=([double] ([double] ([double] operator[](#actualAngles, 4))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 3))=([double] ([double] ([double] operator[](#actualAngles, 5))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 4))=([double] ([double] ([double] operator[](#actualAngles, 6))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 5))=([double] ([double] ([double] operator[](#actualAngles, 1))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 6))=([double] ([double] ([double] operator[](#actualAngles, 2))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 0))=([double] ([double] ([double] operator[](#actualVelocities, 0))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 1))=([double] ([double] ([double] operator[](#actualVelocities, 3))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 2))=([double] ([double] ([double] operator[](#actualVelocities, 4))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 3))=([double] ([double] ([double] operator[](#actualVelocities, 5))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 4))=([double] ([double] ([double] operator[](#actualVelocities, 6))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 5))=([double] ([double] ([double] operator[](#actualVelocities, 1))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 6))=([double] ([double] ([double] operator[](#actualVelocities, 2))*(#pi_))/(180.0)), [void] topicPub_JointState_.publish(#msg), [sensor_msgs::JointState] mimicjointmsg = ([sensor_msgs::JointState] JointState_()), [ros::Time] operator=(#stamp, #time), [void] name.resize(1, [value_type] (default)), [void] position.resize(1, [value_type] (default)), [void] velocity.resize(1, [value_type] (default)), [std::basic_string<char>] operator=([std::basic_string<char>] operator[](#name, 0), sdh_finger_21_joint), [double] ([double] operator[](#position, 0))=([double] operator[](#position, 0)), [double] ([double] operator[](#velocity, 0))=([double] operator[](#velocity, 0)), [void] topicPub_JointState_.publish(#mimicjointmsg), [control_msgs::JointTrajectoryControllerState] controllermsg = ([control_msgs::JointTrajectoryControllerState] JointTrajectoryControllerState_()), [ros::Time] operator=(#stamp, #time), [void] joint_names.resize(#DOF_, [value_type] (default)), [void] positions.resize(#DOF_, [value_type] (default)), [void] velocities.resize(#DOF_, [value_type] (default)), [void] positions.resize(#DOF_, [value_type] (default)), [void] velocities.resize(#DOF_, [value_type] (default)), [void] positions.resize(#DOF_, [value_type] (default)), [void] velocities.resize(#DOF_, [value_type] (default)), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#joint_names, #joint_names_), if [([bool] ([size_type] targetAngles_.size())!=(0), [[double] ([double] operator[](#positions, 0))=([double] ([double] ([double] operator[](#targetAngles_, 0))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 1))=([double] ([double] ([double] operator[](#targetAngles_, 3))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 2))=([double] ([double] ([double] operator[](#targetAngles_, 4))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 3))=([double] ([double] ([double] operator[](#targetAngles_, 5))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 4))=([double] ([double] ([double] operator[](#targetAngles_, 6))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 5))=([double] ([double] ([double] operator[](#targetAngles_, 1))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 6))=([double] ([double] ([double] operator[](#targetAngles_, 2))*(#pi_))/(180.0))])], [std::vector<double, std::allocator<double> >] operator=(#positions, #position), [std::vector<double, std::allocator<double> >] operator=(#velocities, #velocity), for [([bool] (#i)<(#DOF_), [[double] ([double] operator[](#positions, #i))=([double] ([double] operator[](#positions, #i))-([double] operator[](#positions, #i))), [double] ([double] operator[](#velocities, #i))=([double] ([double] operator[](#velocities, #i))-([double] operator[](#velocities, #i))), [int] _++(#i)])], [void] topicPub_ControllerState_.publish(#controllermsg), [std::vector<SDH::cSDH::eAxisState, std::allocator<SDH::cSDH::eAxisState> >] operator=(#state_, [std::vector<eAxisState>] sdh_.GetAxisActualState(#axes_))])
PublishTuple(variable='topicPub_ControllerState_', nesting=1, function='updateSdh', line=777, scope=[if [([bool] (#hasNewGoal_)==(True), [[[void] sdh_.Stop()], if [([bool] operator==(#operationMode_, position), [[[void] sdh_.SetAxisTargetAngle(#axes_, #targetAngles_), [double] sdh_.MoveHand(False)]]), (True, [if [([bool] operator==(#operationMode_, velocity), [[[void] sdh_.SetAxisTargetVelocity(#axes_, #velocities_)]]), (True, [if [([bool] operator==(#operationMode_, effort), []), (True, [])]])]])], [bool] (#hasNewGoal_)=(False)])], [std::vector<double>] actualAngles = ([std::vector<double>] vector()), [[std::vector<double, std::allocator<double> >] operator=(#actualAngles, [std::vector<double>] sdh_.GetAxisActualAngle(#axes_))], [std::vector<double>] actualVelocities = ([std::vector<double>] vector()), [[std::vector<double, std::allocator<double> >] operator=(#actualVelocities, [std::vector<double>] sdh_.GetAxisActualVelocity(#axes_))], [ros::Time] time = ([ros::Time] now()), [sensor_msgs::JointState] msg = ([sensor_msgs::JointState] JointState_()), [ros::Time] operator=(#stamp, #time), [void] name.resize(#DOF_, [value_type] (default)), [void] position.resize(#DOF_, [value_type] (default)), [void] velocity.resize(#DOF_, [value_type] (default)), [void] effort.resize(#DOF_, [value_type] (default)), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#name, #joint_names_), [double] ([double] operator[](#position, 0))=([double] ([double] ([double] operator[](#actualAngles, 0))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 1))=([double] ([double] ([double] operator[](#actualAngles, 3))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 2))=([double] ([double] ([double] operator[](#actualAngles, 4))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 3))=([double] ([double] ([double] operator[](#actualAngles, 5))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 4))=([double] ([double] ([double] operator[](#actualAngles, 6))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 5))=([double] ([double] ([double] operator[](#actualAngles, 1))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 6))=([double] ([double] ([double] operator[](#actualAngles, 2))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 0))=([double] ([double] ([double] operator[](#actualVelocities, 0))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 1))=([double] ([double] ([double] operator[](#actualVelocities, 3))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 2))=([double] ([double] ([double] operator[](#actualVelocities, 4))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 3))=([double] ([double] ([double] operator[](#actualVelocities, 5))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 4))=([double] ([double] ([double] operator[](#actualVelocities, 6))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 5))=([double] ([double] ([double] operator[](#actualVelocities, 1))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 6))=([double] ([double] ([double] operator[](#actualVelocities, 2))*(#pi_))/(180.0)), [void] topicPub_JointState_.publish(#msg), [sensor_msgs::JointState] mimicjointmsg = ([sensor_msgs::JointState] JointState_()), [ros::Time] operator=(#stamp, #time), [void] name.resize(1, [value_type] (default)), [void] position.resize(1, [value_type] (default)), [void] velocity.resize(1, [value_type] (default)), [std::basic_string<char>] operator=([std::basic_string<char>] operator[](#name, 0), sdh_finger_21_joint), [double] ([double] operator[](#position, 0))=([double] operator[](#position, 0)), [double] ([double] operator[](#velocity, 0))=([double] operator[](#velocity, 0)), [void] topicPub_JointState_.publish(#mimicjointmsg), [control_msgs::JointTrajectoryControllerState] controllermsg = ([control_msgs::JointTrajectoryControllerState] JointTrajectoryControllerState_()), [ros::Time] operator=(#stamp, #time), [void] joint_names.resize(#DOF_, [value_type] (default)), [void] positions.resize(#DOF_, [value_type] (default)), [void] velocities.resize(#DOF_, [value_type] (default)), [void] positions.resize(#DOF_, [value_type] (default)), [void] velocities.resize(#DOF_, [value_type] (default)), [void] positions.resize(#DOF_, [value_type] (default)), [void] velocities.resize(#DOF_, [value_type] (default)), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#joint_names, #joint_names_), if [([bool] ([size_type] targetAngles_.size())!=(0), [[double] ([double] operator[](#positions, 0))=([double] ([double] ([double] operator[](#targetAngles_, 0))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 1))=([double] ([double] ([double] operator[](#targetAngles_, 3))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 2))=([double] ([double] ([double] operator[](#targetAngles_, 4))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 3))=([double] ([double] ([double] operator[](#targetAngles_, 5))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 4))=([double] ([double] ([double] operator[](#targetAngles_, 6))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 5))=([double] ([double] ([double] operator[](#targetAngles_, 1))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 6))=([double] ([double] ([double] operator[](#targetAngles_, 2))*(#pi_))/(180.0))])], [std::vector<double, std::allocator<double> >] operator=(#positions, #position), [std::vector<double, std::allocator<double> >] operator=(#velocities, #velocity), for [([bool] (#i)<(#DOF_), [[double] ([double] operator[](#positions, #i))=([double] ([double] operator[](#positions, #i))-([double] operator[](#positions, #i))), [double] ([double] operator[](#velocities, #i))=([double] ([double] operator[](#velocities, #i))-([double] operator[](#velocities, #i))), [int] _++(#i)])], [void] topicPub_ControllerState_.publish(#controllermsg), [std::vector<SDH::cSDH::eAxisState, std::allocator<SDH::cSDH::eAxisState> >] operator=(#state_, [std::vector<eAxisState>] sdh_.GetAxisActualState(#axes_))])
PublishTuple(variable='topicPub_Diagnostics_', nesting=0, function='updateSdh', line=815, scope=[void] updateSdh())
PublishTuple(variable='topicPub_TactileSensor_', nesting=1, function='updateDsa', line=864, scope=[for [([bool] (#i)<(7), [[[const SDH::cDSA::sTactileSensorFrame] dsa_.UpdateFrame()], [int] _++(#i)])], [schunk_sdh::TactileSensor] msg = ([schunk_sdh::TactileSensor] TactileSensor_()), [ros::Time] operator=(#stamp, [ros::Time] now()), [int] m = (None), [void] tactile_matrix.resize(#nb_matrices, [value_type] (default)), for [([bool] (#i)<(#nb_matrices), [[int] (#m)=(#dsa_reorder), [schunk_sdh::TactileMatrix &] tm = ([schunk_sdh::TactileMatrix_<std::allocator<void> >] operator[](#tactile_matrix, #i)), [_matrix_id_type] (#matrix_id)=(#i), [_cells_x_type] (#cells_x)=(#cells_x), [_cells_y_type] (#cells_y)=(#cells_y), [void] tactile_array.resize([int] (#cells_x)*(#cells_y), [value_type] (default)), for [([bool] (#y)<(#cells_y), [for [([bool] (#x)<(#cells_x), [[short] ([short] operator[](#tactile_array, [int] ([int] (#cells_x)*(#y))+(#x)))=([tTexel] dsa_.GetTexel(#m, #x, #y)), [int] _++(#x)])], [int] _++(#y)])], [int] _++(#i)])], [void] topicPub_TactileSensor_.publish(#msg)])
AdvertiseTuple(topic='joint_states', queue_size=10, message_type='sensor_msgs::JointState', nesting=0, variable='joint_pub', function='main', line=196, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='joint_pub', nesting=1, function='main', line=211, scope=[[std::vector<double, std::allocator<double> >] operator=(#position, #joint_positions), [ros::Time] operator=(#stamp, [ros::Time] now()), [void] joint_pub.publish(#joint_msg), [void] spinOnce(), [bool] loop_rate.sleep()])
PublishTuple(variable='blink_publisher_', nesting=2, function='bumperEventCB', line=147, scope=[[_value_type] (#value)=(#GREEN), [void] blink_publisher_.publish(#led_msg_ptr)])
PublishTuple(variable='blink_publisher_', nesting=2, function='bumperEventCB', line=153, scope=[[_value_type] (#value)=(#BLACK), [void] blink_publisher_.publish(#led_msg_ptr)])
AdvertiseTuple(topic='commands/led1', queue_size=10, message_type='kobuki_msgs::Led', nesting=0, variable='blink_publisher_', function='init', line=81, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='/scan_filtered', queue_size=1, message_type='sensor_msgs::LaserScan', nesting=0, variable='scan_filtered_pub_', function='LaserFootprintFilter', line=46, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='scan_filtered_pub_', nesting=0, function='update', line=85, scope=[void] update(input_scan))
AdvertiseTuple(topic='targets', queue_size=5, message_type='std_msgs::Float64', nesting=0, variable='pub', function='MovementPublisher', line=77, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='mse_out', queue_size=5, message_type='std_msgs::Float64', nesting=0, variable='pub_mse_', function='subscribe_and_default_pub_', line=84, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='pub_mse_', nesting=1, function='start', line=143, scope=[for [([bool] (#i)<([size_type] partial_movements.size()), [for [([bool] (#j)<(#nb_mvt_step), [if [([bool] !([bool] ok()), [return])], [_data_type] (#data)=([double] operator[].get_target([double] (#j)/(#nb_mvt_step))), if [([bool] (#data)==([double] -(1.0)), [[_data_type] (#data)=(#last_target)]), (True, [[_data_type] (#data)=([double] (#min)+([double] (#data)*([double] (#max)-(#min))))])], [void] publish_(), [bool] publishing_rate.sleep(), [void] spinOnce(), [double] (#last_target)=(#data), [unsigned int] ++(#j)])], [unsigned int] ++(#i)])], [_data_type] (#data)=(#MSError_), [void] pub_mse_.publish(#msg), [double] (#SError_)=(0.0), [unsigned int] (#n_samples_)=(0), [unsigned int] ++(#i_rep)])
PublishTuple(variable='pub', nesting=1, function='publish_', line=204, scope=[[void] pub.publish(#msg)])
AdvertiseTuple(topic='targets', queue_size=5, message_type='std_msgs::Float64', nesting=0, variable='pub', function='MovementPublisher', line=77, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='mse_out', queue_size=5, message_type='std_msgs::Float64', nesting=0, variable='pub_mse_', function='subscribe_and_default_pub_', line=84, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='pub_mse_', nesting=1, function='start', line=143, scope=[for [([bool] (#i)<([size_type] partial_movements.size()), [for [([bool] (#j)<(#nb_mvt_step), [if [([bool] !([bool] ok()), [return])], [_data_type] (#data)=([double] operator[].get_target([double] (#j)/(#nb_mvt_step))), if [([bool] (#data)==([double] -(1.0)), [[_data_type] (#data)=(#last_target)]), (True, [[_data_type] (#data)=([double] (#min)+([double] (#data)*([double] (#max)-(#min))))])], [void] publish_(), [bool] publishing_rate.sleep(), [void] spinOnce(), [double] (#last_target)=(#data), [unsigned int] ++(#j)])], [unsigned int] ++(#i)])], [_data_type] (#data)=(#MSError_), [void] pub_mse_.publish(#msg), [double] (#SError_)=(0.0), [unsigned int] (#n_samples_)=(0), [unsigned int] ++(#i_rep)])
PublishTuple(variable='pub', nesting=1, function='publish_', line=204, scope=[[void] pub.publish(#msg)])
AdvertiseTuple(topic='joint_states', queue_size=100, message_type='sensor_msgs::JointState', nesting=0, variable='joint_state_publisher', function='advertiseTopics', line=308, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='version_info', queue_size=100, message_type='kobuki_msgs::VersionInfo', nesting=0, variable='version_info_publisher', function='advertiseTopics', line=313, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=True, param_topic=False, param_queue=False)
AdvertiseTuple(topic='controller_info', queue_size=100, message_type='kobuki_msgs::ControllerInfo', nesting=0, variable='controller_info_publisher', function='advertiseTopics', line=314, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=True, param_topic=False, param_queue=False)
AdvertiseTuple(topic='events/button', queue_size=100, message_type='kobuki_msgs::ButtonEvent', nesting=0, variable='button_event_publisher', function='advertiseTopics', line=315, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='events/bumper', queue_size=100, message_type='kobuki_msgs::BumperEvent', nesting=0, variable='bumper_event_publisher', function='advertiseTopics', line=316, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='events/cliff', queue_size=100, message_type='kobuki_msgs::CliffEvent', nesting=0, variable='cliff_event_publisher', function='advertiseTopics', line=317, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='events/wheel_drop', queue_size=100, message_type='kobuki_msgs::WheelDropEvent', nesting=0, variable='wheel_event_publisher', function='advertiseTopics', line=318, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='events/power_system', queue_size=100, message_type='kobuki_msgs::PowerSystemEvent', nesting=0, variable='power_event_publisher', function='advertiseTopics', line=319, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='events/digital_input', queue_size=100, message_type='kobuki_msgs::DigitalInputEvent', nesting=0, variable='input_event_publisher', function='advertiseTopics', line=320, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='events/robot_state', queue_size=100, message_type='kobuki_msgs::RobotStateEvent', nesting=0, variable='robot_event_publisher', function='advertiseTopics', line=321, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=True, param_topic=False, param_queue=False)
AdvertiseTuple(topic='sensors/core', queue_size=100, message_type='kobuki_msgs::SensorState', nesting=0, variable='sensor_state_publisher', function='advertiseTopics', line=322, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='sensors/dock_ir', queue_size=100, message_type='kobuki_msgs::DockInfraRed', nesting=0, variable='dock_ir_publisher', function='advertiseTopics', line=323, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='sensors/imu_data', queue_size=100, message_type='sensor_msgs::Imu', nesting=0, variable='imu_data_publisher', function='advertiseTopics', line=324, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='sensors/imu_data_raw', queue_size=100, message_type='sensor_msgs::Imu', nesting=0, variable='raw_imu_data_publisher', function='advertiseTopics', line=325, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='debug/raw_data_command', queue_size=100, message_type='std_msgs::String', nesting=0, variable='raw_data_command_publisher', function='advertiseTopics', line=326, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='debug/raw_data_stream', queue_size=100, message_type='std_msgs::String', nesting=0, variable='raw_data_stream_publisher', function='advertiseTopics', line=327, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='debug/raw_control_command', queue_size=100, message_type='std_msgs::Int16MultiArray', nesting=0, variable='raw_control_command_publisher', function='advertiseTopics', line=328, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='odom', queue_size=50, message_type='nav_msgs::Odometry', nesting=0, variable='odom_publisher', function='init', line=76, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='odom_publisher', nesting=0, function='publishOdometry', line=156, scope=[void] publishOdometry(odom_quat, pose_update_rates))
PublishTuple(variable='goal_pub', nesting=0, function='chatterCallback1', line=54, scope=[void] chatterCallback1(msg))
PublishTuple(variable='cmd_pub', nesting=3, function='timerCallback', line=82, scope=[[void] cmd_pub.publish(#joints_cmd)])
PublishTuple(variable='cmd_pub2', nesting=4, function='timerCallback', line=88, scope=[[void] cmd_pub2.publish(#joints_cmd)])
AdvertiseTuple(topic='goal_pos', queue_size=1, message_type='aubo_msgs::GoalPoint', nesting=0, variable='goal_pub', function='main', line=111, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='pcan_cmd', queue_size=1, message_type='std_msgs::Float32MultiArray', nesting=0, variable='cmd_pub', function='main', line=113, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='servoj_cmd', queue_size=1, message_type='std_msgs::Float32MultiArray', nesting=0, variable='cmd_pub2', function='main', line=114, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='sensor_state_publisher', nesting=2, function='publishSensorState', line=93, scope=[[kobuki_msgs::SensorState] state = ([kobuki_msgs::SensorState] SensorState_()), [CoreSensors::Data] data = ([CoreSensors::Data] kobuki.getCoreSensorData()), [ros::Time] operator=(#stamp, [ros::Time] now()), [_time_stamp_type] (#time_stamp)=(#time_stamp), [_bumper_type] (#bumper)=(#bumper), [_wheel_drop_type] (#wheel_drop)=(#wheel_drop), [_cliff_type] (#cliff)=(#cliff), [_left_encoder_type] (#left_encoder)=(#left_encoder), [_right_encoder_type] (#right_encoder)=(#right_encoder), [_left_pwm_type] (#left_pwm)=(#left_pwm), [_right_pwm_type] (#right_pwm)=(#right_pwm), [_buttons_type] (#buttons)=(#buttons), [_charger_type] (#charger)=(#charger), [_battery_type] (#battery)=(#battery), [_over_current_type] (#over_current)=(#over_current), [Cliff::Data] cliff_data = ([Cliff::Data] kobuki.getCliffData()), [std::vector<unsigned short, std::allocator<unsigned short> >] operator=(#bottom, #bottom), [Current::Data] current_data = ([Current::Data] kobuki.getCurrentData()), [std::vector<unsigned char, std::allocator<unsigned char> >] operator=(#current, #current), [GpInput::Data] gp_input_data = ([GpInput::Data] kobuki.getGpInputData()), [_digital_input_type] (#digital_input)=(#digital_input), for [([bool] (#i)<([size_type] analog_input.size()), [[void] analog_input.push_back([unsigned short] operator[](#analog_input, #i)), [unsigned int] ++(#i)])], [void] sensor_state_publisher.publish(#state)])
PublishTuple(variable='joint_state_publisher', nesting=1, function='publishWheelState', line=113, scope=[[ros::Time] operator=(#stamp, [ros::Time] now()), [void] joint_state_publisher.publish(#joint_states)])
PublishTuple(variable='imu_data_publisher', nesting=2, function='publishInertia', line=147, scope=[[sensor_msgs::ImuPtr] msg = ([sensor_msgs::ImuPtr] shared_ptr()), [std::basic_string<char>] operator=(#frame_id, gyro_link), [ros::Time] operator=(#stamp, [ros::Time] now()), [geometry_msgs::Quaternion_<std::allocator<void> >] operator=(#orientation, [geometry_msgs::Quaternion] createQuaternionMsgFromRollPitchYaw(0.0, 0.0, [const double] getHeading.operator const double &())), [double] ([double] operator[](#orientation_covariance, 0))=(0.0), [double] ([double] operator[](#orientation_covariance, 4))=(0.0), [double] ([double] operator[](#orientation_covariance, 8))=(0.05), [_z_type] (#z)=([double] kobuki.getAngularVelocity()), [double] ([double] operator[](#angular_velocity_covariance, 0))=(0.0), [double] ([double] operator[](#angular_velocity_covariance, 4))=(0.0), [double] ([double] operator[](#angular_velocity_covariance, 8))=(0.05), [void] imu_data_publisher.publish(#msg)])
PublishTuple(variable='raw_imu_data_publisher', nesting=2, function='publishRawInertia', line=179, scope=[[std::basic_string<char>] operator=(#frame_id, gyro_link), [ros::Time] operator=(#stamp, [ros::Time] operator-(#now, [ros::Duration] operator*(#interval, [unsigned int] ([unsigned int] (#length)-(#i))-(1)))), [_x_type] (#x)=([double] from_degrees([double] ([double] -(#digit_to_dps))*(#data))), [_y_type] (#y)=([double] from_degrees([double] (#digit_to_dps)*(#data))), [_z_type] (#z)=([double] from_degrees([double] (#digit_to_dps)*(#data))), [void] raw_imu_data_publisher.publish(#msg), [unsigned int] _++(#i)])
PublishTuple(variable='dock_ir_publisher', nesting=2, function='publishDockIRData', line=202, scope=[[DockIR::Data] data = ([DockIR::Data] kobuki.getDockIRData()), [kobuki_msgs::DockInfraRedPtr] msg = ([kobuki_msgs::DockInfraRedPtr] shared_ptr()), [std::basic_string<char>] operator=(#frame_id, dock_ir_link), [ros::Time] operator=(#stamp, [ros::Time] now()), [void] data.push_back([unsigned char] operator[](#docking, 0)), [void] data.push_back([unsigned char] operator[](#docking, 1)), [void] data.push_back([unsigned char] operator[](#docking, 2)), [void] dock_ir_publisher.publish(#msg)])
PublishTuple(variable='version_info_publisher', nesting=1, function='publishVersionInfo', line=243, scope=[[kobuki_msgs::VersionInfoPtr] msg = ([kobuki_msgs::VersionInfoPtr] shared_ptr()), [std::basic_string<char>] operator=(#firmware, [std::string] toString(#firmware)), [std::basic_string<char>] operator=(#hardware, [std::string] toString(#hardware)), [std::basic_string<char>] operator=(#software, [std::string] getSoftwareVersion()), [void] udid.resize(3, [value_type] (default)), [unsigned int] ([unsigned int] operator[](#udid, 0))=(#udid0), [unsigned int] ([unsigned int] operator[](#udid, 1))=(#udid1), [unsigned int] ([unsigned int] operator[](#udid, 2))=(#udid2), if [([bool] (#firmware)>(65536), [[_features_type] (#features)|=(#SMOOTH_MOVE_START), [_features_type] (#features)|=(#GYROSCOPE_3D_DATA)])], if [([bool] (#firmware)>(65792), [])], [void] version_info_publisher.publish(#msg)])
PublishTuple(variable='controller_info_publisher', nesting=1, function='publishControllerInfo', line=259, scope=[[kobuki_msgs::ControllerInfoPtr] msg = ([kobuki_msgs::ControllerInfoPtr] shared_ptr()), [ControllerInfo::Data] data = ([ControllerInfo::Data] kobuki.getControllerInfoData()), [_type_type] (#type)=(#type), [_p_gain_type] (#p_gain)=([float] (#p_gain)*(0.001)), [_i_gain_type] (#i_gain)=([float] (#i_gain)*(0.001)), [_d_gain_type] (#d_gain)=([float] (#d_gain)*(0.001)), [void] controller_info_publisher.publish(#msg)])
PublishTuple(variable='button_event_publisher', nesting=1, function='publishButtonEvent', line=283, scope=[[kobuki_msgs::ButtonEventPtr] msg = ([kobuki_msgs::ButtonEventPtr] shared_ptr()), switch [([bool] (#state)==(#Pressed), [[[_state_type] (#state)=(#PRESSED), break]]), ([bool] (#state)==(#Released), [[[_state_type] (#state)=(#RELEASED), break]])], switch [([bool] (#button)==(#Button0), [[[_button_type] (#button)=(#Button0), break]]), ([bool] (#button)==(#Button1), [[[_button_type] (#button)=(#Button1), break]]), ([bool] (#button)==(#Button2), [[[_button_type] (#button)=(#Button2), break]])], [void] button_event_publisher.publish(#msg)])
PublishTuple(variable='bumper_event_publisher', nesting=1, function='publishBumperEvent', line=303, scope=[[kobuki_msgs::BumperEventPtr] msg = ([kobuki_msgs::BumperEventPtr] shared_ptr()), switch [([bool] (#state)==(#Pressed), [[[_state_type] (#state)=(#PRESSED), break]]), ([bool] (#state)==(#Released), [[[_state_type] (#state)=(#RELEASED), break]])], switch [([bool] (#bumper)==(#Left), [[[_bumper_type] (#bumper)=(#LEFT), break]]), ([bool] (#bumper)==(#Center), [[[_bumper_type] (#bumper)=(#CENTER), break]]), ([bool] (#bumper)==(#Right), [[[_bumper_type] (#bumper)=(#RIGHT), break]])], [void] bumper_event_publisher.publish(#msg)])
PublishTuple(variable='cliff_event_publisher', nesting=1, function='publishCliffEvent', line=324, scope=[[kobuki_msgs::CliffEventPtr] msg = ([kobuki_msgs::CliffEventPtr] shared_ptr()), switch [([bool] (#state)==(#Floor), [[[_state_type] (#state)=(#FLOOR), break]]), ([bool] (#state)==(#Cliff), [[[_state_type] (#state)=(#CLIFF), break]])], switch [([bool] (#sensor)==(#Left), [[[_sensor_type] (#sensor)=(#LEFT), break]]), ([bool] (#sensor)==(#Center), [[[_sensor_type] (#sensor)=(#CENTER), break]]), ([bool] (#sensor)==(#Right), [[[_sensor_type] (#sensor)=(#RIGHT), break]])], [_bottom_type] (#bottom)=(#bottom), [void] cliff_event_publisher.publish(#msg)])
PublishTuple(variable='wheel_event_publisher', nesting=1, function='publishWheelEvent', line=343, scope=[[kobuki_msgs::WheelDropEventPtr] msg = ([kobuki_msgs::WheelDropEventPtr] shared_ptr()), switch [([bool] (#state)==(#Dropped), [[[_state_type] (#state)=(#DROPPED), break]]), ([bool] (#state)==(#Raised), [[[_state_type] (#state)=(#RAISED), break]])], switch [([bool] (#wheel)==(#Left), [[[_wheel_type] (#wheel)=(#LEFT), break]]), ([bool] (#wheel)==(#Right), [[[_wheel_type] (#wheel)=(#RIGHT), break]])], [void] wheel_event_publisher.publish(#msg)])
PublishTuple(variable='power_event_publisher', nesting=1, function='publishPowerEvent', line=367, scope=[[kobuki_msgs::PowerSystemEventPtr] msg = ([kobuki_msgs::PowerSystemEventPtr] shared_ptr()), switch [([bool] (#event)==(#Unplugged), [[[_event_type] (#event)=(#UNPLUGGED), break]]), ([bool] (#event)==(#PluggedToAdapter), [[[_event_type] (#event)=(#PLUGGED_TO_ADAPTER), break]]), ([bool] (#event)==(#PluggedToDockbase), [[[_event_type] (#event)=(#PLUGGED_TO_DOCKBASE), break]]), ([bool] (#event)==(#ChargeCompleted), [[[_event_type] (#event)=(#CHARGE_COMPLETED), break]]), ([bool] (#event)==(#BatteryLow), [[[_event_type] (#event)=(#BATTERY_LOW), break]]), ([bool] (#event)==(#BatteryCritical), [[[_event_type] (#event)=(#BATTERY_CRITICAL), break]])], [void] power_event_publisher.publish(#msg)])
PublishTuple(variable='input_event_publisher', nesting=1, function='publishInputEvent', line=378, scope=[[kobuki_msgs::DigitalInputEventPtr] msg = ([kobuki_msgs::DigitalInputEventPtr] shared_ptr()), for [([bool] (#i)<([size_type] size()), [[unsigned char] ([unsigned char] operator[](#values, #i))=(#values), [unsigned int] _++(#i)])], [void] input_event_publisher.publish(#msg)])
PublishTuple(variable='robot_event_publisher', nesting=1, function='publishRobotEvent', line=393, scope=[[kobuki_msgs::RobotStateEventPtr] msg = ([kobuki_msgs::RobotStateEventPtr] shared_ptr()), switch [([bool] (#state)==(#Online), [[[_state_type] (#state)=(#ONLINE), break]]), ([bool] (#state)==(#Offline), [[[_state_type] (#state)=(#OFFLINE), break]])], [void] robot_event_publisher.publish(#msg)])
PublishTuple(variable='raw_data_command_publisher', nesting=2, function='publishRawDataCommand', line=420, scope=[[void] raw_data_command_publisher.publish(#s)])
PublishTuple(variable='raw_data_stream_publisher', nesting=2, function='publishRawDataStream', line=466, scope=[[void] raw_data_stream_publisher.publish(#msg)])
PublishTuple(variable='raw_control_command_publisher', nesting=2, function='publishRawControlCommand', line=479, scope=[[void] raw_control_command_publisher.publish(#msg)])
AdvertiseTuple(topic='detector_cloud', queue_size=1, message_type='pcl::pcl::struct pcl::PointXYZ', nesting=0, variable='detector_pub_', function='CalibrateKinectCheckerboard', line=158, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='physical_points_cloud', queue_size=1, message_type='pcl::pcl::struct pcl::PointXYZ', nesting=0, variable='physical_pub_', function='CalibrateKinectCheckerboard', line=159, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='detector_pub_', nesting=0, function='publishCloud', line=264, scope=[void] publishCloud(detector_points, transform, frame_id))
PublishTuple(variable='physical_pub_', nesting=0, function='calibrate', line=320, scope=[bool] calibrate(frame_id))
AdvertiseTuple(topic='joint_states', queue_size=1, message_type='sensor_msgs::JointState', nesting=0, variable='joint_pub', function='publishRTMsg', line=496, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='wrench', queue_size=1, message_type='geometry_msgs::WrenchStamped', nesting=0, variable='wrench_pub', function='publishRTMsg', line=497, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='joint_pub', nesting=1, function='publishRTMsg', line=520, scope=[[sensor_msgs::JointState] joint_msg = ([sensor_msgs::JointState] JointState_()), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#name, [std::vector<std::string>] robot_.getJointNames()), [geometry_msgs::WrenchStamped] wrench_msg = ([geometry_msgs::WrenchStamped] WrenchStamped_()), [geometry_msgs::PoseStamped] tool_pose_msg = ([geometry_msgs::PoseStamped] PoseStamped_()), [std::mutex] msg_lock = ([std::mutex] new mutex()), [std::unique_lock<std::mutex>] locker = ([std::unique_lock<std::mutex>] unique_lock()), while [([bool] !([bool] robot_state_.getDataPublished()), [[void] rt_msg_cond_.wait(#locker)])], [ros::Time] operator=(#stamp, [ros::Time] now()), [std::vector<double, std::allocator<double> >] operator=(#position, [std::vector<double>] robot_state_.getJonitPosition()), for [([bool] (#i)<([size_type] position.size()), [[value_type] ([value_type] operator[](#position, #i))+=([value_type] operator[](#joint_offsets_, #i)), [unsigned int] _++(#i)])], [std::vector<double, std::allocator<double> >] operator=(#velocity, [std::vector<double>] robot_state_.getJonitVelocity()), [std::vector<double, std::allocator<double> >] operator=(#effort, [std::vector<double>] robot_state_.getJointCurrent()), [void] joint_pub.publish(#joint_msg), [std::vector<double>] tcp_force = ([std::vector<double>] robot_state_.getTcpForce()), [ros::Time] operator=(#stamp, #stamp), [_x_type] (#x)=([value_type] operator[](#tcp_force, 0)), [_y_type] (#y)=([value_type] operator[](#tcp_force, 1)), [_z_type] (#z)=([value_type] operator[](#tcp_force, 2)), [_x_type] (#x)=([value_type] operator[](#tcp_force, 3)), [_y_type] (#y)=([value_type] operator[](#tcp_force, 4)), [_z_type] (#z)=([value_type] operator[](#tcp_force, 5)), [void] wrench_pub.publish(#wrench_msg), [std::vector<double>] tool_orientation = ([std::vector<double>] robot_state_.getToolOrientation()), [tf::Quaternion] quat = ([tf::Quaternion] new Quaternion()), [double] w = ([value_type] operator[](#tool_orientation, 0)), [double] x = ([value_type] operator[](#tool_orientation, 1)), [double] y = ([value_type] operator[](#tool_orientation, 2)), [double] z = ([value_type] operator[](#tool_orientation, 3)), [double] rx = ([double] atan2([double] (2.0)*([double] ([double] (#w)*(#x))+([double] (#y)*(#z))), [double] (1)-([double] (2.0)*([double] ([double] (#x)*(#x))+([double] (#y)*(#y)))))), [double] ry = ([double] asin([double] (2.0)*([double] ([double] (#w)*(#y))-([double] (#z)*(#x))))), [double] rz = ([double] atan2([double] (2.0)*([double] ([double] (#w)*(#x))+([double] (#x)*(#y))), [double] (1)-([double] (2.0)*([double] ([double] (#y)*(#y))+([double] (#z)*(#z)))))), [double] angle = ([double] sqrt([double] ([double] ([typename __gnu_cxx::__promote_2<double, int>::__type] pow(#rx, 2))+([typename __gnu_cxx::__promote_2<double, int>::__type] pow(#ry, 2)))+([typename __gnu_cxx::__promote_2<double, int>::__type] pow(#rz, 2)))), if [([bool] (#angle)<(1e-16), [[void] quat.setValue(0, 0, 0, 1)]), (True, [[void] quat.setRotation([tf::Vector3] new Vector3(None, None, [double] (#rx)/(#angle), [double] (#ry)/(#angle), [double] (#rz)/(#angle)), #angle)])], [std::vector<double>] tool_position = ([std::vector<double>] robot_state_.getToolPosition()), [tf::Transform] transform = ([tf::Transform] new Transform()), [void] transform.setOrigin([tf::Vector3] new Vector3(None, None, [value_type] operator[](#tool_position, 0), [value_type] operator[](#tool_position, 1), [value_type] operator[](#tool_position, 2))), [void] transform.setRotation(#quat), [void] br.sendTransform([tf::StampedTransform] new StampedTransform(None, None, #transform, #stamp, #base_frame_, #tool_frame_)), [void] robot_state_.setDataPublished()])
PublishTuple(variable='wrench_pub', nesting=1, function='publishRTMsg', line=530, scope=[[sensor_msgs::JointState] joint_msg = ([sensor_msgs::JointState] JointState_()), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#name, [std::vector<std::string>] robot_.getJointNames()), [geometry_msgs::WrenchStamped] wrench_msg = ([geometry_msgs::WrenchStamped] WrenchStamped_()), [geometry_msgs::PoseStamped] tool_pose_msg = ([geometry_msgs::PoseStamped] PoseStamped_()), [std::mutex] msg_lock = ([std::mutex] new mutex()), [std::unique_lock<std::mutex>] locker = ([std::unique_lock<std::mutex>] unique_lock()), while [([bool] !([bool] robot_state_.getDataPublished()), [[void] rt_msg_cond_.wait(#locker)])], [ros::Time] operator=(#stamp, [ros::Time] now()), [std::vector<double, std::allocator<double> >] operator=(#position, [std::vector<double>] robot_state_.getJonitPosition()), for [([bool] (#i)<([size_type] position.size()), [[value_type] ([value_type] operator[](#position, #i))+=([value_type] operator[](#joint_offsets_, #i)), [unsigned int] _++(#i)])], [std::vector<double, std::allocator<double> >] operator=(#velocity, [std::vector<double>] robot_state_.getJonitVelocity()), [std::vector<double, std::allocator<double> >] operator=(#effort, [std::vector<double>] robot_state_.getJointCurrent()), [void] joint_pub.publish(#joint_msg), [std::vector<double>] tcp_force = ([std::vector<double>] robot_state_.getTcpForce()), [ros::Time] operator=(#stamp, #stamp), [_x_type] (#x)=([value_type] operator[](#tcp_force, 0)), [_y_type] (#y)=([value_type] operator[](#tcp_force, 1)), [_z_type] (#z)=([value_type] operator[](#tcp_force, 2)), [_x_type] (#x)=([value_type] operator[](#tcp_force, 3)), [_y_type] (#y)=([value_type] operator[](#tcp_force, 4)), [_z_type] (#z)=([value_type] operator[](#tcp_force, 5)), [void] wrench_pub.publish(#wrench_msg), [std::vector<double>] tool_orientation = ([std::vector<double>] robot_state_.getToolOrientation()), [tf::Quaternion] quat = ([tf::Quaternion] new Quaternion()), [double] w = ([value_type] operator[](#tool_orientation, 0)), [double] x = ([value_type] operator[](#tool_orientation, 1)), [double] y = ([value_type] operator[](#tool_orientation, 2)), [double] z = ([value_type] operator[](#tool_orientation, 3)), [double] rx = ([double] atan2([double] (2.0)*([double] ([double] (#w)*(#x))+([double] (#y)*(#z))), [double] (1)-([double] (2.0)*([double] ([double] (#x)*(#x))+([double] (#y)*(#y)))))), [double] ry = ([double] asin([double] (2.0)*([double] ([double] (#w)*(#y))-([double] (#z)*(#x))))), [double] rz = ([double] atan2([double] (2.0)*([double] ([double] (#w)*(#x))+([double] (#x)*(#y))), [double] (1)-([double] (2.0)*([double] ([double] (#y)*(#y))+([double] (#z)*(#z)))))), [double] angle = ([double] sqrt([double] ([double] ([typename __gnu_cxx::__promote_2<double, int>::__type] pow(#rx, 2))+([typename __gnu_cxx::__promote_2<double, int>::__type] pow(#ry, 2)))+([typename __gnu_cxx::__promote_2<double, int>::__type] pow(#rz, 2)))), if [([bool] (#angle)<(1e-16), [[void] quat.setValue(0, 0, 0, 1)]), (True, [[void] quat.setRotation([tf::Vector3] new Vector3(None, None, [double] (#rx)/(#angle), [double] (#ry)/(#angle), [double] (#rz)/(#angle)), #angle)])], [std::vector<double>] tool_position = ([std::vector<double>] robot_state_.getToolPosition()), [tf::Transform] transform = ([tf::Transform] new Transform()), [void] transform.setOrigin([tf::Vector3] new Vector3(None, None, [value_type] operator[](#tool_position, 0), [value_type] operator[](#tool_position, 1), [value_type] operator[](#tool_position, 2))), [void] transform.setRotation(#quat), [void] br.sendTransform([tf::StampedTransform] new StampedTransform(None, None, #transform, #stamp, #base_frame_, #tool_frame_)), [void] robot_state_.setDataPublished()])
AdvertiseTuple(topic='/diagnostics', queue_size=1, message_type='diagnostic_msgs::DiagnosticArray', nesting=0, variable='topicPub_Diagnostics_', function='DsaNode', line=154, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='tactile_data', queue_size=1, message_type='schunk_sdh::TactileSensor', nesting=0, variable='topicPub_TactileSensor_', function='DsaNode', line=155, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='topicPub_TactileSensor_', nesting=0, function='publishTactileData', line=377, scope=[void] publishTactileData())
PublishTuple(variable='topicPub_Diagnostics_', nesting=0, function='publishDiagnostics', line=406, scope=[void] publishDiagnostics())
AdvertiseTuple(topic='joint_states', queue_size=1, message_type='sensor_msgs::JointState', nesting=0, variable='topicPub_JointState_', function='init', line=185, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_trajectory_controller/state', queue_size=1, message_type='control_msgs::JointTrajectoryControllerState', nesting=0, variable='topicPub_ControllerState_', function='init', line=186, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='diagnostics', queue_size=1, message_type='diagnostic_msgs::DiagnosticArray', nesting=0, variable='topicPub_Diagnostics_', function='init', line=188, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='topicPub_JointState_', nesting=1, function='updateSdh', line=683, scope=[if [([bool] (#hasNewGoal_)==(True), [[[void] sdh_.Stop()], if [([bool] operator==(#operationMode_, position), [[[void] sdh_.SetAxisTargetAngle(#axes_, #targetAngles_), [double] sdh_.MoveHand(False)]]), (True, [if [([bool] operator==(#operationMode_, velocity), [[[void] sdh_.SetAxisTargetVelocity(#axes_, #velocities_)]]), (True, [if [([bool] operator==(#operationMode_, effort), []), (True, [])]])]])], [bool] (#hasNewGoal_)=(False)])], [std::vector<double>] actualAngles = ([std::vector<double>] vector()), [[std::vector<double, std::allocator<double> >] operator=(#actualAngles, [std::vector<double>] sdh_.GetAxisActualAngle(#axes_))], [std::vector<double>] actualVelocities = ([std::vector<double>] vector()), [[std::vector<double, std::allocator<double> >] operator=(#actualVelocities, [std::vector<double>] sdh_.GetAxisActualVelocity(#axes_))], [ros::Time] time = ([ros::Time] now()), [sensor_msgs::JointState] msg = ([sensor_msgs::JointState] JointState_()), [ros::Time] operator=(#stamp, #time), [void] name.resize(#DOF_, [value_type] (default)), [void] position.resize(#DOF_, [value_type] (default)), [void] velocity.resize(#DOF_, [value_type] (default)), [void] effort.resize(#DOF_, [value_type] (default)), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#name, #joint_names_), [double] ([double] operator[](#position, 0))=([double] ([double] ([double] operator[](#actualAngles, 0))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 1))=([double] ([double] ([double] operator[](#actualAngles, 3))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 2))=([double] ([double] ([double] operator[](#actualAngles, 4))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 3))=([double] ([double] ([double] operator[](#actualAngles, 5))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 4))=([double] ([double] ([double] operator[](#actualAngles, 6))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 5))=([double] ([double] ([double] operator[](#actualAngles, 1))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 6))=([double] ([double] ([double] operator[](#actualAngles, 2))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 0))=([double] ([double] ([double] operator[](#actualVelocities, 0))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 1))=([double] ([double] ([double] operator[](#actualVelocities, 3))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 2))=([double] ([double] ([double] operator[](#actualVelocities, 4))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 3))=([double] ([double] ([double] operator[](#actualVelocities, 5))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 4))=([double] ([double] ([double] operator[](#actualVelocities, 6))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 5))=([double] ([double] ([double] operator[](#actualVelocities, 1))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 6))=([double] ([double] ([double] operator[](#actualVelocities, 2))*(#pi_))/(180.0)), [void] topicPub_JointState_.publish(#msg), [sensor_msgs::JointState] mimicjointmsg = ([sensor_msgs::JointState] JointState_()), [ros::Time] operator=(#stamp, #time), [void] name.resize(1, [value_type] (default)), [void] position.resize(1, [value_type] (default)), [void] velocity.resize(1, [value_type] (default)), [std::basic_string<char>] operator=([std::basic_string<char>] operator[](#name, 0), sdh_finger_21_joint), [double] ([double] operator[](#position, 0))=([double] operator[](#position, 0)), [double] ([double] operator[](#velocity, 0))=([double] operator[](#velocity, 0)), [void] topicPub_JointState_.publish(#mimicjointmsg), [control_msgs::JointTrajectoryControllerState] controllermsg = ([control_msgs::JointTrajectoryControllerState] JointTrajectoryControllerState_()), [ros::Time] operator=(#stamp, #time), [void] joint_names.resize(#DOF_, [value_type] (default)), [void] positions.resize(#DOF_, [value_type] (default)), [void] velocities.resize(#DOF_, [value_type] (default)), [void] positions.resize(#DOF_, [value_type] (default)), [void] velocities.resize(#DOF_, [value_type] (default)), [void] positions.resize(#DOF_, [value_type] (default)), [void] velocities.resize(#DOF_, [value_type] (default)), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#joint_names, #joint_names_), if [([bool] ([size_type] targetAngles_.size())!=(0), [[double] ([double] operator[](#positions, 0))=([double] ([double] ([double] operator[](#targetAngles_, 0))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 1))=([double] ([double] ([double] operator[](#targetAngles_, 3))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 2))=([double] ([double] ([double] operator[](#targetAngles_, 4))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 3))=([double] ([double] ([double] operator[](#targetAngles_, 5))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 4))=([double] ([double] ([double] operator[](#targetAngles_, 6))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 5))=([double] ([double] ([double] operator[](#targetAngles_, 1))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 6))=([double] ([double] ([double] operator[](#targetAngles_, 2))*(#pi_))/(180.0))])], [std::vector<double, std::allocator<double> >] operator=(#positions, #position), [std::vector<double, std::allocator<double> >] operator=(#velocities, #velocity), for [([bool] (#i)<(#DOF_), [[double] ([double] operator[](#positions, #i))=([double] ([double] operator[](#positions, #i))-([double] operator[](#positions, #i))), [double] ([double] operator[](#velocities, #i))=([double] ([double] operator[](#velocities, #i))-([double] operator[](#velocities, #i))), [int] _++(#i)])], [void] topicPub_ControllerState_.publish(#controllermsg), [std::vector<SDH::cSDH::eAxisState, std::allocator<SDH::cSDH::eAxisState> >] operator=(#state_, [std::vector<eAxisState>] sdh_.GetAxisActualState(#axes_))])
PublishTuple(variable='topicPub_JointState_', nesting=1, function='updateSdh', line=694, scope=[if [([bool] (#hasNewGoal_)==(True), [[[void] sdh_.Stop()], if [([bool] operator==(#operationMode_, position), [[[void] sdh_.SetAxisTargetAngle(#axes_, #targetAngles_), [double] sdh_.MoveHand(False)]]), (True, [if [([bool] operator==(#operationMode_, velocity), [[[void] sdh_.SetAxisTargetVelocity(#axes_, #velocities_)]]), (True, [if [([bool] operator==(#operationMode_, effort), []), (True, [])]])]])], [bool] (#hasNewGoal_)=(False)])], [std::vector<double>] actualAngles = ([std::vector<double>] vector()), [[std::vector<double, std::allocator<double> >] operator=(#actualAngles, [std::vector<double>] sdh_.GetAxisActualAngle(#axes_))], [std::vector<double>] actualVelocities = ([std::vector<double>] vector()), [[std::vector<double, std::allocator<double> >] operator=(#actualVelocities, [std::vector<double>] sdh_.GetAxisActualVelocity(#axes_))], [ros::Time] time = ([ros::Time] now()), [sensor_msgs::JointState] msg = ([sensor_msgs::JointState] JointState_()), [ros::Time] operator=(#stamp, #time), [void] name.resize(#DOF_, [value_type] (default)), [void] position.resize(#DOF_, [value_type] (default)), [void] velocity.resize(#DOF_, [value_type] (default)), [void] effort.resize(#DOF_, [value_type] (default)), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#name, #joint_names_), [double] ([double] operator[](#position, 0))=([double] ([double] ([double] operator[](#actualAngles, 0))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 1))=([double] ([double] ([double] operator[](#actualAngles, 3))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 2))=([double] ([double] ([double] operator[](#actualAngles, 4))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 3))=([double] ([double] ([double] operator[](#actualAngles, 5))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 4))=([double] ([double] ([double] operator[](#actualAngles, 6))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 5))=([double] ([double] ([double] operator[](#actualAngles, 1))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 6))=([double] ([double] ([double] operator[](#actualAngles, 2))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 0))=([double] ([double] ([double] operator[](#actualVelocities, 0))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 1))=([double] ([double] ([double] operator[](#actualVelocities, 3))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 2))=([double] ([double] ([double] operator[](#actualVelocities, 4))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 3))=([double] ([double] ([double] operator[](#actualVelocities, 5))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 4))=([double] ([double] ([double] operator[](#actualVelocities, 6))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 5))=([double] ([double] ([double] operator[](#actualVelocities, 1))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 6))=([double] ([double] ([double] operator[](#actualVelocities, 2))*(#pi_))/(180.0)), [void] topicPub_JointState_.publish(#msg), [sensor_msgs::JointState] mimicjointmsg = ([sensor_msgs::JointState] JointState_()), [ros::Time] operator=(#stamp, #time), [void] name.resize(1, [value_type] (default)), [void] position.resize(1, [value_type] (default)), [void] velocity.resize(1, [value_type] (default)), [std::basic_string<char>] operator=([std::basic_string<char>] operator[](#name, 0), sdh_finger_21_joint), [double] ([double] operator[](#position, 0))=([double] operator[](#position, 0)), [double] ([double] operator[](#velocity, 0))=([double] operator[](#velocity, 0)), [void] topicPub_JointState_.publish(#mimicjointmsg), [control_msgs::JointTrajectoryControllerState] controllermsg = ([control_msgs::JointTrajectoryControllerState] JointTrajectoryControllerState_()), [ros::Time] operator=(#stamp, #time), [void] joint_names.resize(#DOF_, [value_type] (default)), [void] positions.resize(#DOF_, [value_type] (default)), [void] velocities.resize(#DOF_, [value_type] (default)), [void] positions.resize(#DOF_, [value_type] (default)), [void] velocities.resize(#DOF_, [value_type] (default)), [void] positions.resize(#DOF_, [value_type] (default)), [void] velocities.resize(#DOF_, [value_type] (default)), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#joint_names, #joint_names_), if [([bool] ([size_type] targetAngles_.size())!=(0), [[double] ([double] operator[](#positions, 0))=([double] ([double] ([double] operator[](#targetAngles_, 0))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 1))=([double] ([double] ([double] operator[](#targetAngles_, 3))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 2))=([double] ([double] ([double] operator[](#targetAngles_, 4))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 3))=([double] ([double] ([double] operator[](#targetAngles_, 5))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 4))=([double] ([double] ([double] operator[](#targetAngles_, 6))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 5))=([double] ([double] ([double] operator[](#targetAngles_, 1))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 6))=([double] ([double] ([double] operator[](#targetAngles_, 2))*(#pi_))/(180.0))])], [std::vector<double, std::allocator<double> >] operator=(#positions, #position), [std::vector<double, std::allocator<double> >] operator=(#velocities, #velocity), for [([bool] (#i)<(#DOF_), [[double] ([double] operator[](#positions, #i))=([double] ([double] operator[](#positions, #i))-([double] operator[](#positions, #i))), [double] ([double] operator[](#velocities, #i))=([double] ([double] operator[](#velocities, #i))-([double] operator[](#velocities, #i))), [int] _++(#i)])], [void] topicPub_ControllerState_.publish(#controllermsg), [std::vector<SDH::cSDH::eAxisState, std::allocator<SDH::cSDH::eAxisState> >] operator=(#state_, [std::vector<eAxisState>] sdh_.GetAxisActualState(#axes_))])
PublishTuple(variable='topicPub_ControllerState_', nesting=1, function='updateSdh', line=733, scope=[if [([bool] (#hasNewGoal_)==(True), [[[void] sdh_.Stop()], if [([bool] operator==(#operationMode_, position), [[[void] sdh_.SetAxisTargetAngle(#axes_, #targetAngles_), [double] sdh_.MoveHand(False)]]), (True, [if [([bool] operator==(#operationMode_, velocity), [[[void] sdh_.SetAxisTargetVelocity(#axes_, #velocities_)]]), (True, [if [([bool] operator==(#operationMode_, effort), []), (True, [])]])]])], [bool] (#hasNewGoal_)=(False)])], [std::vector<double>] actualAngles = ([std::vector<double>] vector()), [[std::vector<double, std::allocator<double> >] operator=(#actualAngles, [std::vector<double>] sdh_.GetAxisActualAngle(#axes_))], [std::vector<double>] actualVelocities = ([std::vector<double>] vector()), [[std::vector<double, std::allocator<double> >] operator=(#actualVelocities, [std::vector<double>] sdh_.GetAxisActualVelocity(#axes_))], [ros::Time] time = ([ros::Time] now()), [sensor_msgs::JointState] msg = ([sensor_msgs::JointState] JointState_()), [ros::Time] operator=(#stamp, #time), [void] name.resize(#DOF_, [value_type] (default)), [void] position.resize(#DOF_, [value_type] (default)), [void] velocity.resize(#DOF_, [value_type] (default)), [void] effort.resize(#DOF_, [value_type] (default)), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#name, #joint_names_), [double] ([double] operator[](#position, 0))=([double] ([double] ([double] operator[](#actualAngles, 0))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 1))=([double] ([double] ([double] operator[](#actualAngles, 3))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 2))=([double] ([double] ([double] operator[](#actualAngles, 4))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 3))=([double] ([double] ([double] operator[](#actualAngles, 5))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 4))=([double] ([double] ([double] operator[](#actualAngles, 6))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 5))=([double] ([double] ([double] operator[](#actualAngles, 1))*(#pi_))/(180.0)), [double] ([double] operator[](#position, 6))=([double] ([double] ([double] operator[](#actualAngles, 2))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 0))=([double] ([double] ([double] operator[](#actualVelocities, 0))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 1))=([double] ([double] ([double] operator[](#actualVelocities, 3))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 2))=([double] ([double] ([double] operator[](#actualVelocities, 4))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 3))=([double] ([double] ([double] operator[](#actualVelocities, 5))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 4))=([double] ([double] ([double] operator[](#actualVelocities, 6))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 5))=([double] ([double] ([double] operator[](#actualVelocities, 1))*(#pi_))/(180.0)), [double] ([double] operator[](#velocity, 6))=([double] ([double] ([double] operator[](#actualVelocities, 2))*(#pi_))/(180.0)), [void] topicPub_JointState_.publish(#msg), [sensor_msgs::JointState] mimicjointmsg = ([sensor_msgs::JointState] JointState_()), [ros::Time] operator=(#stamp, #time), [void] name.resize(1, [value_type] (default)), [void] position.resize(1, [value_type] (default)), [void] velocity.resize(1, [value_type] (default)), [std::basic_string<char>] operator=([std::basic_string<char>] operator[](#name, 0), sdh_finger_21_joint), [double] ([double] operator[](#position, 0))=([double] operator[](#position, 0)), [double] ([double] operator[](#velocity, 0))=([double] operator[](#velocity, 0)), [void] topicPub_JointState_.publish(#mimicjointmsg), [control_msgs::JointTrajectoryControllerState] controllermsg = ([control_msgs::JointTrajectoryControllerState] JointTrajectoryControllerState_()), [ros::Time] operator=(#stamp, #time), [void] joint_names.resize(#DOF_, [value_type] (default)), [void] positions.resize(#DOF_, [value_type] (default)), [void] velocities.resize(#DOF_, [value_type] (default)), [void] positions.resize(#DOF_, [value_type] (default)), [void] velocities.resize(#DOF_, [value_type] (default)), [void] positions.resize(#DOF_, [value_type] (default)), [void] velocities.resize(#DOF_, [value_type] (default)), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#joint_names, #joint_names_), if [([bool] ([size_type] targetAngles_.size())!=(0), [[double] ([double] operator[](#positions, 0))=([double] ([double] ([double] operator[](#targetAngles_, 0))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 1))=([double] ([double] ([double] operator[](#targetAngles_, 3))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 2))=([double] ([double] ([double] operator[](#targetAngles_, 4))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 3))=([double] ([double] ([double] operator[](#targetAngles_, 5))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 4))=([double] ([double] ([double] operator[](#targetAngles_, 6))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 5))=([double] ([double] ([double] operator[](#targetAngles_, 1))*(#pi_))/(180.0)), [double] ([double] operator[](#positions, 6))=([double] ([double] ([double] operator[](#targetAngles_, 2))*(#pi_))/(180.0))])], [std::vector<double, std::allocator<double> >] operator=(#positions, #position), [std::vector<double, std::allocator<double> >] operator=(#velocities, #velocity), for [([bool] (#i)<(#DOF_), [[double] ([double] operator[](#positions, #i))=([double] ([double] operator[](#positions, #i))-([double] operator[](#positions, #i))), [double] ([double] operator[](#velocities, #i))=([double] ([double] operator[](#velocities, #i))-([double] operator[](#velocities, #i))), [int] _++(#i)])], [void] topicPub_ControllerState_.publish(#controllermsg), [std::vector<SDH::cSDH::eAxisState, std::allocator<SDH::cSDH::eAxisState> >] operator=(#state_, [std::vector<eAxisState>] sdh_.GetAxisActualState(#axes_))])
PublishTuple(variable='topicPub_Diagnostics_', nesting=0, function='updateSdh', line=768, scope=[void] updateSdh())
AdvertiseTuple(topic='twist_controller/command_twist_stamped', queue_size=1, message_type='geometry_msgs::TwistStamped', nesting=0, variable='twist_pub_', function='SpacenavCommander', line=43, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='twist_pub_', nesting=2, function='joySpacenavCallback', line=95, scope=[[geometry_msgs::TwistStamped] ts = ([geometry_msgs::TwistStamped] TwistStamped_()), [std::basic_string<char>] operator=(#frame_id, #root_frame_), [ros::Time] operator=(#stamp, [ros::Time] now()), [void] twist_pub_.publish(#ts)])
PublishTuple(variable='twist_pub_', nesting=1, function='timerCallback', line=132, scope=[[std::basic_string<char>] operator=(#frame_id, #frame_id_), [ros::Time] operator=(#stamp, [ros::Time] now()), [void] twist_pub_.publish(#ts_)])
AdvertiseTuple(topic=[const std::string] #PUB_INITIAL_POSE, queue_size=1, message_type='geometry_msgs::PoseWithCovarianceStamped', nesting=0, variable='pub_initial_pose_', function='init', line=29, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[const std::string] #PUB_RELATIVE_TARGET_POSE, queue_size=1, message_type='geometry_msgs::PoseStamped', nesting=0, variable='pub_relative_target_pose_', function='init', line=30, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[const std::string] #PUB_SPOTTED_MARKERS, queue_size=1, message_type='std_msgs::String', nesting=0, variable='pub_spotted_markers_', function='init', line=31, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='pub_spotted_markers_', nesting=0, function='spotMarkerPair', line=91, scope=[bool] spotMarkerPair(spotted_markers, pair, left, right))
PublishTuple(variable='pub_initial_pose_', nesting=0, function='computeRelativeRobotPose', line=189, scope=[[tf::StampedTransform] tf_ar_target_pose = ([tf::StampedTransform] new StampedTransform()), [void] tf_listener_.lookupTransform(#target_pose_frame, #global_frame_, [ros::Time] new Time(0), #tf_ar_target_pose), [bool] tf_internal_.setTransform(#tf_ar_target_pose, [const std::string] (default)), [tf::StampedTransform] tf_ar_camera = ([tf::StampedTransform] new StampedTransform()), [std::basic_string<char>] operator=(#child_frame_id_, #target_pose_frame), [void] pose2tf(#pose, #tf_ar_camera), [ros::Time] operator=(#stamp_, [ros::Time] now()), [bool] tf_internal_.setTransform(#tf_ar_camera, [const std::string] (default)), [tf::StampedTransform] tf_camera_base_footprint = ([tf::StampedTransform] new StampedTransform()), [void] tf_listener_.lookupTransform(#base_frame_, #marker_frame_, [ros::Time] new Time(0), #tf_camera_base_footprint), [bool] tf_internal_.setTransform(#tf_camera_base_footprint, [const std::string] (default)), [tf::StampedTransform] tf_ar_base_footprint = ([tf::StampedTransform] new StampedTransform()), [void] tf_internal_.lookupTransform(#global_frame_, #base_frame_, [ros::Time] new Time(0), #tf_ar_base_footprint), [boost::shared_ptr<geometry_msgs::PoseWithCovarianceStamped>] pwcs = ([boost::shared_ptr<geometry_msgs::PoseWithCovarianceStamped>] shared_ptr()), [ros::Time] operator=(#stamp, #stamp_), [std::basic_string<char>] operator=(#frame_id, #global_frame_), [geometry_msgs::PoseStamped] ps = ([geometry_msgs::PoseStamped] PoseStamped_()), [void] tf2pose(#tf_ar_base_footprint, #ps), [geometry_msgs::Pose_<std::allocator<void> >] operator=(#pose, #pose), [double] ([double] operator[](#covariance, [int] ([int] (6)*(0))+(0)))=([double] (0.2)*(0.2)), [double] ([double] operator[](#covariance, [int] ([int] (6)*(1))+(1)))=([double] (0.2)*(0.2)), [double] ([double] operator[](#covariance, [int] ([int] (6)*(5))+(5)))=([double] ([double] ([double] (0.0)[op](12.0))[op](0.0))[op](12.0)), [void] pub_initial_pose_.publish(#pwcs), [void] pub_relative_target_pose_.publish(#pose), if [([bool] #publish_transforms, [[void] tf_brcaster_.sendTransform(#tf_ar_base_footprint)])]])
PublishTuple(variable='pub_relative_target_pose_', nesting=0, function='computeRelativeRobotPose', line=190, scope=[[tf::StampedTransform] tf_ar_target_pose = ([tf::StampedTransform] new StampedTransform()), [void] tf_listener_.lookupTransform(#target_pose_frame, #global_frame_, [ros::Time] new Time(0), #tf_ar_target_pose), [bool] tf_internal_.setTransform(#tf_ar_target_pose, [const std::string] (default)), [tf::StampedTransform] tf_ar_camera = ([tf::StampedTransform] new StampedTransform()), [std::basic_string<char>] operator=(#child_frame_id_, #target_pose_frame), [void] pose2tf(#pose, #tf_ar_camera), [ros::Time] operator=(#stamp_, [ros::Time] now()), [bool] tf_internal_.setTransform(#tf_ar_camera, [const std::string] (default)), [tf::StampedTransform] tf_camera_base_footprint = ([tf::StampedTransform] new StampedTransform()), [void] tf_listener_.lookupTransform(#base_frame_, #marker_frame_, [ros::Time] new Time(0), #tf_camera_base_footprint), [bool] tf_internal_.setTransform(#tf_camera_base_footprint, [const std::string] (default)), [tf::StampedTransform] tf_ar_base_footprint = ([tf::StampedTransform] new StampedTransform()), [void] tf_internal_.lookupTransform(#global_frame_, #base_frame_, [ros::Time] new Time(0), #tf_ar_base_footprint), [boost::shared_ptr<geometry_msgs::PoseWithCovarianceStamped>] pwcs = ([boost::shared_ptr<geometry_msgs::PoseWithCovarianceStamped>] shared_ptr()), [ros::Time] operator=(#stamp, #stamp_), [std::basic_string<char>] operator=(#frame_id, #global_frame_), [geometry_msgs::PoseStamped] ps = ([geometry_msgs::PoseStamped] PoseStamped_()), [void] tf2pose(#tf_ar_base_footprint, #ps), [geometry_msgs::Pose_<std::allocator<void> >] operator=(#pose, #pose), [double] ([double] operator[](#covariance, [int] ([int] (6)*(0))+(0)))=([double] (0.2)*(0.2)), [double] ([double] operator[](#covariance, [int] ([int] (6)*(1))+(1)))=([double] (0.2)*(0.2)), [double] ([double] operator[](#covariance, [int] ([int] (6)*(5))+(5)))=([double] ([double] ([double] (0.0)[op](12.0))[op](0.0))[op](12.0)), [void] pub_initial_pose_.publish(#pwcs), [void] pub_relative_target_pose_.publish(#pose), if [([bool] #publish_transforms, [[void] tf_brcaster_.sendTransform(#tf_ar_base_footprint)])]])
AdvertiseTuple(topic=[std::string] #cmd_topic_vel_, queue_size=1, message_type='ackermann_msgs::AckermannDriveStamped', nesting=0, variable='vel_pub_', function='ROSSetup', line=810, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic='map_location', queue_size=100, message_type='geometry_msgs::TransformStamped', nesting=1, variable='tranform_map_pub_', function='ROSSetup', line=813, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='vel_pub_', nesting=0, function='SetRobotSpeed', line=1382, scope=[void] SetRobotSpeed(speed, angle))
PublishTuple(variable='tranform_map_pub_', nesting=1, function='AllState', line=1428, scope=[[void] listener.lookupTransform(/map, /base_link, [ros::Time] new Time(0), #transform), [geometry_msgs::TransformStamped] msg = ([geometry_msgs::TransformStamped] TransformStamped_()), [void] transformStampedTFToMsg(#transform, #msg), [_x_type] (#x)=(#x), [_y_type] (#y)=(#y), [_theta_type] (#theta)=([double] getYaw(#rotation)), [ros::Time] operator=(#last_map_time, [ros::Time] now()), [ros::Time] operator=(#stamp, #last_map_time), [void] tranform_map_pub_.publish(#msg)])
AdvertiseTuple(topic='joint_states', queue_size=1, message_type='sensor_msgs::JointState', nesting=0, variable='topicPub_JointState_', function='NodeClass', line=159, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_trajectory_controller/state', queue_size=1, message_type='control_msgs::JointTrajectoryControllerState', nesting=0, variable='topicPub_ControllerState_', function='NodeClass', line=160, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='diagnostics', queue_size=1, message_type='diagnostic_msgs::DiagnosticArray', nesting=0, variable='topicPub_Diagnostic_', function='NodeClass', line=161, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='topicPub_JointState_', nesting=1, function='publishJointState', line=509, scope=[[bool] (#isError_)=([bool] CamAxis_.isError()), [int] DOF = (1), [int] CamAxis_.evalCanBuffer(), [int] CamAxis_.getGearPosVelRadS([double *] &(#ActualPos_), [double *] &(#ActualVel_)), [void] m_Joint.requestPosVel(), [double] (#ActualPos_)=([double] (#HomingDir_)*(#ActualPos_)), [double] (#ActualVel_)=([double] (#HomingDir_)*(#ActualVel_)), [sensor_msgs::JointState] msg = ([sensor_msgs::JointState] JointState_()), [ros::Time] operator=(#stamp, [ros::Time] now()), [void] name.resize(#DOF, [value_type] (default)), [void] position.resize(#DOF, [value_type] (default)), [void] velocity.resize(#DOF, [value_type] (default)), [void] effort.resize(#DOF, [value_type] (default)), [std::basic_string<char>] operator=([std::basic_string<char>] operator[](#name, 0), #JointName_), [double] ([double] operator[](#position, 0))=(#ActualPos_), [double] ([double] operator[](#velocity, 0))=(#ActualVel_), [double] ([double] operator[](#effort, 0))=(0.0), [void] topicPub_JointState_.publish(#msg), [control_msgs::JointTrajectoryControllerState] controllermsg = ([control_msgs::JointTrajectoryControllerState] JointTrajectoryControllerState_()), [std_msgs::Header_<std::allocator<void> >] operator=(#header, #header), [void] joint_names.resize(#DOF, [value_type] (default)), [void] positions.resize(#DOF, [value_type] (default)), [void] velocities.resize(#DOF, [value_type] (default)), [void] positions.resize(#DOF, [value_type] (default)), [void] velocities.resize(#DOF, [value_type] (default)), [void] positions.resize(#DOF, [value_type] (default)), [void] velocities.resize(#DOF, [value_type] (default)), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#joint_names, #name), [std::vector<double, std::allocator<double> >] operator=(#positions, #position), [std::vector<double, std::allocator<double> >] operator=(#velocities, #velocity), [std::vector<double, std::allocator<double> >] operator=(#positions, #position), [std::vector<double, std::allocator<double> >] operator=(#velocities, #velocity), for [([bool] (#i)<(#DOF), [[double] ([double] operator[](#positions, #i))=([double] ([double] operator[](#positions, #i))-([double] operator[](#positions, #i))), [double] ([double] operator[](#velocities, #i))=([double] ([double] operator[](#velocities, #i))-([double] operator[](#velocities, #i))), [int] _++(#i)])], [void] topicPub_ControllerState_.publish(#controllermsg)])
PublishTuple(variable='topicPub_ControllerState_', nesting=1, function='publishJointState', line=533, scope=[[bool] (#isError_)=([bool] CamAxis_.isError()), [int] DOF = (1), [int] CamAxis_.evalCanBuffer(), [int] CamAxis_.getGearPosVelRadS([double *] &(#ActualPos_), [double *] &(#ActualVel_)), [void] m_Joint.requestPosVel(), [double] (#ActualPos_)=([double] (#HomingDir_)*(#ActualPos_)), [double] (#ActualVel_)=([double] (#HomingDir_)*(#ActualVel_)), [sensor_msgs::JointState] msg = ([sensor_msgs::JointState] JointState_()), [ros::Time] operator=(#stamp, [ros::Time] now()), [void] name.resize(#DOF, [value_type] (default)), [void] position.resize(#DOF, [value_type] (default)), [void] velocity.resize(#DOF, [value_type] (default)), [void] effort.resize(#DOF, [value_type] (default)), [std::basic_string<char>] operator=([std::basic_string<char>] operator[](#name, 0), #JointName_), [double] ([double] operator[](#position, 0))=(#ActualPos_), [double] ([double] operator[](#velocity, 0))=(#ActualVel_), [double] ([double] operator[](#effort, 0))=(0.0), [void] topicPub_JointState_.publish(#msg), [control_msgs::JointTrajectoryControllerState] controllermsg = ([control_msgs::JointTrajectoryControllerState] JointTrajectoryControllerState_()), [std_msgs::Header_<std::allocator<void> >] operator=(#header, #header), [void] joint_names.resize(#DOF, [value_type] (default)), [void] positions.resize(#DOF, [value_type] (default)), [void] velocities.resize(#DOF, [value_type] (default)), [void] positions.resize(#DOF, [value_type] (default)), [void] velocities.resize(#DOF, [value_type] (default)), [void] positions.resize(#DOF, [value_type] (default)), [void] velocities.resize(#DOF, [value_type] (default)), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#joint_names, #name), [std::vector<double, std::allocator<double> >] operator=(#positions, #position), [std::vector<double, std::allocator<double> >] operator=(#velocities, #velocity), [std::vector<double, std::allocator<double> >] operator=(#positions, #position), [std::vector<double, std::allocator<double> >] operator=(#velocities, #velocity), for [([bool] (#i)<(#DOF), [[double] ([double] operator[](#positions, #i))=([double] ([double] operator[](#positions, #i))-([double] operator[](#positions, #i))), [double] ([double] operator[](#velocities, #i))=([double] ([double] operator[](#velocities, #i))-([double] operator[](#velocities, #i))), [int] _++(#i)])], [void] topicPub_ControllerState_.publish(#controllermsg)])
PublishTuple(variable='topicPub_Diagnostic_', nesting=0, function='publishJointState', line=561, scope=[void] publishJointState())
AdvertiseTuple(topic='nav_ctrl_status', queue_size=1, message_type='yocs_msgs::NavigationControlStatus', nesting=0, variable='status_pub_', function='init', line=51, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=True, param_topic=False, param_queue=False)
PublishTuple(variable='status_pub_', nesting=1, function='publishStatusUpdate', line=384, scope=[[_status_type] (#status)=(#IDLING), [std::basic_string<char>] operator=(#status_desc, Idling), [void] status_pub_.publish(#msg)])
PublishTuple(variable='status_pub_', nesting=2, function='publishStatusUpdate', line=390, scope=[[_status_type] (#status)=(#RUNNING), [std::basic_string<char>] operator=(#status_desc, Navigating to way point.), [void] status_pub_.publish(#msg)])
PublishTuple(variable='status_pub_', nesting=3, function='publishStatusUpdate', line=396, scope=[[_status_type] (#status)=(#PAUSED), [std::basic_string<char>] operator=(#status_desc, Navigation on hold.), [void] status_pub_.publish(#msg)])
PublishTuple(variable='status_pub_', nesting=4, function='publishStatusUpdate', line=402, scope=[[_status_type] (#status)=(#COMPLETED), [std::basic_string<char>] operator=(#status_desc, Reached final destination.), [void] status_pub_.publish(#msg)])
PublishTuple(variable='status_pub_', nesting=5, function='publishStatusUpdate', line=408, scope=[[_status_type] (#status)=(#CANCELLED), [std::basic_string<char>] operator=(#status_desc, Navigation cancelled.), [void] status_pub_.publish(#msg)])
PublishTuple(variable='status_pub_', nesting=6, function='publishStatusUpdate', line=414, scope=[[_status_type] (#status)=(#ERROR), [std::basic_string<char>] operator=(#status_desc, An error occurred.), [void] status_pub_.publish(#msg)])
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=5, message_type='sr_robot_msgs::sendupdate', nesting=0, variable='shadowhand_pub', function='ShadowhandToCybergloveRemapper', line=72, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='shadowhand_pub', nesting=0, function='jointstatesCallback', line=122, scope=[void] jointstatesCallback(msg))
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=5, message_type='sr_robot_msgs::sendupdate', nesting=0, variable='shadowhand_pub', function='ShadowhandToCybergloveRemapper', line=72, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='shadowhand_pub', nesting=0, function='jointstatesCallback', line=122, scope=[void] jointstatesCallback(msg))
AdvertiseTuple(topic='received_messages', queue_size=10, message_type='can_msgs::Frame', nesting=0, variable='can_topic_', function='SocketCANToTopic', line=38, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='can_topic_', nesting=0, function='frameCallback', line=79, scope=[void] frameCallback(f))
AdvertiseTuple(topic=[std::string] #frw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_frw_', function='SummitControllerClass', line=320, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #flw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_flw_', function='SummitControllerClass', line=321, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #blw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_blw_', function='SummitControllerClass', line=322, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #brw_vel_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_vel_brw_', function='SummitControllerClass', line=323, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #frw_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_pos_frw_', function='SummitControllerClass', line=325, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #flw_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_pos_flw_', function='SummitControllerClass', line=326, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #blw_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_pos_blw_', function='SummitControllerClass', line=327, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #brw_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_pos_brw_', function='SummitControllerClass', line=328, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #pan_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_pos_pan_', function='SummitControllerClass', line=330, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic=[std::string] #tilt_pos_topic_, queue_size=50, message_type='std_msgs::Float64', nesting=0, variable='ref_pos_tilt_', function='SummitControllerClass', line=331, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=True, param_queue=False)
AdvertiseTuple(topic='/summit_robot_control/odom', queue_size=1000, message_type='nav_msgs::Odometry', nesting=0, variable='odom_pub_', function='SummitControllerClass', line=341, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='ref_vel_frw_', nesting=0, function='UpdateControl', line=444, scope=[void] UpdateControl())
PublishTuple(variable='ref_vel_flw_', nesting=0, function='UpdateControl', line=445, scope=[void] UpdateControl())
PublishTuple(variable='ref_vel_blw_', nesting=0, function='UpdateControl', line=446, scope=[void] UpdateControl())
PublishTuple(variable='ref_vel_brw_', nesting=0, function='UpdateControl', line=447, scope=[void] UpdateControl())
PublishTuple(variable='ref_pos_frw_', nesting=0, function='UpdateControl', line=448, scope=[void] UpdateControl())
PublishTuple(variable='ref_pos_flw_', nesting=0, function='UpdateControl', line=449, scope=[void] UpdateControl())
PublishTuple(variable='ref_pos_blw_', nesting=0, function='UpdateControl', line=450, scope=[void] UpdateControl())
PublishTuple(variable='ref_pos_brw_', nesting=0, function='UpdateControl', line=451, scope=[void] UpdateControl())
PublishTuple(variable='ref_pos_pan_', nesting=0, function='UpdateControl', line=456, scope=[void] UpdateControl())
PublishTuple(variable='ref_pos_tilt_', nesting=0, function='UpdateControl', line=458, scope=[void] UpdateControl())
PublishTuple(variable='odom_pub_', nesting=0, function='PublishOdometry', line=579, scope=[void] PublishOdometry())
AdvertiseTuple(topic='colorimage_inplane_transform', queue_size=1, message_type='cob_perception_msgs::Float64ArrayStamped', nesting=1, variable='color_camera_image_2d_transform_pub_', function='ImageFlip', line=99, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=False, param_topic=False, param_queue=False)
AdvertiseTuple(topic='pointcloud_out', queue_size=1, message_type='sensor_msgs::PointCloud2', nesting=1, variable='point_cloud_pub_', function='ImageFlip', line=105, overload='advertise(string topic, uint32_t queue_size, SubscriberStatusCallback, SubscriberStatusCallback, VoidConstPtr, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='pointcloud_inplane_transform', queue_size=1, message_type='cob_perception_msgs::Float64ArrayStamped', nesting=1, variable='point_cloud_2d_transform_pub_', function='ImageFlip', line=106, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=False, param_topic=False, param_queue=False)
AdvertiseTuple(topic='disparityimage_out', queue_size=1, message_type='stereo_msgs::DisparityImage', nesting=1, variable='disparity_image_pub_', function='ImageFlip', line=111, overload='advertise(string topic, uint32_t queue_size, SubscriberStatusCallback, SubscriberStatusCallback, VoidConstPtr, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='disparityimage_inplane_transform', queue_size=1, message_type='cob_perception_msgs::Float64ArrayStamped', nesting=1, variable='disparity_image_2d_transform_pub_', function='ImageFlip', line=112, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=False, param_topic=False, param_queue=False)
PublishTuple(variable='color_camera_image_2d_transform_pub_', nesting=0, function='imageCallback', line=357, scope=[void] imageCallback(color_image_msg))
PublishTuple(variable='point_cloud_pub_', nesting=0, function='pcCallback', line=509, scope=[void] pcCallback(point_cloud_msg))
PublishTuple(variable='point_cloud_2d_transform_pub_', nesting=0, function='pcCallback', line=524, scope=[void] pcCallback(point_cloud_msg))
PublishTuple(variable='disparity_image_pub_', nesting=0, function='disparityCallback', line=731, scope=[void] disparityCallback(disparity_image_msg))
PublishTuple(variable='disparity_image_2d_transform_pub_', nesting=0, function='disparityCallback', line=746, scope=[void] disparityCallback(disparity_image_msg))
AdvertiseTuple(topic='colorimage_inplane_transform', queue_size=1, message_type='cob_perception_msgs::Float64ArrayStamped', nesting=1, variable='color_camera_image_2d_transform_pub_', function='ImageFlip', line=99, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=False, param_topic=False, param_queue=False)
AdvertiseTuple(topic='pointcloud_out', queue_size=1, message_type='sensor_msgs::PointCloud2', nesting=1, variable='point_cloud_pub_', function='ImageFlip', line=105, overload='advertise(string topic, uint32_t queue_size, SubscriberStatusCallback, SubscriberStatusCallback, VoidConstPtr, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='pointcloud_inplane_transform', queue_size=1, message_type='cob_perception_msgs::Float64ArrayStamped', nesting=1, variable='point_cloud_2d_transform_pub_', function='ImageFlip', line=106, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=False, param_topic=False, param_queue=False)
AdvertiseTuple(topic='disparityimage_out', queue_size=1, message_type='stereo_msgs::DisparityImage', nesting=1, variable='disparity_image_pub_', function='ImageFlip', line=111, overload='advertise(string topic, uint32_t queue_size, SubscriberStatusCallback, SubscriberStatusCallback, VoidConstPtr, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='disparityimage_inplane_transform', queue_size=1, message_type='cob_perception_msgs::Float64ArrayStamped', nesting=1, variable='disparity_image_2d_transform_pub_', function='ImageFlip', line=112, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=False, param_topic=False, param_queue=False)
PublishTuple(variable='color_camera_image_2d_transform_pub_', nesting=0, function='imageCallback', line=357, scope=[void] imageCallback(color_image_msg))
PublishTuple(variable='point_cloud_pub_', nesting=0, function='pcCallback', line=509, scope=[void] pcCallback(point_cloud_msg))
PublishTuple(variable='point_cloud_2d_transform_pub_', nesting=0, function='pcCallback', line=524, scope=[void] pcCallback(point_cloud_msg))
PublishTuple(variable='disparity_image_pub_', nesting=0, function='disparityCallback', line=731, scope=[void] disparityCallback(disparity_image_msg))
PublishTuple(variable='disparity_image_2d_transform_pub_', nesting=0, function='disparityCallback', line=746, scope=[void] disparityCallback(disparity_image_msg))
PublishTuple(variable='velocity_command_publisher_', nesting=2, function='spin', line=312, scope=[[void] msg_.reset([geometry_msgs::Twist] Twist_()), [_x_type] (#x)=(0.0), [_y_type] (#y)=(0.0), [_z_type] (#z)=(0.0), [_x_type] (#x)=(0.0), [_y_type] (#y)=(0.0), [_z_type] (#z)=(0.0), [void] velocity_command_publisher_.publish(#msg_)])
PublishTuple(variable='velocity_command_publisher_', nesting=3, function='spin', line=323, scope=[[void] msg_.reset([geometry_msgs::Twist] Twist_()), [_x_type] (#x)=([double] -(0.1)), [_y_type] (#y)=(0.0), [_z_type] (#z)=(0.0), [_x_type] (#x)=(0.0), [_y_type] (#y)=(0.0), [_z_type] (#z)=(0.0), [void] velocity_command_publisher_.publish(#msg_)])
PublishTuple(variable='velocity_command_publisher_', nesting=4, function='spin', line=335, scope=[[void] msg_.reset([geometry_msgs::Twist] Twist_()), [_x_type] (#x)=([double] -(0.1)), [_y_type] (#y)=(0.0), [_z_type] (#z)=(0.0), [_x_type] (#x)=(0.0), [_y_type] (#y)=(0.0), [_z_type] (#z)=([double] -(0.4)), [void] velocity_command_publisher_.publish(#msg_)])
PublishTuple(variable='velocity_command_publisher_', nesting=5, function='spin', line=347, scope=[[void] msg_.reset([geometry_msgs::Twist] Twist_()), [_x_type] (#x)=([double] -(0.1)), [_y_type] (#y)=(0.0), [_z_type] (#z)=(0.0), [_x_type] (#x)=(0.0), [_y_type] (#y)=(0.0), [_z_type] (#z)=(0.4), [void] velocity_command_publisher_.publish(#msg_)])
PublishTuple(variable='velocity_command_publisher_', nesting=6, function='spin', line=352, scope=[[void] velocity_command_publisher_.publish(#msg_)])
AdvertiseTuple(topic='cmd_vel', queue_size=10, message_type='geometry_msgs::Twist', nesting=0, variable='velocity_command_publisher_', function='init', line=110, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='cmd_vel', queue_size=1, message_type='geometry_msgs::Twist', nesting=0, variable='cmd_vel_pub_', function='MoveActionServer', line=77, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='cmd_vel_pub_', nesting=1, function='driveForwardOdom', line=150, scope=[[void] cmd_vel_pub_.publish(#base_cmd), [bool] rate.sleep(), [[void] listener_.lookupTransform(#base_frame, #odom_frame, [ros::Time] new Time(0), #current_transform)], [tf::Transform] relative_transform = ([tf::Transform] operator*([tf::Transform] start_transform.inverse(), #current_transform)), [double] dist_moved = ([tfScalar] getOrigin.length()), [_forward_distance_type] (#forward_distance)=(#dist_moved), [_forward_distance_type] (#forward_distance)=(#dist_moved), [void] as_.publishFeedback(#feedback_), if [([bool] ([double] fabs(#dist_moved))>([double] fabs(#distance)), [[bool] (#done)=(True)])]])
PublishTuple(variable='cmd_vel_pub_', nesting=0, function='driveForwardOdom', line=180, scope=[bool] driveForwardOdom(distance))
PublishTuple(variable='cmd_vel_pub_', nesting=1, function='turnOdom', line=231, scope=[[void] cmd_vel_pub_.publish(#base_cmd), [bool] rate.sleep(), [[void] listener_.lookupTransform(#base_frame, #odom_frame, [ros::Time] new Time(0), #current_transform)], [tf::Transform] relative_transform = ([tf::Transform] operator*([tf::Transform] start_transform.inverse(), #current_transform)), [tf::Vector3] actual_turn_axis = ([tf::Vector3] getRotation.getAxis()), [double] angle_turned = ([tfScalar] getRotation.getAngle()), [_turn_distance_type] (#turn_distance)=(#angle_turned), [_turn_distance_type] (#turn_distance)=(#angle_turned), [void] as_.publishFeedback(#feedback_), if [([bool] ([double] fabs(#angle_turned))<(0.01), [continue])], if [([bool] ([double] fabs(#angle_turned))>([double] fabs(#radians)), [[bool] (#done)=(True)])]])
AdvertiseTuple(topic='emergency_stop_state', queue_size=1, message_type='cob_msgs::EmergencyStopState', nesting=0, variable='topicPub_isEmergencyStop', function='NodeClass', line=97, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='voltage', queue_size=1, message_type='std_msgs::Float64', nesting=0, variable='topicPub_Voltage', function='NodeClass', line=98, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='/pick_and_place', queue_size=1, message_type='geometry_msgs::PoseArray', nesting=0, variable='pick_and_place_pub_', function='InteractiveManipulationServer', line=89, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=True, param_topic=False, param_queue=False)
PublishTuple(variable='pick_and_place_pub_', nesting=0, function='moveBlock', line=182, scope=[void] moveBlock(start_pose, end_pose))
AdvertiseTuple(topic='block_output', queue_size=1, message_type='pcl::pcl::struct pcl::PointXYZRGB', nesting=0, variable='pub_', function='BlockDetectionServer', line=100, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='/turtlebot_blocks', queue_size=1, message_type='geometry_msgs::PoseArray', nesting=0, variable='block_pub_', function='BlockDetectionServer', line=102, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=True, param_topic=False, param_queue=False)
PublishTuple(variable='pub_', nesting=0, function='cloudCb', line=215, scope=[void] cloudCb(msg))
PublishTuple(variable='block_pub_', nesting=1, function='cloudCb', line=275, scope=[[void] as_.setSucceeded(#result_, [const std::string] (default)), [void] block_pub_.publish(#blocks)])
AdvertiseTuple(topic='feedback', queue_size=1, message_type='roboteq_msgs::Feedback', nesting=0, variable='pub_feedback_', function='Channel', line=41, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='pub_feedback_', nesting=0, function='feedbackCallback', line=120, scope=[void] feedbackCallback(fields))
AdvertiseTuple(topic='status', queue_size=1, message_type='roboteq_msgs::Status', nesting=0, variable='pub_status_', function='Controller', line=55, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='pub_status_', nesting=0, function='processStatus', line=184, scope=[void] processStatus(str))
PublishTuple(variable='pointcloud_pub_', nesting=0, function='coreSensorCB', line=70, scope=[void] coreSensorCB(msg))
AdvertiseTuple(topic='pointcloud', queue_size=10, message_type='sensor_msgs::PointCloud2', nesting=0, variable='pointcloud_pub_', function='onInit', line=131, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='cmd', queue_size=1, message_type='roboteq_msgs::Command', nesting=0, variable='pub_cmd_', function='RoboteqInterface', line=51, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='pub_cmd_', nesting=0, function='cmdVelocity', line=65, scope=[void] cmdVelocity(vel))
PublishTuple(variable='pub_cmd_', nesting=0, function='cmdBrake', line=94, scope=[void] cmdBrake())
AdvertiseTuple(topic='motors/encoders', queue_size=1, message_type='grizzly_msgs::Drive', nesting=0, variable='pub_encoders_', function='MotorFanout', line=177, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='sensor_msgs::JointState', nesting=0, variable='cyberglove_pub', function='CyberglovePublisher', line=126, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='sensor_msgs::JointState', nesting=0, variable='cyberglove_raw_pub', function='CyberglovePublisher', line=132, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='cyberglove_pub', nesting=1, function='glove_callback', line=236, scope=[[void] position.clear(), [void] velocity.clear(), [void] position.clear(), [void] velocity.clear(), [ros::Time] operator=(#stamp, [ros::Time] now()), for [([bool] (#index_joint)<(#glove_size), [[float] averaged_value = (0.0), for [([bool] (#index_sample)<(#publish_counter_max), [[float] (#averaged_value)+=([float] operator[]([std::vector<float, std::allocator<float> >] operator[](#glove_positions, #index_sample), #index_joint)), [unsigned int] ++(#index_sample)])], [float] (#averaged_value)/=(#publish_counter_max), [void] position.push_back(#averaged_value), [void] add_jointstate(#averaged_value, [std::string] basic_string()), [unsigned int] ++(#index_joint)])], [void] cyberglove_pub.publish(#jointstate_msg), [void] cyberglove_raw_pub.publish(#jointstate_raw_msg), [unsigned int] (#publish_counter_index)=(0), [void] glove_positions.clear()])
PublishTuple(variable='cyberglove_raw_pub', nesting=1, function='glove_callback', line=237, scope=[[void] position.clear(), [void] velocity.clear(), [void] position.clear(), [void] velocity.clear(), [ros::Time] operator=(#stamp, [ros::Time] now()), for [([bool] (#index_joint)<(#glove_size), [[float] averaged_value = (0.0), for [([bool] (#index_sample)<(#publish_counter_max), [[float] (#averaged_value)+=([float] operator[]([std::vector<float, std::allocator<float> >] operator[](#glove_positions, #index_sample), #index_joint)), [unsigned int] ++(#index_sample)])], [float] (#averaged_value)/=(#publish_counter_max), [void] position.push_back(#averaged_value), [void] add_jointstate(#averaged_value, [std::string] basic_string()), [unsigned int] ++(#index_joint)])], [void] cyberglove_pub.publish(#jointstate_msg), [void] cyberglove_raw_pub.publish(#jointstate_raw_msg), [unsigned int] (#publish_counter_index)=(0), [void] glove_positions.clear()])
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='sensor_msgs::JointState', nesting=0, variable='cyberglove_pub', function='CyberglovePublisher', line=126, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[std::string] #full_topic, queue_size=2, message_type='sensor_msgs::JointState', nesting=0, variable='cyberglove_raw_pub', function='CyberglovePublisher', line=132, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='cyberglove_pub', nesting=1, function='glove_callback', line=236, scope=[[void] position.clear(), [void] velocity.clear(), [void] position.clear(), [void] velocity.clear(), [ros::Time] operator=(#stamp, [ros::Time] now()), for [([bool] (#index_joint)<(#glove_size), [[float] averaged_value = (0.0), for [([bool] (#index_sample)<(#publish_counter_max), [[float] (#averaged_value)+=([float] operator[]([std::vector<float, std::allocator<float> >] operator[](#glove_positions, #index_sample), #index_joint)), [unsigned int] ++(#index_sample)])], [float] (#averaged_value)/=(#publish_counter_max), [void] position.push_back(#averaged_value), [void] add_jointstate(#averaged_value, [std::string] basic_string()), [unsigned int] ++(#index_joint)])], [void] cyberglove_pub.publish(#jointstate_msg), [void] cyberglove_raw_pub.publish(#jointstate_raw_msg), [unsigned int] (#publish_counter_index)=(0), [void] glove_positions.clear()])
PublishTuple(variable='cyberglove_raw_pub', nesting=1, function='glove_callback', line=237, scope=[[void] position.clear(), [void] velocity.clear(), [void] position.clear(), [void] velocity.clear(), [ros::Time] operator=(#stamp, [ros::Time] now()), for [([bool] (#index_joint)<(#glove_size), [[float] averaged_value = (0.0), for [([bool] (#index_sample)<(#publish_counter_max), [[float] (#averaged_value)+=([float] operator[]([std::vector<float, std::allocator<float> >] operator[](#glove_positions, #index_sample), #index_joint)), [unsigned int] ++(#index_sample)])], [float] (#averaged_value)/=(#publish_counter_max), [void] position.push_back(#averaged_value), [void] add_jointstate(#averaged_value, [std::string] basic_string()), [unsigned int] ++(#index_joint)])], [void] cyberglove_pub.publish(#jointstate_msg), [void] cyberglove_raw_pub.publish(#jointstate_raw_msg), [unsigned int] (#publish_counter_index)=(0), [void] glove_positions.clear()])
AdvertiseTuple(topic='odometry/gps', queue_size=10, message_type='nav_msgs::Odometry', nesting=0, variable='gpsOdomPub', function='run', line=363, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='gpsOdomPub', nesting=4, function='run', line=393, scope=[[void] gpsOdomPub.publish(#gpsOdom)])
PublishTuple(variable='smooth_vel_pub', nesting=2, function='spin', line=273, scope=[[void] cmd_vel.reset([geometry_msgs::Twist] Twist_()), [double] vx_inc = (None), [double] (#vx_inc)=([double] (#x)-(#x)), if [([bool] ([bool] (#robot_feedback)==(#ODOMETRY))&&([bool] ([double] (#x)*(#x))<(0.0)), [[double] (#max_vx_inc)=([double] (#decel_vx)*(#period))]), (True, [[double] (#max_vx_inc)=([double] ([bool] ([double] (#vx_inc)*(#x))>(0.0))*(#period))])], [double] (#vy_inc)=([double] (#y)-(#y)), if [([bool] ([bool] (#robot_feedback)==(#ODOMETRY))&&([bool] ([double] (#y)*(#y))<(0.0)), [[double] (#max_vy_inc)=([double] (#decel_vy)*(#period))]), (True, [[double] (#max_vy_inc)=([double] ([bool] ([double] (#vy_inc)*(#x))>(0.0))*(#period))])], [double] (#w_inc)=([double] (#z)-(#z)), if [([bool] ([bool] (#robot_feedback)==(#ODOMETRY))&&([bool] ([double] (#z)*(#z))<(0.0)), [[double] (#max_w_inc)=([double] (#decel_w)*(#period))]), (True, [[double] (#max_w_inc)=([double] ([bool] ([double] (#w_inc)*(#z))>(0.0))*(#period))])], if [([bool] ([double] abs(#vx_inc))>(#max_vx_inc), [[_x_type] (#x)=([double] (#x)+([double] ([double] sign(#vx_inc))*(#max_vx_inc)))])], if [([bool] ([double] abs(#vy_inc))>(#max_vy_inc), [[_y_type] (#y)=([double] (#y)+([double] ([double] sign(#vy_inc))*(#max_vy_inc)))])], if [([bool] ([double] abs(#w_inc))>(#max_w_inc), [[_z_type] (#z)=([double] (#z)+([double] ([double] sign(#w_inc))*(#max_w_inc)))])], [void] smooth_vel_pub.publish(#cmd_vel), [geometry_msgs::Twist_<std::allocator<void> >] operator=(#last_cmd_vel, [geometry_msgs::Twist_<std::allocator<void> >] operator*(#cmd_vel))])
PublishTuple(variable='smooth_vel_pub', nesting=3, function='spin', line=280, scope=[[void] cmd_vel.reset([geometry_msgs::Twist] Twist_()), [void] smooth_vel_pub.publish(#cmd_vel)])
AdvertiseTuple(topic='smooth_cmd_vel', queue_size=1, message_type='geometry_msgs::Twist', nesting=0, variable='smooth_vel_pub', function='init', line=346, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='input', queue_size=100, message_type='GripperInput', nesting=0, variable='pub', function='main', line=68, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='pub', nesting=1, function='main', line=75, scope=[[SModelEtherCatClient::GripperInput] input = ([SModelEtherCatClient::GripperInput] client.readInputs()), [void] pub.publish(#input), [void] spinOnce(), [bool] rate.sleep()])
AdvertiseTuple(topic='update_ar_pairs', queue_size=1, message_type='yocs_msgs::ARPairList', nesting=0, variable='pub_update_ar_pair_', function='ARPairTrackingClient', line=13, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=True, param_topic=False, param_queue=False)
PublishTuple(variable='pub_update_ar_pair_', nesting=0, function='notifyARPairTracker', line=82, scope=[void] notifyARPairTracker())
AdvertiseTuple(topic='output', queue_size=1, message_type='GripperOutput', nesting=0, variable='goal_pub_', function='CModelGripperActionServer', line=102, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='goal_pub_', nesting=0, function='goalCB', line=126, scope=[[robotiq_c_model_control::CModel_robot_output_<std::allocator<void> >] operator=(#goal_reg_state_, [GripperOutput] goalToRegisterState(#current_goal, #gripper_params_)), [void] goal_pub_.publish(#goal_reg_state_)])
PublishTuple(variable='goal_pub_', nesting=0, function='issueActivation', line=194, scope=[void] issueActivation())
AdvertiseTuple(topic='out/joint_angles', queue_size=2, message_type='kinova_msgs::JointAngles', nesting=0, variable='joint_angles_publisher_', function='KinovaArm', line=131, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='out/joint_state', queue_size=2, message_type='sensor_msgs::JointState', nesting=0, variable='joint_state_publisher_', function='KinovaArm', line=132, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='out/tool_pose', queue_size=2, message_type='geometry_msgs::PoseStamped', nesting=0, variable='tool_position_publisher_', function='KinovaArm', line=133, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='out/tool_wrench', queue_size=2, message_type='geometry_msgs::WrenchStamped', nesting=0, variable='tool_wrench_publisher_', function='KinovaArm', line=134, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='out/finger_position', queue_size=2, message_type='kinova_msgs::FingerPosition', nesting=0, variable='finger_position_publisher_', function='KinovaArm', line=135, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='out/joint_command', queue_size=2, message_type='kinova_msgs::JointAngles', nesting=0, variable='joint_command_publisher_', function='KinovaArm', line=138, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='out/cartesian_command', queue_size=2, message_type='kinova_msgs::KinovaPose', nesting=0, variable='cartesian_command_publisher_', function='KinovaArm', line=139, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='joint_angles_publisher_', nesting=0, function='publishJointAngles', line=421, scope=[void] publishJointAngles())
PublishTuple(variable='joint_command_publisher_', nesting=0, function='publishJointAngles', line=422, scope=[void] publishJointAngles())
PublishTuple(variable='joint_state_publisher_', nesting=0, function='publishJointAngles', line=423, scope=[void] publishJointAngles())
PublishTuple(variable='tool_position_publisher_', nesting=0, function='publishToolPosition', line=445, scope=[void] publishToolPosition())
PublishTuple(variable='cartesian_command_publisher_', nesting=0, function='publishToolPosition', line=446, scope=[void] publishToolPosition())
PublishTuple(variable='tool_wrench_publisher_', nesting=0, function='publishToolWrench', line=471, scope=[void] publishToolWrench())
PublishTuple(variable='finger_position_publisher_', nesting=0, function='publishFingerPosition', line=481, scope=[void] publishFingerPosition())
AdvertiseTuple(topic='cmd_vel', queue_size=10, message_type='geometry_msgs::Twist', nesting=0, variable='velocity_command_publisher_', function='init', line=53, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='velocity_command_publisher_', nesting=2, function='spinOnce', line=112, scope=[[void] cmd_vel_msg_.reset([geometry_msgs::Twist] Twist_()), [_x_type] (#x)=([double] -(#reversing_velocity_)), [_y_type] (#y)=(0.0), [_z_type] (#z)=(0.0), [_x_type] (#x)=(0.0), [_y_type] (#y)=(0.0), [_z_type] (#z)=(0.0), [void] velocity_command_publisher_.publish(#cmd_vel_msg_)])
PublishTuple(variable='velocity_command_publisher_', nesting=2, function='spinOnce', line=127, scope=[[void] cmd_vel_msg_.reset([geometry_msgs::Twist] Twist_()), [_x_type] (#x)=(0.0), [_y_type] (#y)=(0.0), [_z_type] (#z)=(0.0), [_x_type] (#x)=(0.0), [_y_type] (#y)=(0.0), [_z_type] (#z)=(0.0), [void] velocity_command_publisher_.publish(#cmd_vel_msg_), [bool] (#obstacle_detected_)=(False), if [([bool] #reverse_, [[bool] (#reversing_)=(True), [ros::Time] operator=(#reversing_start_, [ros::Time] now())])]])
AdvertiseTuple(topic='cartesian_controller/preview_path', queue_size=1, message_type='visualization_msgs::MarkerArray', nesting=0, variable='marker_pub_', function='CartesianControllerUtils', line=48, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='cartesian_controller/preview_path', queue_size=1, message_type='visualization_msgs::MarkerArray', nesting=0, variable='marker_pub_', function='CartesianControllerUtils', line=48, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='cartesian_controller/preview_path', queue_size=1, message_type='visualization_msgs::MarkerArray', nesting=0, variable='marker_pub_', function='CartesianControllerUtils', line=48, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='cartesian_controller/preview_path', queue_size=1, message_type='visualization_msgs::MarkerArray', nesting=0, variable='marker_pub_', function='CartesianControllerUtils', line=48, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='cartesian_controller/preview_path', queue_size=1, message_type='visualization_msgs::MarkerArray', nesting=0, variable='marker_pub_', function='CartesianControllerUtils', line=48, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='cartesian_controller/preview_path', queue_size=1, message_type='visualization_msgs::MarkerArray', nesting=0, variable='marker_pub_', function='CartesianControllerUtils', line=48, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='cartesian_controller/preview_path', queue_size=1, message_type='visualization_msgs::MarkerArray', nesting=0, variable='marker_pub_', function='CartesianControllerUtils', line=48, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='rgb_cloud_out', queue_size=1, message_type='tPointCloud', nesting=0, variable='rgb_cloud_pub_', function='onInit', line=100, overload='advertise(string topic, uint32_t queue_size, SubscriberStatusCallback, SubscriberStatusCallback, VoidConstPtr, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='rgb_image_out', queue_size=1, message_type='tImage', nesting=0, variable='rgb_image_pub_', function='onInit', line=101, overload='advertise(string topic, uint32_t queue_size, SubscriberStatusCallback, SubscriberStatusCallback, VoidConstPtr, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='rgb_caminfo_out', queue_size=1, message_type='tCameraInfo', nesting=0, variable='rgb_caminfo_pub_', function='onInit', line=102, overload='advertise(string topic, uint32_t queue_size, SubscriberStatusCallback, SubscriberStatusCallback, VoidConstPtr, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='depth_image_out', queue_size=1, message_type='tImage', nesting=0, variable='depth_image_pub_', function='onInit', line=103, overload='advertise(string topic, uint32_t queue_size, SubscriberStatusCallback, SubscriberStatusCallback, VoidConstPtr, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='cloud_out', queue_size=1, message_type='tPointCloud', nesting=0, variable='cloud_pub_', function='onInit', line=104, overload='advertise(string topic, uint32_t queue_size, SubscriberStatusCallback, SubscriberStatusCallback, VoidConstPtr, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='rgb_cloud_pub_', nesting=0, function='callback', line=162, scope=[void] callback(rgb_cloud, rgb_image, rgb_caminfo))
PublishTuple(variable='rgb_image_pub_', nesting=0, function='callback', line=163, scope=[void] callback(rgb_cloud, rgb_image, rgb_caminfo))
PublishTuple(variable='rgb_caminfo_pub_', nesting=0, function='callback', line=164, scope=[void] callback(rgb_cloud, rgb_image, rgb_caminfo))
AdvertiseTuple(topic='cmd_vel', queue_size=1, message_type='geometry_msgs::Twist', nesting=0, variable='velocity_publisher_', function='init', line=114, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='motor_power', queue_size=1, message_type='kobuki_msgs::MotorPower', nesting=0, variable='motor_power_publisher_', function='init', line=115, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='motor_power_publisher_', nesting=1, function='init', line=174, scope=[[kobuki_msgs::MotorPower] power_cmd = ([kobuki_msgs::MotorPower] MotorPower_()), [_state_type] (#state)=(#ON), [void] motor_power_publisher_.publish(#power_cmd), [bool] (#power_status)=(True)])
PublishTuple(variable='velocity_publisher_', nesting=2, function='spin', line=203, scope=[[void] velocity_publisher_.publish(#cmd), [bool] (#last_zero_vel_sent)=(False)])
PublishTuple(variable='velocity_publisher_', nesting=3, function='spin', line=208, scope=[[void] velocity_publisher_.publish(#cmd), [bool] (#last_zero_vel_sent)=(True)])
PublishTuple(variable='velocity_publisher_', nesting=0, function='disable', line=355, scope=[void] disable())
PublishTuple(variable='motor_power_publisher_', nesting=1, function='disable', line=363, scope=[[kobuki_msgs::MotorPower] power_cmd = ([kobuki_msgs::MotorPower] MotorPower_()), [_state_type] (#state)=(#OFF), [void] motor_power_publisher_.publish(#power_cmd), [bool] (#power_status)=(False)])
PublishTuple(variable='velocity_publisher_', nesting=0, function='enable', line=384, scope=[void] enable())
PublishTuple(variable='motor_power_publisher_', nesting=1, function='enable', line=391, scope=[[kobuki_msgs::MotorPower] power_cmd = ([kobuki_msgs::MotorPower] MotorPower_()), [_state_type] (#state)=(#ON), [void] motor_power_publisher_.publish(#power_cmd), [bool] (#power_status)=(True)])
AdvertiseTuple(topic=[basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+(#effort_ctrl, /command), queue_size=5, message_type='std_msgs::Float64', nesting=0, variable='effort_pub_', function='run_test', line=161, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=True, param_topic=False, param_queue=False)
PublishTuple(variable='effort_pub_', nesting=1, function='run_test', line=171, scope=[[void] effort_pub_.publish(#target), [bool] rate.sleep(), [unsigned int] ++(#i)])
PublishTuple(variable='effort_pub_', nesting=1, function='run_test', line=180, scope=[[void] effort_pub_.publish(#target), [bool] rate.sleep(), [unsigned int] ++(#i)])
PublishTuple(variable='effort_pub_', nesting=1, function='run_test', line=189, scope=[[void] effort_pub_.publish(#target), [bool] rate.sleep(), [unsigned int] ++(#i)])
AdvertiseTuple(topic='input', queue_size=100, message_type='GripperInput', nesting=0, variable='pub', function='main', line=68, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='pub', nesting=1, function='main', line=75, scope=[[CModelEtherCatClient::GripperInput] input = ([CModelEtherCatClient::GripperInput] client.readInputs()), [void] pub.publish(#input), [void] spinOnce(), [bool] rate.sleep()])
AdvertiseTuple(topic='current_pos', queue_size=1, message_type='aubo_msgs::JointPos', nesting=0, variable='state_pub', function='main', line=118, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='state_pub', nesting=2, function='main', line=134, scope=[[_joint1_type] (#joint1)=([float] read_joint_position(1)), [_joint2_type] (#joint2)=([float] read_joint_position(2)), [_joint3_type] (#joint3)=([float] read_joint_position(3)), [_joint4_type] (#joint4)=([float] read_joint_position(4)), [_joint5_type] (#joint5)=([float] read_joint_position(5)), [_joint6_type] (#joint6)=([float] read_joint_position(6)), [void] state_pub.publish(#joint_pos)])
PublishTuple(variable='cmd_pub', nesting=0, function='chatterCallback1', line=18, scope=[void] chatterCallback1(msg))
AdvertiseTuple(topic='movej_cmd', queue_size=1, message_type='std_msgs::Float32MultiArray', nesting=0, variable='cmd_pub', function='main', line=33, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_states', queue_size=1, message_type='sensor_msgs::JointState', nesting=0, variable='joint_pub', function='main', line=25, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='joint_pub', nesting=1, function='main', line=78, scope=[[ros::Time] operator=(#stamp, [ros::Time] now()), [void] name.resize(6, [value_type] (default)), [void] position.resize(6, [value_type] (default)), [std::basic_string<char>] operator=([std::basic_string<char>] operator[](#name, 0), shoulder_joint), [double] ([double] operator[](#position, 0))=(#joint1), [std::basic_string<char>] operator=([std::basic_string<char>] operator[](#name, 1), upperArm_joint), [double] ([double] operator[](#position, 1))=(#joint2), [std::basic_string<char>] operator=([std::basic_string<char>] operator[](#name, 2), foreArm_joint), [double] ([double] operator[](#position, 2))=(#joint3), [std::basic_string<char>] operator=([std::basic_string<char>] operator[](#name, 3), wrist1_joint), [double] ([double] operator[](#position, 3))=(#joint4), [std::basic_string<char>] operator=([std::basic_string<char>] operator[](#name, 4), wrist2_joint), [double] ([double] operator[](#position, 4))=(#joint5), [std::basic_string<char>] operator=([std::basic_string<char>] operator[](#name, 5), wrist3_joint), [double] ([double] operator[](#position, 5))=(#joint6), [ros::Time] operator=(#stamp, [ros::Time] now()), [_x_type] (#x)=([double] cos(#angle)), [_y_type] (#y)=([double] sin(#angle)), [_z_type] (#z)=(0.0), [geometry_msgs::Quaternion_<std::allocator<void> >] operator=(#rotation, [geometry_msgs::Quaternion] createQuaternionMsgFromYaw(#angle)), [void] joint_pub.publish(#joint_state), [double] (#wrist3_wrist2)+=(#wrist3_wrist2_inc), if [([bool] ([bool] (#wrist3_wrist2)<([double] -(3.05)))||([bool] (#wrist3_wrist2)>(3.05)), [[double] (#wrist3_wrist2_inc)*=([int] -(1))])], [double] (#wrist2_wrist1)+=(#wrist2_wrist1_inc), if [([bool] ([bool] (#wrist2_wrist1)<([double] -(1.5)))||([bool] (#wrist2_wrist1)>(1.5)), [[double] (#wrist2_wrist1_inc)*=([int] -(1))])], [double] (#wrist1_fore)+=(#wrist1_fore_inc), if [([bool] ([bool] (#wrist1_fore)<([double] -(1.5)))||([bool] (#wrist1_fore)>(1.5)), [[double] (#wrist1_fore_inc)*=([int] -(1))])], [double] (#fore_upper)+=(#fore_upper_inc), if [([bool] ([bool] (#fore_upper)<([double] -(1.5)))||([bool] (#fore_upper)>(1.5)), [[double] (#fore_upper_inc)*=([int] -(1))])], [double] (#upper_shoulder)+=(#upper_shoulder_inc), if [([bool] ([bool] (#upper_shoulder)<([double] -(1.5)))||([bool] (#upper_shoulder)>(1.5)), [[double] (#upper_shoulder_inc)*=([int] -(1))])], [double] (#shoulder)+=(#shoulder_inc), if [([bool] ([bool] (#shoulder)<([double] -(3.05)))||([bool] (#shoulder)>(3.05)), [[double] (#shoulder_inc)*=([int] -(1))])], [bool] loop_rate.sleep(), [void] spinOnce()])
AdvertiseTuple(topic='joint_group_velocity_controller/command', queue_size=1, message_type='std_msgs::Float64MultiArray', nesting=0, variable='joint_vel_pub_', function='cob_trajectory_controller_node', line=117, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='joint_vel_pub_', nesting=2, function='run', line=426, scope=[if [([bool] !(#isMoving), [[bool] (#executing_)=(False), [bool] (#preemted_)=(False)])], [std_msgs::Float64MultiArray] target_joint_vel = ([std_msgs::Float64MultiArray] Float64MultiArray_()), for [([bool] (#i)<(#DOF), [[void] data.push_back([double] des_vel.at(#i)), [int] _++(#i)])], [void] joint_vel_pub_.publish(#target_joint_vel)])
PublishTuple(variable='joint_vel_pub_', nesting=2, function='run', line=444, scope=[[std_msgs::Float64MultiArray] target_joint_vel = ([std_msgs::Float64MultiArray] Float64MultiArray_()), for [([bool] (#i)<(#DOF), [[void] data.push_back(0.0), [int] _++(#i)])], [void] joint_vel_pub_.publish(#target_joint_vel)])
AdvertiseTuple(topic='joint_states', queue_size=1, message_type='sensor_msgs::JointState', nesting=0, variable='topicPub_JointState_', function='PowerCubeChainNode', line=138, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_trajectory_controller/state', queue_size=1, message_type='control_msgs::JointTrajectoryControllerState', nesting=0, variable='topicPub_ControllerState_', function='PowerCubeChainNode', line=139, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='diagnostics', queue_size=1, message_type='diagnostic_msgs::DiagnosticArray', nesting=0, variable='topicPub_Diagnostic_', function='PowerCubeChainNode', line=140, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='driver/current_operationmode', queue_size=1, message_type='std_msgs::String', nesting=0, variable='topicPub_OperationMode_', function='PowerCubeChainNode', line=151, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='topicPub_JointState_', nesting=1, function='publishState', line=648, scope=[if [([bool] #update, [[bool] pc_ctrl_.updateStates()])], [sensor_msgs::JointState] joint_state_msg = ([sensor_msgs::JointState] JointState_()), [ros::Time] operator=(#stamp, [ros::Time] now()), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#name, [std::vector<std::string>] pc_params_.GetJointNames()), [std::vector<double, std::allocator<double> >] operator=(#position, [std::vector<double>] pc_ctrl_.getPositions()), [std::vector<double, std::allocator<double> >] operator=(#velocity, [std::vector<double>] pc_ctrl_.getVelocities()), [void] effort.resize([int] pc_params_.GetDOF(), [value_type] (default)), [control_msgs::JointTrajectoryControllerState] controller_state_msg = ([control_msgs::JointTrajectoryControllerState] JointTrajectoryControllerState_()), [ros::Time] operator=(#stamp, #stamp), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#joint_names, [std::vector<std::string>] pc_params_.GetJointNames()), [std::vector<double, std::allocator<double> >] operator=(#positions, [std::vector<double>] pc_ctrl_.getPositions()), [std::vector<double, std::allocator<double> >] operator=(#velocities, [std::vector<double>] pc_ctrl_.getVelocities()), [std::vector<double, std::allocator<double> >] operator=(#accelerations, [std::vector<double>] pc_ctrl_.getAccelerations()), [std_msgs::String] opmode_msg = ([std_msgs::String] String_()), [std::basic_string<char>] operator=(#data, velocity), [void] topicPub_JointState_.publish(#joint_state_msg), [void] topicPub_ControllerState_.publish(#controller_state_msg), [void] topicPub_OperationMode_.publish(#opmode_msg), [ros::Time] operator=(#last_publish_time_, #stamp)])
PublishTuple(variable='topicPub_ControllerState_', nesting=1, function='publishState', line=649, scope=[if [([bool] #update, [[bool] pc_ctrl_.updateStates()])], [sensor_msgs::JointState] joint_state_msg = ([sensor_msgs::JointState] JointState_()), [ros::Time] operator=(#stamp, [ros::Time] now()), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#name, [std::vector<std::string>] pc_params_.GetJointNames()), [std::vector<double, std::allocator<double> >] operator=(#position, [std::vector<double>] pc_ctrl_.getPositions()), [std::vector<double, std::allocator<double> >] operator=(#velocity, [std::vector<double>] pc_ctrl_.getVelocities()), [void] effort.resize([int] pc_params_.GetDOF(), [value_type] (default)), [control_msgs::JointTrajectoryControllerState] controller_state_msg = ([control_msgs::JointTrajectoryControllerState] JointTrajectoryControllerState_()), [ros::Time] operator=(#stamp, #stamp), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#joint_names, [std::vector<std::string>] pc_params_.GetJointNames()), [std::vector<double, std::allocator<double> >] operator=(#positions, [std::vector<double>] pc_ctrl_.getPositions()), [std::vector<double, std::allocator<double> >] operator=(#velocities, [std::vector<double>] pc_ctrl_.getVelocities()), [std::vector<double, std::allocator<double> >] operator=(#accelerations, [std::vector<double>] pc_ctrl_.getAccelerations()), [std_msgs::String] opmode_msg = ([std_msgs::String] String_()), [std::basic_string<char>] operator=(#data, velocity), [void] topicPub_JointState_.publish(#joint_state_msg), [void] topicPub_ControllerState_.publish(#controller_state_msg), [void] topicPub_OperationMode_.publish(#opmode_msg), [ros::Time] operator=(#last_publish_time_, #stamp)])
PublishTuple(variable='topicPub_OperationMode_', nesting=1, function='publishState', line=650, scope=[if [([bool] #update, [[bool] pc_ctrl_.updateStates()])], [sensor_msgs::JointState] joint_state_msg = ([sensor_msgs::JointState] JointState_()), [ros::Time] operator=(#stamp, [ros::Time] now()), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#name, [std::vector<std::string>] pc_params_.GetJointNames()), [std::vector<double, std::allocator<double> >] operator=(#position, [std::vector<double>] pc_ctrl_.getPositions()), [std::vector<double, std::allocator<double> >] operator=(#velocity, [std::vector<double>] pc_ctrl_.getVelocities()), [void] effort.resize([int] pc_params_.GetDOF(), [value_type] (default)), [control_msgs::JointTrajectoryControllerState] controller_state_msg = ([control_msgs::JointTrajectoryControllerState] JointTrajectoryControllerState_()), [ros::Time] operator=(#stamp, #stamp), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#joint_names, [std::vector<std::string>] pc_params_.GetJointNames()), [std::vector<double, std::allocator<double> >] operator=(#positions, [std::vector<double>] pc_ctrl_.getPositions()), [std::vector<double, std::allocator<double> >] operator=(#velocities, [std::vector<double>] pc_ctrl_.getVelocities()), [std::vector<double, std::allocator<double> >] operator=(#accelerations, [std::vector<double>] pc_ctrl_.getAccelerations()), [std_msgs::String] opmode_msg = ([std_msgs::String] String_()), [std::basic_string<char>] operator=(#data, velocity), [void] topicPub_JointState_.publish(#joint_state_msg), [void] topicPub_ControllerState_.publish(#controller_state_msg), [void] topicPub_OperationMode_.publish(#opmode_msg), [ros::Time] operator=(#last_publish_time_, #stamp)])
PublishTuple(variable='topicPub_Diagnostic_', nesting=0, function='publishState', line=698, scope=[void] publishState(update))
AdvertiseTuple(topic='waypoints', queue_size=5, message_type='yocs_msgs::WaypointList', nesting=0, variable='waypoints_pub_', function='WaypointProvider', line=21, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=True, param_topic=False, param_queue=False)
AdvertiseTuple(topic='trajectories', queue_size=5, message_type='yocs_msgs::TrajectoryList', nesting=0, variable='trajectories_pub_', function='WaypointProvider', line=22, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=True, param_topic=False, param_queue=False)
AdvertiseTuple(topic='waypoint_markers', queue_size=5, message_type='visualization_msgs::MarkerArray', nesting=0, variable='waypoints_marker_pub_', function='WaypointProvider', line=23, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=True, param_topic=False, param_queue=False)
AdvertiseTuple(topic='trajectory_markers', queue_size=5, message_type='visualization_msgs::MarkerArray', nesting=0, variable='trajectory_marker_pub_', function='WaypointProvider', line=24, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=True, param_topic=False, param_queue=False)
PublishTuple(variable='waypoints_pub_', nesting=0, function='spin', line=165, scope=[void] spin())
PublishTuple(variable='trajectories_pub_', nesting=0, function='spin', line=166, scope=[void] spin())
PublishTuple(variable='waypoints_marker_pub_', nesting=0, function='spin', line=167, scope=[void] spin())
PublishTuple(variable='trajectory_marker_pub_', nesting=0, function='spin', line=168, scope=[void] spin())
PublishTuple(variable='active_subscriber', nesting=2, function='cmdVelCallback', line=51, scope=[[unsigned int] (#allowed)=(#idx), [std_msgs::StringPtr] acv_msg = ([std_msgs::StringPtr] shared_ptr()), [std::basic_string<char>] operator=(#data, #name), [void] active_subscriber.publish(#acv_msg)])
PublishTuple(variable='mux_cmd_vel_pub', nesting=1, function='cmdVelCallback', line=54, scope=[if [([bool] (#allowed)!=(#idx), [[unsigned int] (#allowed)=(#idx), [std_msgs::StringPtr] acv_msg = ([std_msgs::StringPtr] shared_ptr()), [std::basic_string<char>] operator=(#data, #name), [void] active_subscriber.publish(#acv_msg)])], [void] mux_cmd_vel_pub.publish(#msg)])
PublishTuple(variable='active_subscriber', nesting=1, function='timerCallback', line=68, scope=[[unsigned int] (#allowed)=([unsigned int] max()), [std_msgs::StringPtr] acv_msg = ([std_msgs::StringPtr] shared_ptr()), [std::basic_string<char>] operator=(#data, idle), [void] active_subscriber.publish(#acv_msg)])
AdvertiseTuple(topic='active', queue_size=1, message_type='std_msgs::String', nesting=0, variable='active_subscriber', function='onInit', line=85, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=True, param_topic=False, param_queue=False)
PublishTuple(variable='active_subscriber', nesting=0, function='onInit', line=90, scope=[void] onInit())
AdvertiseTuple(topic=[std::string] #output_name, queue_size=10, message_type='geometry_msgs::Twist', nesting=0, variable='mux_cmd_vel_pub', function='reloadConfiguration', line=143, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='cmd_vel', queue_size=1, message_type='geometry_msgs::Twist', nesting=0, variable='velocity_publisher_', function='init', line=69, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='enable_motors', queue_size=1, message_type='std_msgs::String', nesting=0, variable='enable_motors_publisher_', function='init', line=70, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='disable_motors', queue_size=1, message_type='std_msgs::String', nesting=0, variable='disable_motors_publisher_', function='init', line=71, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='enable_motors_publisher_', nesting=1, function='init', line=131, scope=[[std_msgs::String] msg = ([std_msgs::String] String_()), [std::basic_string<char>] operator=(#data, all), [void] enable_motors_publisher_.publish(#msg), [bool] (#power_status_)=(True)])
PublishTuple(variable='velocity_publisher_', nesting=2, function='spin', line=160, scope=[[void] velocity_publisher_.publish(#cmd_), [bool] (#last_zero_vel_sent_)=(False)])
PublishTuple(variable='velocity_publisher_', nesting=3, function='spin', line=165, scope=[[void] velocity_publisher_.publish(#cmd_), [bool] (#last_zero_vel_sent_)=(True)])
PublishTuple(variable='velocity_publisher_', nesting=0, function='disable', line=305, scope=[void] disable())
PublishTuple(variable='disable_motors_publisher_', nesting=1, function='disable', line=312, scope=[[std_msgs::String] msg = ([std_msgs::String] String_()), [std::basic_string<char>] operator=(#data, all), [void] disable_motors_publisher_.publish(#msg), [bool] (#power_status_)=(False)])
PublishTuple(variable='velocity_publisher_', nesting=0, function='enable', line=332, scope=[void] enable())
PublishTuple(variable='enable_motors_publisher_', nesting=1, function='enable', line=339, scope=[[std_msgs::String] msg = ([std_msgs::String] String_()), [std::basic_string<char>] operator=(#data, all), [void] enable_motors_publisher_.publish(#msg), [bool] (#power_status_)=(True)])
AdvertiseTuple(topic=[std::string] #odom_topic_, queue_size=1, message_type='nav_msgs::Odometry', nesting=0, variable='odom_publisher_', function='initController', line=230, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='commands', queue_size=1, message_type='std_msgs::Float64MultiArray', nesting=0, variable='commands_pub_', function='initController', line=233, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='odom_publisher_', nesting=0, function='publishOdometry', line=773, scope=[void] publishOdometry())
AdvertiseTuple(topic=[basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+([basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+(/sh_, #hand_names), _mixed_position_velocity_controller/command), queue_size=2, message_type='std_msgs::Float64', nesting=1, variable='operator[]', function='JointTrajectoryActionController', line=57, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+([basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+(/sh_, #hand_names), _mixed_position_velocity_controller/command), queue_size=2, message_type='std_msgs::Float64', nesting=1, variable='operator[]', function='JointTrajectoryActionController', line=60, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+([basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+(/sa_, #arm_names), _position_controller/command), queue_size=2, message_type='std_msgs::Float64', nesting=1, variable='operator[]', function='JointTrajectoryActionController', line=68, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic=[basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+([basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+(/sa_, #arm_names), _position_controller/command), queue_size=2, message_type='std_msgs::Float64', nesting=1, variable='operator[]', function='JointTrajectoryActionController', line=76, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='pub', nesting=2, function='execute_trajectory', line=120, scope=[[ros::Publisher] pub = ([ros::Publisher] new Publisher([mapped_type] operator[](#joint_pub, [std::basic_string<char>] operator[](#joint_names, #i)))), [std_msgs::Float64] msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator[](#positions, #i)), [void] pub.publish(#msg), [size_t] _++(#i)])
AdvertiseTuple(topic=[basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+([basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+(/, [mapped_type] operator[](#jointControllerMap, [std::basic_string<char>] operator[](#joint_labels, #i))), /command), queue_size=2, message_type='std_msgs::Float64', nesting=0, variable=None, function='JointTrajectoryActionController', line=194, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='/sr_arm/sendupdate', queue_size=2, message_type='sr_robot_msgs::sendupdate', nesting=1, variable='sr_arm_target_pub', function='JointTrajectoryActionController', line=209, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='/srh/sendupdate', queue_size=2, message_type='sr_robot_msgs::sendupdate', nesting=1, variable='sr_hand_target_pub', function='JointTrajectoryActionController', line=210, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='/desired_joint_states', queue_size=2, message_type='sensor_msgs::JointState', nesting=0, variable='desired_joint_state_pusblisher', function='JointTrajectoryActionController', line=232, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='at', nesting=4, function='execute_trajectory', line=553, scope=[[_data_type] (#data)=([double] operator[](#q, #i)), [void] at.publish(#target_msg)])
PublishTuple(variable='desired_joint_state_pusblisher', nesting=1, function='execute_trajectory', line=565, scope=[[ros::Time] time = ([ros::Time] now()), [ros::Duration] dt = ([ros::Duration] operator-(#time, #last_time_)), [ros::Time] operator=(#last_time_, #time), [int] seg = ([int] -(1)), while [([bool] ([bool] ([int] (#seg)+(1))<([size_type] traj.size()))&&([bool] (#start_time)<([double] time.toSec())), [[int] ++(#seg)])], if [([bool] ([double] (#start_time)+(#duration))<([double] time.toSec()), [break])], if [([bool] (#seg)==([int] -(1)), [if [([bool] ([size_type] traj.size())==(0), []), (True, [])], [bool] (#success)=(False), break])], for [([bool] (#i)<([size_type] q.size()), [[void] sampleSplineWithTimeBounds(#coef, #duration, [double] ([double] time.toSec())-(#start_time), [double] operator[](#q, #i), [double] operator[](#qd, #i), [double] operator[](#qdd, #i)), [size_t] ++(#i)])], if [([bool] ([bool] operator->.isPreemptRequested())||([bool] !([bool] ok())), [[void] operator->.setPreempted([const Result] (default), [const std::string] (default)), [bool] (#success)=(False), break])], [sensor_msgs::JointState] desired_joint_state_msg = ([sensor_msgs::JointState] JointState_()), for [([bool] (#i)<([size_type] joint_names_.size()), [[void] name.push_back([std::basic_string<char>] operator[](#joint_names_, #i)), [void] position.push_back([double] operator[](#q, #i)), [void] velocity.push_back([double] operator[](#qd, #i)), [void] effort.push_back(0.0), if [([bool] !(#use_sendupdate), [if [([bool] ([unsigned int] (#controller_pub_idx)=([mapped_type] operator[](#jointPubIdxMap, [std::basic_string<char>] operator[](#joint_names_, #i))))>(0), [[_data_type] (#data)=([double] operator[](#q, #i)), [void] at.publish(#target_msg)])]]), (True, [[_joint_target_type] (#joint_target)=([double] ([double] operator[](#q, #i))*(57.3))])], [unsigned int] ++(#i)])], [ros::Time] operator=(#stamp, [ros::Time] now()), [void] desired_joint_state_pusblisher.publish(#desired_joint_state_msg), if [([bool] #use_sendupdate, [[std::vector<sr_robot_msgs::joint_<std::allocator<void> >, std::allocator<sr_robot_msgs::joint_<std::allocator<void> > > >] operator=(#sendupdate_list, #joint_vector_traj), [void] sr_arm_target_pub.publish(#sendupdate_msg_traj), [void] sr_hand_target_pub.publish(#sendupdate_msg_traj)])], [bool] sleeping_time.sleep(), [ros::Duration] operator=(#sleeping_time, [ros::Duration] new Duration(0.1))])
PublishTuple(variable='sr_arm_target_pub', nesting=2, function='execute_trajectory', line=570, scope=[[std::vector<sr_robot_msgs::joint_<std::allocator<void> >, std::allocator<sr_robot_msgs::joint_<std::allocator<void> > > >] operator=(#sendupdate_list, #joint_vector_traj), [void] sr_arm_target_pub.publish(#sendupdate_msg_traj), [void] sr_hand_target_pub.publish(#sendupdate_msg_traj)])
PublishTuple(variable='sr_hand_target_pub', nesting=2, function='execute_trajectory', line=571, scope=[[std::vector<sr_robot_msgs::joint_<std::allocator<void> >, std::allocator<sr_robot_msgs::joint_<std::allocator<void> > > >] operator=(#sendupdate_list, #joint_vector_traj), [void] sr_arm_target_pub.publish(#sendupdate_msg_traj), [void] sr_hand_target_pub.publish(#sendupdate_msg_traj)])
PublishTuple(variable='at', nesting=4, function='commandCB', line=889, scope=[[_data_type] (#data)=([double] operator[](#q, #i)), [void] at.publish(#target_msg)])
PublishTuple(variable='desired_joint_state_pusblisher', nesting=1, function='commandCB', line=901, scope=[[ros::Time] time = ([ros::Time] now()), [ros::Duration] dt = ([ros::Duration] operator-(#time, #last_time_)), [ros::Time] operator=(#last_time_, #time), [int] seg = ([int] -(1)), while [([bool] ([bool] ([int] (#seg)+(1))<([size_type] traj.size()))&&([bool] (#start_time)<([double] time.toSec())), [[int] ++(#seg)])], if [([bool] ([double] (#start_time)+(#duration))<([double] time.toSec()), [break])], if [([bool] (#seg)==([int] -(1)), [if [([bool] ([size_type] traj.size())==(0), []), (True, [])], return])], for [([bool] (#i)<([size_type] q.size()), [[void] sampleSplineWithTimeBounds(#coef, #duration, [double] ([double] time.toSec())-(#start_time), [double] operator[](#q, #i), [double] operator[](#qd, #i), [double] operator[](#qdd, #i)), [size_t] ++(#i)])], if [([bool] !([bool] ok()), [[bool] (#success)=(False), break])], [sensor_msgs::JointState] desired_joint_state_msg = ([sensor_msgs::JointState] JointState_()), for [([bool] (#i)<([size_type] joint_names_.size()), [[void] name.push_back([std::basic_string<char>] operator[](#joint_names_, #i)), [void] position.push_back([double] operator[](#q, #i)), [void] velocity.push_back([double] operator[](#qd, #i)), [void] effort.push_back(0.0), if [([bool] !(#use_sendupdate), [if [([bool] ([unsigned int] (#controller_pub_idx)=([mapped_type] operator[](#jointPubIdxMap, [std::basic_string<char>] operator[](#joint_names_, #i))))>(0), [[_data_type] (#data)=([double] operator[](#q, #i)), [void] at.publish(#target_msg)])]]), (True, [[_joint_target_type] (#joint_target)=([double] ([double] operator[](#q, #i))*(57.3))])], [unsigned int] ++(#i)])], [ros::Time] operator=(#stamp, [ros::Time] now()), [void] desired_joint_state_pusblisher.publish(#desired_joint_state_msg), if [([bool] #use_sendupdate, [[std::vector<sr_robot_msgs::joint_<std::allocator<void> >, std::allocator<sr_robot_msgs::joint_<std::allocator<void> > > >] operator=(#sendupdate_list, #joint_vector_traj), [void] sr_arm_target_pub.publish(#sendupdate_msg_traj), [void] sr_hand_target_pub.publish(#sendupdate_msg_traj)])], [bool] sleeping_time.sleep(), [ros::Duration] operator=(#sleeping_time, [ros::Duration] new Duration(0.1))])
PublishTuple(variable='sr_arm_target_pub', nesting=2, function='commandCB', line=906, scope=[[std::vector<sr_robot_msgs::joint_<std::allocator<void> >, std::allocator<sr_robot_msgs::joint_<std::allocator<void> > > >] operator=(#sendupdate_list, #joint_vector_traj), [void] sr_arm_target_pub.publish(#sendupdate_msg_traj), [void] sr_hand_target_pub.publish(#sendupdate_msg_traj)])
PublishTuple(variable='sr_hand_target_pub', nesting=2, function='commandCB', line=907, scope=[[std::vector<sr_robot_msgs::joint_<std::allocator<void> >, std::allocator<sr_robot_msgs::joint_<std::allocator<void> > > >] operator=(#sendupdate_list, #joint_vector_traj), [void] sr_arm_target_pub.publish(#sendupdate_msg_traj), [void] sr_hand_target_pub.publish(#sendupdate_msg_traj)])
PublishTuple(variable='smooth_vel_pub', nesting=2, function='spin', line=220, scope=[[void] cmd_vel.reset([geometry_msgs::Twist] Twist_()), [double] v_inc = (None), [double] (#v_inc)=([double] (#x)-(#x)), if [([bool] ([bool] (#robot_feedback)==(#ODOMETRY))&&([bool] ([double] (#x)*(#x))<(0.0)), [[double] (#max_v_inc)=([double] (#decel_lim_v)*(#period))]), (True, [[double] (#max_v_inc)=([double] ([bool] ([double] (#v_inc)*(#x))>(0.0))*(#period))])], [double] (#w_inc)=([double] (#z)-(#z)), if [([bool] ([bool] (#robot_feedback)==(#ODOMETRY))&&([bool] ([double] (#z)*(#z))<(0.0)), [[double] (#max_w_inc)=([double] (#decel_lim_w)*(#period))]), (True, [[double] (#max_w_inc)=([double] ([bool] ([double] (#w_inc)*(#z))>(0.0))*(#period))])], [double] MA = ([double] sqrt([double] ([double] (#v_inc)*(#v_inc))+([double] (#w_inc)*(#w_inc)))), [double] MB = ([double] sqrt([double] ([double] (#max_v_inc)*(#max_v_inc))+([double] (#max_w_inc)*(#max_w_inc)))), [double] Av = ([double] ([double] abs(#v_inc))/(#MA)), [double] Aw = ([double] ([double] abs(#w_inc))/(#MA)), [double] Bv = ([double] (#max_v_inc)/(#MB)), [double] Bw = ([double] (#max_w_inc)/(#MB)), [double] theta = ([double] ([double] atan2(#Bw, #Bv))-([double] atan2(#Aw, #Av))), if [([bool] (#theta)<(0), [[double] (#max_v_inc)=([double] ([double] (#max_w_inc)*([double] abs(#v_inc)))/([double] abs(#w_inc)))]), (True, [[double] (#max_w_inc)=([double] ([double] (#max_v_inc)*([double] abs(#w_inc)))/([double] abs(#v_inc)))])], if [([bool] ([double] abs(#v_inc))>(#max_v_inc), [[_x_type] (#x)=([double] (#x)+([double] ([double] sign(#v_inc))*(#max_v_inc)))])], if [([bool] ([double] abs(#w_inc))>(#max_w_inc), [[_z_type] (#z)=([double] (#z)+([double] ([double] sign(#w_inc))*(#max_w_inc)))])], [void] smooth_vel_pub.publish(#cmd_vel), [geometry_msgs::Twist_<std::allocator<void> >] operator=(#last_cmd_vel, [geometry_msgs::Twist_<std::allocator<void> >] operator*(#cmd_vel))])
PublishTuple(variable='smooth_vel_pub', nesting=3, function='spin', line=227, scope=[[void] cmd_vel.reset([geometry_msgs::Twist] Twist_()), [void] smooth_vel_pub.publish(#cmd_vel)])
AdvertiseTuple(topic='smooth_cmd_vel', queue_size=1, message_type='geometry_msgs::Twist', nesting=0, variable='smooth_vel_pub', function='init', line=285, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='trajectory_marker', queue_size=1, message_type='visualization_msgs::MarkerArray', nesting=0, variable='marker_pub_', function='init', line=77, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=True, param_topic=False, param_queue=False)
PublishTuple(variable='marker_pub_', nesting=1, function='publishMarker', line=153, scope=[[void] marker_pub_.publish(#marker_array)])
AdvertiseTuple(topic=[std::string] #out, queue_size=1, message_type='std_msgs::Float64', nesting=0, variable='output_pub_', function='MovingAverageTester', line=13, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='output_pub_', nesting=1, function='input_cb', line=27, scope=[[void] output_pub_.publish(#output)])
AdvertiseTuple(topic='joint_trajectory_controller/command', queue_size=1, message_type='trajectory_msgs::JointTrajectory', nesting=0, variable='trajectory_pub_', function='TrajectoryCommandExecutionTester', line=30, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='integrator_debug/q', queue_size=1, message_type='std_msgs::Float64', nesting=0, variable='output_q_pub_', function='TrajectoryCommandExecutionTester', line=32, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='integrator_debug/q_dot', queue_size=1, message_type='std_msgs::Float64', nesting=0, variable='output_q_dot_pub_', function='TrajectoryCommandExecutionTester', line=33, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='integrator_debug/simpson_q', queue_size=1, message_type='std_msgs::Float64', nesting=0, variable='output_simpson_q_pub_', function='TrajectoryCommandExecutionTester', line=34, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='integrator_debug/euler_q', queue_size=1, message_type='std_msgs::Float64', nesting=0, variable='output_euler_q_pub_', function='TrajectoryCommandExecutionTester', line=35, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='integrator_debug/derived_simpson_q_dot', queue_size=1, message_type='std_msgs::Float64', nesting=0, variable='output_derived_simpson_q_dot_pub_', function='TrajectoryCommandExecutionTester', line=36, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='output_q_pub_', nesting=1, function='run', line=120, scope=[[ros::Time] operator=(#time, [ros::Time] now()), [ros::Duration] operator=(#period, [ros::Duration] operator-(#time, #last_update_time)), [ros::Time] operator=(#last_update_time, #time), [double] (#x)=([double] ([double] time.toSec())-([double] start_time.toSec())), [std::vector<double>] next_q = ([std::vector<double>] vector()), [std::vector<double>] next_q_dot = ([std::vector<double>] vector()), [double] ([double] operator()(#q_, #idx_, [unsigned int] (default)))=([double] ([double] (#a)*([double] sin([double] ([double] (#b)*(#x))+(#c))))+(#d)), [double] ([double] operator()(#q_dot_, #idx_, [unsigned int] (default)))=([double] ([double] (#a)*(#b))*([double] cos([double] ([double] (#b)*(#x))+(#c)))), if [([bool] operator->.updateIntegration(#q_dot_, #q_, #next_q, #next_q_dot), [[double] ([double] operator()(#simpson_q_, #idx_, [unsigned int] (default)))=([double] operator[](#next_q, #idx_))])], [double] ([double] operator()(#euler_q_, #idx_, [unsigned int] (default)))+=([double] ([double] operator()(#q_dot_, #idx_, [unsigned int] (default)))*([double] period.toSec())), [double] ([double] operator[](#positions, #idx_))=([double] operator()(#q_, #idx_, [unsigned int] (default))), [ros::Duration] operator=(#time_from_start, [ros::Duration] new Duration([double] period.toSec())), [trajectory_msgs::JointTrajectory] traj_msg = ([trajectory_msgs::JointTrajectory] JointTrajectory_()), [void] points.push_back(#traj_point), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#joint_names, #joint_names), [std_msgs::Float64] q_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#q_, #idx_, [unsigned int] (default))), [std_msgs::Float64] q_dot_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#q_dot_, #idx_, [unsigned int] (default))), [std_msgs::Float64] simpson_q_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#simpson_q_, #idx_, [unsigned int] (default))), [std_msgs::Float64] euler_q_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#euler_q_, #idx_, [unsigned int] (default))), [std_msgs::Float64] derived_simpson_q_dot_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#derived_simpson_q_dot_, #idx_, [unsigned int] (default))), [void] output_q_pub_.publish(#q_msg), [void] output_q_dot_pub_.publish(#q_dot_msg), [void] output_simpson_q_pub_.publish(#simpson_q_msg), [void] output_euler_q_pub_.publish(#euler_q_msg), [void] output_derived_simpson_q_dot_pub_.publish(#derived_simpson_q_dot_msg), [void] trajectory_pub_.publish(#traj_msg), [void] spinOnce(), [bool] r.sleep()])
PublishTuple(variable='output_q_dot_pub_', nesting=1, function='run', line=121, scope=[[ros::Time] operator=(#time, [ros::Time] now()), [ros::Duration] operator=(#period, [ros::Duration] operator-(#time, #last_update_time)), [ros::Time] operator=(#last_update_time, #time), [double] (#x)=([double] ([double] time.toSec())-([double] start_time.toSec())), [std::vector<double>] next_q = ([std::vector<double>] vector()), [std::vector<double>] next_q_dot = ([std::vector<double>] vector()), [double] ([double] operator()(#q_, #idx_, [unsigned int] (default)))=([double] ([double] (#a)*([double] sin([double] ([double] (#b)*(#x))+(#c))))+(#d)), [double] ([double] operator()(#q_dot_, #idx_, [unsigned int] (default)))=([double] ([double] (#a)*(#b))*([double] cos([double] ([double] (#b)*(#x))+(#c)))), if [([bool] operator->.updateIntegration(#q_dot_, #q_, #next_q, #next_q_dot), [[double] ([double] operator()(#simpson_q_, #idx_, [unsigned int] (default)))=([double] operator[](#next_q, #idx_))])], [double] ([double] operator()(#euler_q_, #idx_, [unsigned int] (default)))+=([double] ([double] operator()(#q_dot_, #idx_, [unsigned int] (default)))*([double] period.toSec())), [double] ([double] operator[](#positions, #idx_))=([double] operator()(#q_, #idx_, [unsigned int] (default))), [ros::Duration] operator=(#time_from_start, [ros::Duration] new Duration([double] period.toSec())), [trajectory_msgs::JointTrajectory] traj_msg = ([trajectory_msgs::JointTrajectory] JointTrajectory_()), [void] points.push_back(#traj_point), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#joint_names, #joint_names), [std_msgs::Float64] q_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#q_, #idx_, [unsigned int] (default))), [std_msgs::Float64] q_dot_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#q_dot_, #idx_, [unsigned int] (default))), [std_msgs::Float64] simpson_q_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#simpson_q_, #idx_, [unsigned int] (default))), [std_msgs::Float64] euler_q_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#euler_q_, #idx_, [unsigned int] (default))), [std_msgs::Float64] derived_simpson_q_dot_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#derived_simpson_q_dot_, #idx_, [unsigned int] (default))), [void] output_q_pub_.publish(#q_msg), [void] output_q_dot_pub_.publish(#q_dot_msg), [void] output_simpson_q_pub_.publish(#simpson_q_msg), [void] output_euler_q_pub_.publish(#euler_q_msg), [void] output_derived_simpson_q_dot_pub_.publish(#derived_simpson_q_dot_msg), [void] trajectory_pub_.publish(#traj_msg), [void] spinOnce(), [bool] r.sleep()])
PublishTuple(variable='output_simpson_q_pub_', nesting=1, function='run', line=122, scope=[[ros::Time] operator=(#time, [ros::Time] now()), [ros::Duration] operator=(#period, [ros::Duration] operator-(#time, #last_update_time)), [ros::Time] operator=(#last_update_time, #time), [double] (#x)=([double] ([double] time.toSec())-([double] start_time.toSec())), [std::vector<double>] next_q = ([std::vector<double>] vector()), [std::vector<double>] next_q_dot = ([std::vector<double>] vector()), [double] ([double] operator()(#q_, #idx_, [unsigned int] (default)))=([double] ([double] (#a)*([double] sin([double] ([double] (#b)*(#x))+(#c))))+(#d)), [double] ([double] operator()(#q_dot_, #idx_, [unsigned int] (default)))=([double] ([double] (#a)*(#b))*([double] cos([double] ([double] (#b)*(#x))+(#c)))), if [([bool] operator->.updateIntegration(#q_dot_, #q_, #next_q, #next_q_dot), [[double] ([double] operator()(#simpson_q_, #idx_, [unsigned int] (default)))=([double] operator[](#next_q, #idx_))])], [double] ([double] operator()(#euler_q_, #idx_, [unsigned int] (default)))+=([double] ([double] operator()(#q_dot_, #idx_, [unsigned int] (default)))*([double] period.toSec())), [double] ([double] operator[](#positions, #idx_))=([double] operator()(#q_, #idx_, [unsigned int] (default))), [ros::Duration] operator=(#time_from_start, [ros::Duration] new Duration([double] period.toSec())), [trajectory_msgs::JointTrajectory] traj_msg = ([trajectory_msgs::JointTrajectory] JointTrajectory_()), [void] points.push_back(#traj_point), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#joint_names, #joint_names), [std_msgs::Float64] q_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#q_, #idx_, [unsigned int] (default))), [std_msgs::Float64] q_dot_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#q_dot_, #idx_, [unsigned int] (default))), [std_msgs::Float64] simpson_q_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#simpson_q_, #idx_, [unsigned int] (default))), [std_msgs::Float64] euler_q_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#euler_q_, #idx_, [unsigned int] (default))), [std_msgs::Float64] derived_simpson_q_dot_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#derived_simpson_q_dot_, #idx_, [unsigned int] (default))), [void] output_q_pub_.publish(#q_msg), [void] output_q_dot_pub_.publish(#q_dot_msg), [void] output_simpson_q_pub_.publish(#simpson_q_msg), [void] output_euler_q_pub_.publish(#euler_q_msg), [void] output_derived_simpson_q_dot_pub_.publish(#derived_simpson_q_dot_msg), [void] trajectory_pub_.publish(#traj_msg), [void] spinOnce(), [bool] r.sleep()])
PublishTuple(variable='output_euler_q_pub_', nesting=1, function='run', line=123, scope=[[ros::Time] operator=(#time, [ros::Time] now()), [ros::Duration] operator=(#period, [ros::Duration] operator-(#time, #last_update_time)), [ros::Time] operator=(#last_update_time, #time), [double] (#x)=([double] ([double] time.toSec())-([double] start_time.toSec())), [std::vector<double>] next_q = ([std::vector<double>] vector()), [std::vector<double>] next_q_dot = ([std::vector<double>] vector()), [double] ([double] operator()(#q_, #idx_, [unsigned int] (default)))=([double] ([double] (#a)*([double] sin([double] ([double] (#b)*(#x))+(#c))))+(#d)), [double] ([double] operator()(#q_dot_, #idx_, [unsigned int] (default)))=([double] ([double] (#a)*(#b))*([double] cos([double] ([double] (#b)*(#x))+(#c)))), if [([bool] operator->.updateIntegration(#q_dot_, #q_, #next_q, #next_q_dot), [[double] ([double] operator()(#simpson_q_, #idx_, [unsigned int] (default)))=([double] operator[](#next_q, #idx_))])], [double] ([double] operator()(#euler_q_, #idx_, [unsigned int] (default)))+=([double] ([double] operator()(#q_dot_, #idx_, [unsigned int] (default)))*([double] period.toSec())), [double] ([double] operator[](#positions, #idx_))=([double] operator()(#q_, #idx_, [unsigned int] (default))), [ros::Duration] operator=(#time_from_start, [ros::Duration] new Duration([double] period.toSec())), [trajectory_msgs::JointTrajectory] traj_msg = ([trajectory_msgs::JointTrajectory] JointTrajectory_()), [void] points.push_back(#traj_point), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#joint_names, #joint_names), [std_msgs::Float64] q_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#q_, #idx_, [unsigned int] (default))), [std_msgs::Float64] q_dot_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#q_dot_, #idx_, [unsigned int] (default))), [std_msgs::Float64] simpson_q_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#simpson_q_, #idx_, [unsigned int] (default))), [std_msgs::Float64] euler_q_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#euler_q_, #idx_, [unsigned int] (default))), [std_msgs::Float64] derived_simpson_q_dot_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#derived_simpson_q_dot_, #idx_, [unsigned int] (default))), [void] output_q_pub_.publish(#q_msg), [void] output_q_dot_pub_.publish(#q_dot_msg), [void] output_simpson_q_pub_.publish(#simpson_q_msg), [void] output_euler_q_pub_.publish(#euler_q_msg), [void] output_derived_simpson_q_dot_pub_.publish(#derived_simpson_q_dot_msg), [void] trajectory_pub_.publish(#traj_msg), [void] spinOnce(), [bool] r.sleep()])
PublishTuple(variable='output_derived_simpson_q_dot_pub_', nesting=1, function='run', line=124, scope=[[ros::Time] operator=(#time, [ros::Time] now()), [ros::Duration] operator=(#period, [ros::Duration] operator-(#time, #last_update_time)), [ros::Time] operator=(#last_update_time, #time), [double] (#x)=([double] ([double] time.toSec())-([double] start_time.toSec())), [std::vector<double>] next_q = ([std::vector<double>] vector()), [std::vector<double>] next_q_dot = ([std::vector<double>] vector()), [double] ([double] operator()(#q_, #idx_, [unsigned int] (default)))=([double] ([double] (#a)*([double] sin([double] ([double] (#b)*(#x))+(#c))))+(#d)), [double] ([double] operator()(#q_dot_, #idx_, [unsigned int] (default)))=([double] ([double] (#a)*(#b))*([double] cos([double] ([double] (#b)*(#x))+(#c)))), if [([bool] operator->.updateIntegration(#q_dot_, #q_, #next_q, #next_q_dot), [[double] ([double] operator()(#simpson_q_, #idx_, [unsigned int] (default)))=([double] operator[](#next_q, #idx_))])], [double] ([double] operator()(#euler_q_, #idx_, [unsigned int] (default)))+=([double] ([double] operator()(#q_dot_, #idx_, [unsigned int] (default)))*([double] period.toSec())), [double] ([double] operator[](#positions, #idx_))=([double] operator()(#q_, #idx_, [unsigned int] (default))), [ros::Duration] operator=(#time_from_start, [ros::Duration] new Duration([double] period.toSec())), [trajectory_msgs::JointTrajectory] traj_msg = ([trajectory_msgs::JointTrajectory] JointTrajectory_()), [void] points.push_back(#traj_point), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#joint_names, #joint_names), [std_msgs::Float64] q_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#q_, #idx_, [unsigned int] (default))), [std_msgs::Float64] q_dot_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#q_dot_, #idx_, [unsigned int] (default))), [std_msgs::Float64] simpson_q_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#simpson_q_, #idx_, [unsigned int] (default))), [std_msgs::Float64] euler_q_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#euler_q_, #idx_, [unsigned int] (default))), [std_msgs::Float64] derived_simpson_q_dot_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#derived_simpson_q_dot_, #idx_, [unsigned int] (default))), [void] output_q_pub_.publish(#q_msg), [void] output_q_dot_pub_.publish(#q_dot_msg), [void] output_simpson_q_pub_.publish(#simpson_q_msg), [void] output_euler_q_pub_.publish(#euler_q_msg), [void] output_derived_simpson_q_dot_pub_.publish(#derived_simpson_q_dot_msg), [void] trajectory_pub_.publish(#traj_msg), [void] spinOnce(), [bool] r.sleep()])
PublishTuple(variable='trajectory_pub_', nesting=1, function='run', line=126, scope=[[ros::Time] operator=(#time, [ros::Time] now()), [ros::Duration] operator=(#period, [ros::Duration] operator-(#time, #last_update_time)), [ros::Time] operator=(#last_update_time, #time), [double] (#x)=([double] ([double] time.toSec())-([double] start_time.toSec())), [std::vector<double>] next_q = ([std::vector<double>] vector()), [std::vector<double>] next_q_dot = ([std::vector<double>] vector()), [double] ([double] operator()(#q_, #idx_, [unsigned int] (default)))=([double] ([double] (#a)*([double] sin([double] ([double] (#b)*(#x))+(#c))))+(#d)), [double] ([double] operator()(#q_dot_, #idx_, [unsigned int] (default)))=([double] ([double] (#a)*(#b))*([double] cos([double] ([double] (#b)*(#x))+(#c)))), if [([bool] operator->.updateIntegration(#q_dot_, #q_, #next_q, #next_q_dot), [[double] ([double] operator()(#simpson_q_, #idx_, [unsigned int] (default)))=([double] operator[](#next_q, #idx_))])], [double] ([double] operator()(#euler_q_, #idx_, [unsigned int] (default)))+=([double] ([double] operator()(#q_dot_, #idx_, [unsigned int] (default)))*([double] period.toSec())), [double] ([double] operator[](#positions, #idx_))=([double] operator()(#q_, #idx_, [unsigned int] (default))), [ros::Duration] operator=(#time_from_start, [ros::Duration] new Duration([double] period.toSec())), [trajectory_msgs::JointTrajectory] traj_msg = ([trajectory_msgs::JointTrajectory] JointTrajectory_()), [void] points.push_back(#traj_point), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#joint_names, #joint_names), [std_msgs::Float64] q_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#q_, #idx_, [unsigned int] (default))), [std_msgs::Float64] q_dot_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#q_dot_, #idx_, [unsigned int] (default))), [std_msgs::Float64] simpson_q_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#simpson_q_, #idx_, [unsigned int] (default))), [std_msgs::Float64] euler_q_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#euler_q_, #idx_, [unsigned int] (default))), [std_msgs::Float64] derived_simpson_q_dot_msg = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#derived_simpson_q_dot_, #idx_, [unsigned int] (default))), [void] output_q_pub_.publish(#q_msg), [void] output_q_dot_pub_.publish(#q_dot_msg), [void] output_simpson_q_pub_.publish(#simpson_q_msg), [void] output_euler_q_pub_.publish(#euler_q_msg), [void] output_derived_simpson_q_dot_pub_.publish(#derived_simpson_q_dot_msg), [void] trajectory_pub_.publish(#traj_msg), [void] spinOnce(), [bool] r.sleep()])
AdvertiseTuple(topic='feedback_states', queue_size=1, message_type='control_msgs::FollowJointTrajectoryFeedback', nesting=0, variable='pub_joint_control_state_', function='init', line=49, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_states', queue_size=1, message_type='sensor_msgs::JointState', nesting=0, variable='pub_joint_sensor_state_', function='init', line=51, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='pub_joint_control_state_', nesting=1, function='internalCB', line=80, scope=[[void] pub_joint_control_state_.publish(#control_state), [void] pub_joint_sensor_state_.publish(#sensor_state)])
PublishTuple(variable='pub_joint_sensor_state_', nesting=1, function='internalCB', line=81, scope=[[void] pub_joint_control_state_.publish(#control_state), [void] pub_joint_sensor_state_.publish(#sensor_state)])
AdvertiseTuple(topic='feedback_states', queue_size=1, message_type='control_msgs::FollowJointTrajectoryFeedback', nesting=0, variable='pub_joint_control_state_', function='init', line=49, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='joint_states', queue_size=1, message_type='sensor_msgs::JointState', nesting=0, variable='pub_joint_sensor_state_', function='init', line=51, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='pub_joint_control_state_', nesting=1, function='internalCB', line=80, scope=[[void] pub_joint_control_state_.publish(#control_state), [void] pub_joint_sensor_state_.publish(#sensor_state)])
PublishTuple(variable='pub_joint_sensor_state_', nesting=1, function='internalCB', line=81, scope=[[void] pub_joint_control_state_.publish(#control_state), [void] pub_joint_sensor_state_.publish(#sensor_state)])
AdvertiseTuple(topic='joint_path_command', queue_size=1, message_type='trajectory_msgs::JointTrajectory', nesting=0, variable='pub_trajectory_command_', function='JointTrajectoryAction', line=62, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='pub_trajectory_command_', nesting=2, function='goalCB', line=148, scope=[if [([bool] #has_active_goal_, [[void] abortGoal()])], [void] gh.setAccepted([const std::string] (default)), [actionlib::ServerGoalHandle<control_msgs::FollowJointTrajectoryAction_<std::allocator<void> > >] operator=(#active_goal_, #gh), [bool] (#has_active_goal_)=(True), [ros::Time] operator=(#time_to_check_, [ros::Time] operator+([ros::Time] now(), [ros::Duration] new Duration([double] ([double] time_from_start.toSec())/(2.0)))), [bool] (#has_moved_once_)=(False), [trajectory_msgs::JointTrajectory_<std::allocator<void> >] operator=(#current_traj_, #trajectory), [void] pub_trajectory_command_.publish(#current_traj_)])
PublishTuple(variable='pub_trajectory_command_', nesting=1, function='cancelCB', line=191, scope=[[trajectory_msgs::JointTrajectory] empty = ([trajectory_msgs::JointTrajectory] JointTrajectory_()), [std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >] operator=(#joint_names, #joint_names_), [void] pub_trajectory_command_.publish(#empty), [void] active_goal_.setCanceled([const Result] (default), [const std::string] (default)), [bool] (#has_active_goal_)=(False)])
PublishTuple(variable='pub_trajectory_command_', nesting=0, function='abortGoal', line=279, scope=[void] abortGoal())
AdvertiseTuple(topic='robot_status', queue_size=1, message_type='industrial_msgs::RobotStatus', nesting=0, variable='pub_robot_status_', function='init', line=49, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='pub_robot_status_', nesting=0, function='internalCB', line=80, scope=[bool] internalCB(in))
AdvertiseTuple(topic='robot_status', queue_size=1, message_type='industrial_msgs::RobotStatus', nesting=0, variable='pub_robot_status_', function='init', line=49, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='pub_robot_status_', nesting=0, function='internalCB', line=80, scope=[bool] internalCB(in))
AdvertiseTuple(topic='virtual_sensor_scan', queue_size=1, message_type='sensor_msgs::LaserScan', nesting=0, variable='virtual_obs_pub_', function='init', line=55, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=True, param_topic=False, param_queue=False)
PublishTuple(variable='virtual_obs_pub_', nesting=2, function='spin', line=170, scope=[[ros::Time] operator=(#stamp, [ros::Time] now()), [tf::StampedTransform] robot_gb = ([tf::StampedTransform] new StampedTransform()), [[void] tf_listener_.lookupTransform(#global_frame_id_, #sensor_frame_id_, [ros::Time] new Time(0.0), #robot_gb)], [tf::Transform] robot_gb_inv = ([tf::Transform] robot_gb.inverse()), [std::vector<boost::shared_ptr<Obstacle> >] obstacles = ([std::vector<boost::shared_ptr<Obstacle> >] vector()), for [([bool] (#i)<([size_type] columns_.size()), [[tf::Transform] obs_abs_tf = ([tf::Transform] new Transform()), [void] poseMsgToTF(#pose, #obs_abs_tf), [void] obs_abs_tf.setRotation([const tf::Quaternion] getIdentity()), [tf::Transform] obs_tf = ([tf::Transform] operator*(#robot_gb_inv, #obs_abs_tf)), [boost::shared_ptr<Obstacle>] new_obs = ([boost::shared_ptr<Obstacle>] shared_ptr()), [bool] add(#new_obs, #obstacles), [unsigned int] _++(#i)])], for [([bool] (#i)<([size_type] walls_.size()), [[tf::Transform] obs_abs_tf = ([tf::Transform] new Transform()), [void] poseMsgToTF(#pose, #obs_abs_tf), [tf::Transform] obs_tf = ([tf::Transform] operator*(#robot_gb_inv, #obs_abs_tf)), [boost::shared_ptr<Obstacle>] new_obs = ([boost::shared_ptr<Obstacle>] shared_ptr()), [bool] add(#new_obs, #obstacles), [unsigned int] _++(#i)])], [int] ray = (0), for [([bool] (#ray_theta)<=(#angle_max), [[double] rx = ([double] (#range_max)*([double] cos(#ray_theta))), [double] ry = ([double] (#range_max)*([double] sin(#ray_theta))), [int] hits = (0), [float] ([float] operator[](#ranges, #ray))=(#range_max), for [([bool] (#i)<([size_type] obstacles.size()), [[double] distance = (None), if [([bool] ([bool] operator->.intersects(#rx, #ry, #range_max, #distance))==(True), [[float] ([float] operator[](#ranges, #ray))=([const float] min([float] operator[](#ranges, #ray), #distance)), if [([bool] (#hits)<(#hits_count_), [[int] _++(#hits)]), (True, [break])]])], [unsigned int] _++(#i)])], [int] _++(#ray), [double] (#ray_theta)+=(#angle_increment)])], [void] virtual_obs_pub_.publish(#scan_)])
AdvertiseTuple(topic='/torso/joint_group_position_controller/command', queue_size=1, message_type='std_msgs::Float64MultiArray', nesting=0, variable='output_pub_', function='ForwardCommandExecutionTester', line=15, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='output_pub_', nesting=1, function='run', line=46, scope=[[ros::Time] operator=(#time, [ros::Time] now()), [double] (#x)=([double] operator-.toSec()), [double] vel = ([double] ([double] (#a)*([double] sin([double] ([double] (#b)*(#x))+(#c))))+(#d)), [double] ([double] operator[](#data, #idx_))=(#vel), [void] output_pub_.publish(#command_msg), [void] spinOnce(), [bool] r.sleep()])
AdvertiseTuple(topic='command', queue_size=1, message_type='geometry_msgs::Twist', nesting=0, variable='output_pub_', function='TwistCommandExecutionTester', line=12, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='output_pub_', nesting=1, function='run', line=42, scope=[[ros::Time] operator=(#time, [ros::Time] now()), [double] (#x)=([double] operator-.toSec()), [double] vel = ([double] ([double] (#a)*([double] sin([double] ([double] (#b)*(#x))+(#c))))+(#d)), [_z_type] (#z)=(#vel), [void] output_pub_.publish(#command_msg), [void] spinOnce(), [bool] r.sleep()])
AdvertiseTuple(topic='output_q', queue_size=1, message_type='std_msgs::Float64', nesting=0, variable='output_q_pub_', function='SimpsonIntegratorTester', line=20, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='output_q_dot', queue_size=1, message_type='std_msgs::Float64', nesting=0, variable='output_q_dot_pub_', function='SimpsonIntegratorTester', line=21, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='output_q_pub_', nesting=1, function='input_cb', line=48, scope=[for [([bool] (#i)<([size_type] next_q.size()), [[double] ([double] operator()(#q_, #i, [unsigned int] (default)))=([double] operator[](#next_q, #i)), [double] ([double] operator()(#q_dot_, #i, [unsigned int] (default)))=([double] operator[](#next_q_dot, #i)), [unsigned int] _++(#i)])], [std_msgs::Float64] output_q = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#q_, 0, [unsigned int] (default))), [std_msgs::Float64] output_q_dot = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#q_dot_, 0, [unsigned int] (default))), [void] output_q_pub_.publish(#output_q), [void] output_q_dot_pub_.publish(#output_q_dot)])
PublishTuple(variable='output_q_dot_pub_', nesting=1, function='input_cb', line=49, scope=[for [([bool] (#i)<([size_type] next_q.size()), [[double] ([double] operator()(#q_, #i, [unsigned int] (default)))=([double] operator[](#next_q, #i)), [double] ([double] operator()(#q_dot_, #i, [unsigned int] (default)))=([double] operator[](#next_q_dot, #i)), [unsigned int] _++(#i)])], [std_msgs::Float64] output_q = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#q_, 0, [unsigned int] (default))), [std_msgs::Float64] output_q_dot = ([std_msgs::Float64] Float64_()), [_data_type] (#data)=([double] operator()(#q_dot_, 0, [unsigned int] (default))), [void] output_q_pub_.publish(#output_q), [void] output_q_dot_pub_.publish(#output_q_dot)])
AdvertiseTuple(topic='debug/manipulability', queue_size=1, message_type='std_msgs::Float64', nesting=0, variable='manipulability_pub_', function='init', line=95, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='debug/twist_current', queue_size=1, message_type='geometry_msgs::Twist', nesting=0, variable='twist_current_pub_', function='init', line=96, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='twist_current_pub_', nesting=1, function='jointstateCallback', line=119, scope=[[geometry_msgs::Twist] twist_msg = ([geometry_msgs::Twist] Twist_()), [void] twistKDLToMsg([KDL::Twist] FrameVel.GetTwist(), #twist_msg), [void] twist_current_pub_.publish(#twist_msg)])
PublishTuple(variable='manipulability_pub_', nesting=0, function='jointstateCallback', line=130, scope=[void] jointstateCallback(msg))
AdvertiseTuple(topic='/target_pose', queue_size=1, message_type='geometry_msgs::PoseStamped', nesting=0, variable='target_pose_pub_', function='PickAndPlaceServer', line=79, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=True, param_topic=False, param_queue=False)
PublishTuple(variable='target_pose_pub_', nesting=1, function='moveArmTo', line=242, scope=[[geometry_msgs::PoseStamped] modiff_target = ([geometry_msgs::PoseStamped] PoseStamped_()), [std::basic_string<char>] operator=(#frame_id, #arm_link), [geometry_msgs::Pose_<std::allocator<void> >] operator=(#pose, #target), [double] x = (#x), [double] y = (#y), [double] z = (#z), [double] d = ([double] sqrt([double] ([double] (#x)*(#x))+([double] (#y)*(#y)))), if [([bool] (#d)>(0.3), [[void] as_.setAborted(#result_, [const std::string] (default)), return False])], [double] rp = ([double] (0.0)[op]([double] asin([double] ([double] (#d)-(0.1))/(0.205)))), [double] ry = ([double] asin([double] (#y)/(#d))), [tf::Quaternion] q = ([tf::Quaternion] createQuaternionFromRPY(0.0, [double] ([float] (#attempts)*([float] fRand([double] -(0.05), [double] +(0.05))))+(#rp), [double] ([float] (#attempts)*([float] fRand([double] -(0.05), [double] +(0.05))))+(#ry))), [void] quaternionTFToMsg(#q, #orientation), [void] target_pose_pub_.publish(#modiff_target), if [([bool] ([bool] arm_.setPoseTarget(#modiff_target, [const std::string] (default)))==(False), [[void] as_.setAborted(#result_, [const std::string] (default)), return False])], [moveit::planning_interface::MoveItErrorCode] result = ([moveit::planning_interface::MoveItErrorCode] arm_.move()), if [([bool] ([bool] result.operator bool())==(True), [return True]), (True, [])], [int] _++(#attempts)])
PublishTuple(variable='led1_publisher_', nesting=2, function='bumperEventCB', line=247, scope=[[kobuki_msgs::LedPtr] led_msg_ptr = ([kobuki_msgs::LedPtr] shared_ptr()), [void] led_msg_ptr.reset([kobuki_msgs::Led] Led_()), [_value_type] (#value)=(#ORANGE), [void] led1_publisher_.publish(#led_msg_ptr), [bool] (#led_bumper_on_)=(True)])
PublishTuple(variable='led1_publisher_', nesting=3, function='bumperEventCB', line=255, scope=[[kobuki_msgs::LedPtr] led_msg_ptr = ([kobuki_msgs::LedPtr] shared_ptr()), [void] led_msg_ptr.reset([kobuki_msgs::Led] Led_()), [_value_type] (#value)=(#BLACK), [void] led1_publisher_.publish(#led_msg_ptr), [bool] (#led_bumper_on_)=(False)])
PublishTuple(variable='led2_publisher_', nesting=1, function='cliffEventCB', line=308, scope=[[kobuki_msgs::LedPtr] led_msg_ptr = ([kobuki_msgs::LedPtr] shared_ptr()), [void] led_msg_ptr.reset([kobuki_msgs::Led] Led_()), [_value_type] (#value)=(#ORANGE), [void] led2_publisher_.publish(#led_msg_ptr), [bool] (#led_cliff_on_)=(True)])
PublishTuple(variable='led2_publisher_', nesting=2, function='cliffEventCB', line=316, scope=[[kobuki_msgs::LedPtr] led_msg_ptr = ([kobuki_msgs::LedPtr] shared_ptr()), [void] led_msg_ptr.reset([kobuki_msgs::Led] Led_()), [_value_type] (#value)=(#BLACK), [void] led2_publisher_.publish(#led_msg_ptr), [bool] (#led_cliff_on_)=(False)])
PublishTuple(variable='led1_publisher_', nesting=1, function='wheelDropEventCB', line=358, scope=[[kobuki_msgs::LedPtr] led_msg_ptr = ([kobuki_msgs::LedPtr] shared_ptr()), [void] led_msg_ptr.reset([kobuki_msgs::Led] Led_()), [_value_type] (#value)=(#RED), [void] led1_publisher_.publish(#led_msg_ptr), [void] led2_publisher_.publish(#led_msg_ptr), [bool] (#stop_)=(True), [bool] (#led_wheel_drop_on_)=(True)])
PublishTuple(variable='led2_publisher_', nesting=1, function='wheelDropEventCB', line=359, scope=[[kobuki_msgs::LedPtr] led_msg_ptr = ([kobuki_msgs::LedPtr] shared_ptr()), [void] led_msg_ptr.reset([kobuki_msgs::Led] Led_()), [_value_type] (#value)=(#RED), [void] led1_publisher_.publish(#led_msg_ptr), [void] led2_publisher_.publish(#led_msg_ptr), [bool] (#stop_)=(True), [bool] (#led_wheel_drop_on_)=(True)])
PublishTuple(variable='led1_publisher_', nesting=2, function='wheelDropEventCB', line=368, scope=[[kobuki_msgs::LedPtr] led_msg_ptr = ([kobuki_msgs::LedPtr] shared_ptr()), [void] led_msg_ptr.reset([kobuki_msgs::Led] Led_()), [_value_type] (#value)=(#BLACK), [void] led1_publisher_.publish(#led_msg_ptr), [void] led2_publisher_.publish(#led_msg_ptr), [bool] (#stop_)=(False), [bool] (#led_wheel_drop_on_)=(False)])
PublishTuple(variable='led2_publisher_', nesting=2, function='wheelDropEventCB', line=369, scope=[[kobuki_msgs::LedPtr] led_msg_ptr = ([kobuki_msgs::LedPtr] shared_ptr()), [void] led_msg_ptr.reset([kobuki_msgs::Led] Led_()), [_value_type] (#value)=(#BLACK), [void] led1_publisher_.publish(#led_msg_ptr), [void] led2_publisher_.publish(#led_msg_ptr), [bool] (#stop_)=(False), [bool] (#led_wheel_drop_on_)=(False)])
PublishTuple(variable='cmd_vel_publisher_', nesting=2, function='spin', line=389, scope=[[void] cmd_vel_publisher_.publish(#cmd_vel_msg_ptr), return])
PublishTuple(variable='cmd_vel_publisher_', nesting=3, function='spin', line=419, scope=[[_z_type] (#z)=([double] (#turning_direction_)*(#vel_ang_)), [void] cmd_vel_publisher_.publish(#cmd_vel_msg_ptr)])
PublishTuple(variable='cmd_vel_publisher_', nesting=2, function='spin', line=429, scope=[[_x_type] (#x)=(#vel_lin_), [void] cmd_vel_publisher_.publish(#cmd_vel_msg_ptr)])
AdvertiseTuple(topic='commands/velocity', queue_size=10, message_type='geometry_msgs::Twist', nesting=0, variable='cmd_vel_publisher_', function='init', line=76, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='commands/led1', queue_size=10, message_type='kobuki_msgs::Led', nesting=0, variable='led1_publisher_', function='init', line=77, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='commands/led2', queue_size=10, message_type='kobuki_msgs::Led', nesting=0, variable='led2_publisher_', function='init', line=78, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='raw/joint_states', queue_size=2, message_type='sensor_msgs::JointState', nesting=0, variable='cyberglove_raw_pub', function='CybergloveTrajectoryPublisher', line=148, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='cyberglove_raw_pub', nesting=1, function='glove_callback', line=321, scope=[[std::vector<double>] glove_calibrated_positions = ([std::vector<double>] vector()), [void] position.clear(), [ros::Time] operator=(#stamp, [ros::Time] now()), for [([bool] (#index_joint)<(#glove_size), [[float] averaged_value = (0.0), for [([bool] (#index_sample)<(#publish_counter_max), [[float] (#averaged_value)+=([float] operator[]([std::vector<float, std::allocator<float> >] operator[](#glove_positions, #index_sample), #index_joint)), [unsigned int] ++(#index_sample)])], [float] (#averaged_value)/=(#publish_counter_max), [boost::shared_ptr<shadow_robot::JointCalibration>] operator=(#calibration_tmp, [boost::shared_ptr<shadow_robot::JointCalibration>] operator->.find(None)), [double] calibration_value = ([double] operator->.compute(#averaged_value)), [void] position.push_back(#averaged_value), [void] glove_calibrated_positions.push_back(#calibration_value), [unsigned int] ++(#index_joint)])], [void] cyberglove_raw_pub.publish(#jointstate_msg), [unsigned int] (#publish_counter_index)=(0), [void] glove_positions.clear(), [void] applyJointMapping(#glove_calibrated_positions, #hand_positions), [void] processJointZeros(#hand_positions, #hand_positions_no_J0), [void] points.clear(), [ros::Time] operator=(#stamp, [ros::Time] operator+([ros::Time] now(), #trajectory_tx_delay_)), [trajectory_msgs::JointTrajectoryPoint] trajectory_point = ([trajectory_msgs::JointTrajectoryPoint] JointTrajectoryPoint_()), [std::vector<double, std::allocator<double> >] operator=(#positions, #hand_positions_no_J0), [ros::Duration] operator=(#time_from_start, #trajectory_delay_), for [([bool] (#i)<([size_type] positions.size()), [if [([int] isnan([double] operator[](#positions, #i)), [return])], [size_t] _++(#i)])], [void] points.push_back(#trajectory_point), [void] operator->.sendGoal(#trajectory_goal_, [SimpleDoneCallback] (default), [SimpleActiveCallback] (default), [SimpleFeedbackCallback] (default))])
AdvertiseTuple(topic='cmd_vel', queue_size=1, message_type='geometry_msgs::Twist', nesting=0, variable='vel_pub_', function='init', line=71, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='/diagnostics', queue_size=1, message_type='diagnostic_msgs::DiagnosticArray', nesting=0, variable='_pubDiagnostic', function='init', line=130, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
AdvertiseTuple(topic='marker', queue_size=1, message_type='visualization_msgs::Marker', nesting=0, variable='_pubMarker', function='init', line=209, overload='advertise(string topic, uint32_t queue_size, bool latch)', latch=None, param_topic=False, param_queue=False)
PublishTuple(variable='_pubDiagnostic', nesting=0, function='publish_diagnostics_cb', line=432, scope=[void] publish_diagnostics_cb())
PublishTuple(variable='_pubMarker', nesting=0, function='markerCallback', line=458, scope=[void] markerCallback(color))