AdvertiseServiceTuple(topic='change_state', callback='changeModeSrvCb', message_type='turtlebot_msgs::SetFollowState::Request &, turtlebot_msgs::SetFollowState::Response', nesting=0, variable='switch_srv_', function='onInit', line=115, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
ServiceClientTuple(topic='robotiq_force_torque_sensor_acc', message_type='robotiq_force_torque_sensor::struct robotiq_force_torque_sensor::sensor_accessor', nesting=0, variable='client', function='main', line=71, overload='serviceClient(string service, bool persistent, M_string)', param_topic=False)
AdvertiseServiceTuple(topic='robotiq_force_torque_sensor_acc', callback='receiverCallback', message_type='robotiq_force_torque_sensor::sensor_accessor::Request &, robotiq_force_torque_sensor::sensor_accessor::Response', nesting=0, variable='service', function='main', line=178, overload='advertiseService(string service, bool function(MReq, MRes))', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='init', callback='srvCallback_Init', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srvServer_Init', function='NodeClass', line=253, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='ElmoRecorderConfig', callback='srvCallback_ElmoRecorderConfig', message_type='cob_base_drive_chain::ElmoRecorderConfig::Request &, cob_base_drive_chain::ElmoRecorderConfig::Response', nesting=0, variable='srvServer_ElmoRecorderConfig', function='NodeClass', line=254, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='ElmoRecorderReadout', callback='srvCallback_ElmoRecorderReadout', message_type='cob_base_drive_chain::ElmoRecorderReadout::Request &, cob_base_drive_chain::ElmoRecorderReadout::Response', nesting=0, variable='srvServer_ElmoRecorderReadout', function='NodeClass', line=255, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='recover', callback='srvCallback_Recover', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srvServer_Recover', function='NodeClass', line=258, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='shutdown', callback='srvCallback_Shutdown', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srvServer_Shutdown', function='NodeClass', line=259, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='init', callback='srvCallback_Init', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srvServer_Init', function='NodeClass', line=253, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='ElmoRecorderConfig', callback='srvCallback_ElmoRecorderConfig', message_type='cob_base_drive_chain::ElmoRecorderConfig::Request &, cob_base_drive_chain::ElmoRecorderConfig::Response', nesting=0, variable='srvServer_ElmoRecorderConfig', function='NodeClass', line=254, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='ElmoRecorderReadout', callback='srvCallback_ElmoRecorderReadout', message_type='cob_base_drive_chain::ElmoRecorderReadout::Request &, cob_base_drive_chain::ElmoRecorderReadout::Response', nesting=0, variable='srvServer_ElmoRecorderReadout', function='NodeClass', line=255, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='recover', callback='srvCallback_Recover', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srvServer_Recover', function='NodeClass', line=258, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='shutdown', callback='srvCallback_Shutdown', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srvServer_Shutdown', function='NodeClass', line=259, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
ServiceClientTuple(topic=[const std::string] #CLEAR_COSTMAP, message_type='std_srvs::struct std_srvs::Empty', nesting=0, variable='client', function='clearCostmaps', line=69, overload='serviceClient(string service, bool persistent, M_string)', param_topic=False)
AdvertiseServiceTuple(topic='say', callback='service_cb_say', message_type='cob_srvs::SetString::Request &, cob_srvs::SetString::Response', nesting=0, variable='srvServer_say_', function='SoundAction', line=49, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='play', callback='service_cb_play', message_type='cob_srvs::SetString::Request &, cob_srvs::SetString::Response', nesting=0, variable='srvServer_play_', function='SoundAction', line=50, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='stop', callback='service_cb_stop', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srvServer_stop_', function='SoundAction', line=51, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='mute', callback='service_cb_mute', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srvServer_mute_', function='SoundAction', line=52, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='unmute', callback='service_cb_unmute', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srvServer_unmute_', function='SoundAction', line=53, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='stop_motion', callback='stopMotionCB', message_type='industrial_msgs::StopMotion::Request &, industrial_msgs::StopMotion::Response', nesting=0, variable='srv_stop_motion_', function='init', line=120, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='joint_path_command', callback='jointTrajectoryCB', message_type='industrial_msgs::CmdJointTrajectory::Request &, industrial_msgs::CmdJointTrajectory::Response', nesting=0, variable='srv_joint_trajectory_', function='init', line=122, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='joint_path_command', callback='jointTrajectoryExCB', message_type='motoman_msgs::CmdJointTrajectoryEx::Request &, motoman_msgs::CmdJointTrajectoryEx::Response', nesting=0, variable='srv_joint_trajectory_', function='init', line=148, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='stop_motion', callback='stopMotionCB', message_type='industrial_msgs::StopMotion::Request &, industrial_msgs::StopMotion::Response', nesting=0, variable='srv_stop_motion_', function='init', line=152, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic=[basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+([basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+([basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+(#ns_str, /), #name_str), /stop_motion), callback='stopMotionCB', message_type='industrial_msgs::StopMotion::Request &, industrial_msgs::StopMotion::Response', nesting=1, variable='srv_stop_motion', function='init', line=166, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic=[basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+([basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+([basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+(#ns_str, /), #name_str), /joint_path_command), callback='jointTrajectoryExCB', message_type='motoman_msgs::CmdJointTrajectoryEx::Request &, motoman_msgs::CmdJointTrajectoryEx::Response', nesting=1, variable='srv_joint_trajectory', function='init', line=169, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='stop_motion', callback='stopMotionCB', message_type='industrial_msgs::StopMotion::Request &, industrial_msgs::StopMotion::Response', nesting=0, variable='srv_stop_motion_', function='init', line=120, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='joint_path_command', callback='jointTrajectoryCB', message_type='industrial_msgs::CmdJointTrajectory::Request &, industrial_msgs::CmdJointTrajectory::Response', nesting=0, variable='srv_joint_trajectory_', function='init', line=122, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='joint_path_command', callback='jointTrajectoryExCB', message_type='motoman_msgs::CmdJointTrajectoryEx::Request &, motoman_msgs::CmdJointTrajectoryEx::Response', nesting=0, variable='srv_joint_trajectory_', function='init', line=148, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='stop_motion', callback='stopMotionCB', message_type='industrial_msgs::StopMotion::Request &, industrial_msgs::StopMotion::Response', nesting=0, variable='srv_stop_motion_', function='init', line=152, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic=[basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+([basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+([basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+(#ns_str, /), #name_str), /stop_motion), callback='stopMotionCB', message_type='industrial_msgs::StopMotion::Request &, industrial_msgs::StopMotion::Response', nesting=1, variable='srv_stop_motion', function='init', line=166, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic=[basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+([basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+([basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+(#ns_str, /), #name_str), /joint_path_command), callback='jointTrajectoryExCB', message_type='motoman_msgs::CmdJointTrajectoryEx::Request &, motoman_msgs::CmdJointTrajectoryEx::Response', nesting=1, variable='srv_joint_trajectory', function='init', line=169, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='take_pano', callback='takePanoServiceCb', message_type='turtlebot_msgs::TakePanorama::Request &, turtlebot_msgs::TakePanorama::Response', nesting=0, variable='srv_start_pano', function='init', line=66, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='set_odometry', callback='srvCallback_SetOdometry', message_type='robotnik_msgs::set_odometry::Request &, robotnik_msgs::set_odometry::Response', nesting=0, variable='srv_SetOdometry_', function='RbcarControllerClass', line=261, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='set_mode', callback='srvCallback_SetMode', message_type='robotnik_msgs::set_mode::Request &, robotnik_msgs::set_mode::Response', nesting=0, variable='srv_SetMode_', function='SummitXLControllerClass', line=337, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='get_mode', callback='srvCallback_GetMode', message_type='robotnik_msgs::get_mode::Request &, robotnik_msgs::get_mode::Response', nesting=0, variable='srv_GetMode_', function='SummitXLControllerClass', line=338, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='set_odometry', callback='srvCallback_SetOdometry', message_type='robotnik_msgs::set_odometry::Request &, robotnik_msgs::set_odometry::Response', nesting=0, variable='srv_SetOdometry_', function='SummitXLControllerClass', line=339, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='/summit_xl_controller/set_mode', callback='srvCallback_SetMode', message_type='robotnik_msgs::set_mode::Request &, robotnik_msgs::set_mode::Response', nesting=0, variable='srv_SetMode_', function='SummitXLControllerClass', line=341, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='get_mode', callback='srvCallback_GetMode', message_type='robotnik_msgs::get_mode::Request &, robotnik_msgs::get_mode::Response', nesting=0, variable='srv_GetMode_', function='SummitXLControllerClass', line=342, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='set_odometry', callback='srvCallback_SetOdometry', message_type='robotnik_msgs::set_odometry::Request &, robotnik_msgs::set_odometry::Response', nesting=0, variable='srv_SetOdometry_', function='SummitXLControllerClass', line=343, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='/guardian_node/set_odometry', callback='set_odometry', message_type='guardian_node::set_odometry::Request &, guardian_node::set_odometry::Response', nesting=0, variable='set_odometry_srv_', function='main', line=444, overload='advertiseService(string service, bool function(MReq, MRes))', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='/guardian_node/get_pid', callback='get_pid', message_type='guardian_node::config_pid::Request &, guardian_node::config_pid::Response', nesting=0, variable='get_pid_srv_', function='main', line=445, overload='advertiseService(string service, bool function(MReq, MRes))', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='/guardian_node/set_pid', callback='set_pid', message_type='guardian_node::set_pid::Request &, guardian_node::set_pid::Response', nesting=0, variable='set_pid_srv_', function='main', line=446, overload='advertiseService(string service, bool function(MReq, MRes))', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='set_odometry', callback='set_odometry', message_type='guardian_node::set_odometry::Request &, guardian_node::set_odometry::Response', nesting=0, variable='set_odometry_srv_', function='main', line=443, overload='advertiseService(string service, bool function(MReq, MRes))', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='set_mode', callback='srvCallback_SetMode', message_type='robotnik_msgs::set_mode::Request &, robotnik_msgs::set_mode::Response', nesting=0, variable='srv_SetMode_', function='GuardianControllerClass', line=289, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='get_mode', callback='srvCallback_GetMode', message_type='robotnik_msgs::get_mode::Request &, robotnik_msgs::get_mode::Response', nesting=0, variable='srv_GetMode_', function='GuardianControllerClass', line=290, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='set_odometry', callback='srvCallback_SetOdometry', message_type='robotnik_msgs::set_odometry::Request &, robotnik_msgs::set_odometry::Response', nesting=0, variable='srv_SetOdometry_', function='GuardianControllerClass', line=291, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='set_odometry', callback='srvCallback_SetOdometry', message_type='robotnik_msgs::set_odometry::Request &, robotnik_msgs::set_odometry::Response', nesting=0, variable='srv_SetOdometry_', function='AGVSControllerClass', line=256, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='raise_elevator', callback='srvCallback_RaiseElevator', message_type='std_srvs::Empty::Request &, std_srvs::Empty::Response', nesting=0, variable='srv_RaiseElevator_', function='AGVSControllerClass', line=257, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='lower_elevator', callback='srvCallback_LowerElevator', message_type='std_srvs::Empty::Request &, std_srvs::Empty::Response', nesting=0, variable='srv_LowerElevator_', function='AGVSControllerClass', line=258, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
ServiceClientTuple(topic='controller_manager/list_controllers', message_type='controller_manager_msgs::struct controller_manager_msgs::ListControllers', nesting=0, variable='controller_list_client', function='initializeEthercatHand', line=97, overload='serviceClient(string service, bool persistent, M_string)', param_topic=False)
AdvertiseServiceTuple(topic='reset_odometry', callback='srv_reset', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='service_reset_', function='init', line=58, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
ServiceClientTuple(topic='driver/halt', message_type='std_srvs::struct std_srvs::Trigger', nesting=0, variable='g_halt_client', function='main', line=55, overload='serviceClient(string service, bool persistent, M_string)', param_topic=False)
AdvertiseServiceTuple(topic='set_mode', callback='srvCallback_SetMode', message_type='robotnik_msgs::set_mode::Request &, robotnik_msgs::set_mode::Response', nesting=0, variable='srv_SetMode_', function='SummitXLControllerClass', line=343, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='get_mode', callback='srvCallback_GetMode', message_type='robotnik_msgs::get_mode::Request &, robotnik_msgs::get_mode::Response', nesting=0, variable='srv_GetMode_', function='SummitXLControllerClass', line=344, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='set_odometry', callback='srvCallback_SetOdometry', message_type='robotnik_msgs::set_odometry::Request &, robotnik_msgs::set_odometry::Response', nesting=0, variable='srv_SetOdometry_', function='SummitXLControllerClass', line=345, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='set_mode', callback='srvCallback_SetMode', message_type='robotnik_msgs::set_mode::Request &, robotnik_msgs::set_mode::Response', nesting=0, variable='srv_SetMode_', function='SummitXLControllerClass', line=337, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='get_mode', callback='srvCallback_GetMode', message_type='robotnik_msgs::get_mode::Request &, robotnik_msgs::get_mode::Response', nesting=0, variable='srv_GetMode_', function='SummitXLControllerClass', line=338, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='set_odometry', callback='srvCallback_SetOdometry', message_type='robotnik_msgs::set_odometry::Request &, robotnik_msgs::set_odometry::Response', nesting=0, variable='srv_SetOdometry_', function='SummitXLControllerClass', line=339, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
ServiceClientTuple(topic='controller_manager/load_controller', message_type='controller_manager_msgs::struct controller_manager_msgs::LoadController', nesting=1, variable='load_client_', function='initialize', line=64, overload='serviceClient(string service, bool persistent, M_string)', param_topic=False)
ServiceClientTuple(topic='controller_manager/switch_controller', message_type='controller_manager_msgs::struct controller_manager_msgs::SwitchController', nesting=1, variable='switch_client_', function='initialize', line=76, overload='serviceClient(string service, bool persistent, M_string)', param_topic=False)
ServiceClientTuple(topic=[basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+(#prefix, _kinematics/get_fk), message_type='moveit_msgs::struct moveit_msgs::GetPositionFK', nesting=0, variable='fk', function='random_test_finger_fkik', line=79, overload='serviceClient(string service, bool persistent, M_string)', param_topic=False)
ServiceClientTuple(topic=[basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+(#prefix, _kinematics/get_ik), message_type='moveit_msgs::struct moveit_msgs::GetPositionIK', nesting=0, variable='ik', function='random_test_finger_fkik', line=80, overload='serviceClient(string service, bool persistent, M_string)', param_topic=False)
AdvertiseServiceTuple(topic='init', callback='srvCallback_Init', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srvServer_Init_', function='init', line=203, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='stop', callback='srvCallback_Stop', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srvServer_Stop_', function='init', line=204, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='recover', callback='srvCallback_Init', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srvServer_Recover_', function='init', line=205, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='set_operation_mode', callback='srvCallback_SetOperationMode', message_type='cob_srvs::SetString::Request &, cob_srvs::SetString::Response', nesting=0, variable='srvServer_SetOperationMode_', function='init', line=206, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
ServiceClientTuple(topic='controller_manager/list_controllers', message_type='controller_manager_msgs::struct controller_manager_msgs::ListControllers', nesting=1, variable='list_ctrl_client', function='change_control_parameters', line=1220, overload='serviceClient(string service, bool persistent, M_string)', param_topic=False)
ServiceClientTuple(topic=[basic_string<char, std::char_traits<char>, std::allocator<char> >] operator+(#name, /reset_gains), message_type='std_srvs::struct std_srvs::Empty', nesting=3, variable='reset_gains_client', function='change_control_parameters', line=1244, overload='serviceClient(string service, bool persistent, M_string)', param_topic=False)
AdvertiseServiceTuple(topic='init', callback='handle_init', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srv_init_', function='setup_chain', line=548, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='recover', callback='handle_recover', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srv_recover_', function='setup_chain', line=549, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='halt', callback='handle_halt', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srv_halt_', function='setup_chain', line=550, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='shutdown', callback='handle_shutdown', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srv_shutdown_', function='setup_chain', line=551, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='get_object', callback='handle_get_object', message_type='canopen_chain_node::GetObject::Request &, canopen_chain_node::GetObject::Response', nesting=0, variable='srv_get_object_', function='setup_chain', line=553, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='set_object', callback='handle_set_object', message_type='canopen_chain_node::SetObject::Request &, canopen_chain_node::SetObject::Response', nesting=0, variable='srv_set_object_', function='setup_chain', line=554, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='aubo_new_driver/set_io', callback='setIO', message_type='aubo_msgs::SetIORequest &, aubo_msgs::SetIOResponse', nesting=1, variable='io_srv_', function='RosWrapper', line=166, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='driver/init', callback='srvCallback_Init', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srvServer_Init_', function='init', line=194, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='driver/stop', callback='srvCallback_Stop', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srvServer_Stop_', function='init', line=195, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='driver/recover', callback='srvCallback_Init', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srvServer_Recover_', function='init', line=196, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='driver/set_operation_mode', callback='srvCallback_SetOperationMode', message_type='cob_srvs::SetString::Request &, cob_srvs::SetString::Response', nesting=0, variable='srvServer_SetOperationMode_', function='init', line=197, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='driver/init', callback='srvCallback_Init', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srvServer_Init_', function='NodeClass', line=167, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='driver/stop', callback='srvCallback_Stop', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srvServer_Stop_', function='NodeClass', line=168, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='driver/recover', callback='srvCallback_Recover', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srvServer_Recover_', function='NodeClass', line=169, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='driver/set_operation_mode', callback='srvCallback_SetOperationMode', message_type='cob_srvs::SetString::Request &, cob_srvs::SetString::Response', nesting=0, variable='srvServer_SetOperationMode_', function='NodeClass', line=170, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='driver/set_default_vel', callback='srvCallback_SetDefaultVel', message_type='cob_srvs::SetFloat::Request &, cob_srvs::SetFloat::Response', nesting=0, variable='srvServer_SetDefaultVel_', function='NodeClass', line=171, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='set_mode', callback='srvCallback_SetMode', message_type='robotnik_msgs::set_mode::Request &, robotnik_msgs::set_mode::Response', nesting=0, variable='srv_SetMode_', function='SummitControllerClass', line=309, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='get_mode', callback='srvCallback_GetMode', message_type='robotnik_msgs::get_mode::Request &, robotnik_msgs::get_mode::Response', nesting=0, variable='srv_GetMode_', function='SummitControllerClass', line=310, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='set_odometry', callback='srvCallback_SetOdometry', message_type='robotnik_msgs::set_odometry::Request &, robotnik_msgs::set_odometry::Response', nesting=0, variable='srv_SetOdometry_', function='SummitControllerClass', line=311, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='obstacle_distance/registerLinkOfInterest', callback='registerLinkOfInterest', message_type='cob_srvs::SetString::Request &, cob_srvs::SetString::Response', nesting=0, variable='registration_srv', function='main', line=63, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='start', callback='start', message_type='cyberglove::Start::Request &, cyberglove::Start::Response', nesting=0, variable='service_start', function='CybergloveService', line=43, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='calibration', callback='calibration', message_type='cyberglove::Calibration::Request &, cyberglove::Calibration::Response', nesting=0, variable='service_calibration', function='CybergloveService', line=44, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='start', callback='start', message_type='cyberglove::Start::Request &, cyberglove::Start::Response', nesting=0, variable='service_start', function='CybergloveService', line=43, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='calibration', callback='calibration', message_type='cyberglove::Calibration::Request &, cyberglove::Calibration::Response', nesting=0, variable='service_calibration', function='CybergloveService', line=44, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='reset_gains', callback='resetGains', message_type='std_srvs::Empty::Request &, std_srvs::Empty::Response', nesting=0, variable='serve_reset_gains_', function='init', line=114, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='in/stop', callback='stopServiceCallback', message_type='kinova_msgs::Stop::Request &, kinova_msgs::Stop::Response', nesting=0, variable='stop_service_', function='KinovaArm', line=119, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='in/start', callback='startServiceCallback', message_type='kinova_msgs::Start::Request &, kinova_msgs::Start::Response', nesting=0, variable='start_service_', function='KinovaArm', line=120, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='in/home_arm', callback='homeArmServiceCallback', message_type='kinova_msgs::HomeArm::Request &, kinova_msgs::HomeArm::Response', nesting=0, variable='homing_service_', function='KinovaArm', line=121, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='in/set_force_control_params', callback='setForceControlParamsCallback', message_type='kinova_msgs::SetForceControlParams::Request &, kinova_msgs::SetForceControlParams::Response', nesting=0, variable='set_force_control_params_service_', function='KinovaArm', line=123, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='in/start_force_control', callback='startForceControlCallback', message_type='kinova_msgs::Start::Request &, kinova_msgs::Start::Response', nesting=0, variable='start_force_control_service_', function='KinovaArm', line=124, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='in/stop_force_control', callback='stopForceControlCallback', message_type='kinova_msgs::Stop::Request &, kinova_msgs::Stop::Response', nesting=0, variable='stop_force_control_service_', function='KinovaArm', line=125, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='in/set_end_effector_offset', callback='setEndEffectorOffsetCallback', message_type='kinova_msgs::SetEndEffectorOffset::Request &, kinova_msgs::SetEndEffectorOffset::Response', nesting=0, variable='set_end_effector_offset_service_', function='KinovaArm', line=127, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='driver/stop', callback='srvCallback_Stop', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srvServer_Stop_', function='cob_trajectory_controller_node', line=120, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='driver/set_joint_velocity', callback='srvCallback_setVel', message_type='cob_srvs::SetFloat::Request &, cob_srvs::SetFloat::Response', nesting=0, variable='srvServer_SetVel_', function='cob_trajectory_controller_node', line=121, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='driver/set_joint_acceleration', callback='srvCallback_setAcc', message_type='cob_srvs::SetFloat::Request &, cob_srvs::SetFloat::Response', nesting=0, variable='srvServer_SetAcc_', function='cob_trajectory_controller_node', line=122, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
ServiceClientTuple(topic='driver/set_operation_mode', message_type='cob_srvs::struct cob_srvs::SetString', nesting=0, variable='srvClient_SetOperationMode', function='cob_trajectory_controller_node', line=123, overload='serviceClient(string service, bool persistent, M_string)', param_topic=False)
AdvertiseServiceTuple(topic='driver/init', callback='srvCallback_Init', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srvServer_Init_', function='PowerCubeChainNode', line=147, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='driver/stop', callback='srvCallback_Stop', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srvServer_Stop_', function='PowerCubeChainNode', line=148, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='driver/recover', callback='srvCallback_Recover', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srvServer_Recover_', function='PowerCubeChainNode', line=149, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='driver/set_operation_mode', callback='srvCallback_SetOperationMode', message_type='cob_srvs::SetString::Request &, cob_srvs::SetString::Response', nesting=0, variable='srvServer_SetOperationMode_', function='PowerCubeChainNode', line=150, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='request_waypoints', callback='processWaypointsService', message_type='yocs_msgs::WaypointListService::Request &, yocs_msgs::WaypointListService::Response', nesting=0, variable='waypoints_srv_', function='WaypointProvider', line=26, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic=[__string_type] service_path.str(), callback='function', message_type='boost::function<bool (SPIRequest_<allocator<void> > &, SPIResponse_<allocator<void> > &)>', nesting=0, variable=None, function='init', line=44, overload='advertiseService(string service, bool boost::function(MReq, MRes), VoidConstPtr)', service_event=False, param_topic=False)
ServiceClientTuple(topic='controller_manager/list_controllers', message_type='controller_manager_msgs::struct controller_manager_msgs::ListControllers', nesting=1, variable='controller_list_client', function='JointTrajectoryActionController', line=165, overload='serviceClient(string service, bool persistent, M_string)', param_topic=False)
ServiceClientTuple(topic='getJointState', message_type='sr_utilities::struct sr_utilities::getJointState', nesting=1, variable='joint_state_client', function='JointTrajectoryActionController', line=217, overload='serviceClient(string service, bool persistent, M_string)', param_topic=False)
AdvertiseServiceTuple(topic='set_gains', callback='setGains', message_type='sr_robot_msgs::SetEffortControllerGains::Request &, sr_robot_msgs::SetEffortControllerGains::Response', nesting=0, variable='serve_set_gains_', function='init', line=110, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='reset_gains', callback='resetGains', message_type='std_srvs::Empty::Request &, std_srvs::Empty::Response', nesting=0, variable='serve_reset_gains_', function='init', line=111, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='set_gains', callback='setGains', message_type='sr_robot_msgs::SetPidGains::Request &, sr_robot_msgs::SetPidGains::Response', nesting=0, variable='serve_set_gains_', function='init', line=134, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='reset_gains', callback='resetGains', message_type='std_srvs::Empty::Request &, std_srvs::Empty::Response', nesting=0, variable='serve_reset_gains_', function='init', line=135, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='set_gains', callback='setGains', message_type='sr_robot_msgs::SetPidGains::Request &, sr_robot_msgs::SetPidGains::Response', nesting=0, variable='serve_set_gains_', function='init', line=136, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='reset_gains', callback='resetGains', message_type='std_srvs::Empty::Request &, std_srvs::Empty::Response', nesting=0, variable='serve_reset_gains_', function='init', line=137, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='set_gains', callback='setGains', message_type='sr_robot_msgs::SetMixedPositionVelocityPidGains::Request &, sr_robot_msgs::SetMixedPositionVelocityPidGains::Response', nesting=0, variable='serve_set_gains_', function='init', line=147, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='reset_gains', callback='resetGains', message_type='std_srvs::Empty::Request &, std_srvs::Empty::Response', nesting=0, variable='serve_reset_gains_', function='init', line=148, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='set_gains', callback='setGains', message_type='sr_robot_msgs::SetPidGains::Request &, sr_robot_msgs::SetPidGains::Response', nesting=0, variable='serve_set_gains_', function='init', line=123, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='reset_gains', callback='resetGains', message_type='std_srvs::Empty::Request &, std_srvs::Empty::Response', nesting=0, variable='serve_reset_gains_', function='init', line=124, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
ServiceClientTuple(topic='manual_self_tests', message_type='sr_robot_msgs::struct sr_robot_msgs::ManualSelfTest', nesting=0, variable='user_input_client_', function='ManualTests', line=43, overload='serviceClient(string service, bool persistent, M_string)', param_topic=False)
AdvertiseServiceTuple(topic='stop_motion', callback='stopMotionCB', message_type='industrial_msgs::StopMotion::Request &, industrial_msgs::StopMotion::Response', nesting=0, variable='srv_stop_motion_', function='init', line=104, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='joint_path_command', callback='jointTrajectoryCB', message_type='industrial_msgs::CmdJointTrajectory::Request &, industrial_msgs::CmdJointTrajectory::Response', nesting=0, variable='srv_joint_trajectory_', function='init', line=105, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='stop_motion', callback='stopMotionCB', message_type='industrial_msgs::StopMotion::Request &, industrial_msgs::StopMotion::Response', nesting=0, variable='srv_stop_motion_', function='init', line=104, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='joint_path_command', callback='jointTrajectoryCB', message_type='industrial_msgs::CmdJointTrajectory::Request &, industrial_msgs::CmdJointTrajectory::Response', nesting=0, variable='srv_joint_trajectory_', function='init', line=105, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='init', callback='handle_init', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srv_init_', function='setup_chain', line=548, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='recover', callback='handle_recover', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srv_recover_', function='setup_chain', line=549, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='halt', callback='handle_halt', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srv_halt_', function='setup_chain', line=550, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='shutdown', callback='handle_shutdown', message_type='std_srvs::Trigger::Request &, std_srvs::Trigger::Response', nesting=0, variable='srv_shutdown_', function='setup_chain', line=551, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='get_object', callback='handle_get_object', message_type='canopen_chain_node::GetObject::Request &, canopen_chain_node::GetObject::Response', nesting=0, variable='srv_get_object_', function='setup_chain', line=553, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='set_object', callback='handle_set_object', message_type='canopen_chain_node::SetObject::Request &, canopen_chain_node::SetObject::Response', nesting=0, variable='srv_set_object_', function='setup_chain', line=554, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='set_light', callback='serviceCallback', message_type='cob_light::SetLightMode::Request &, cob_light::SetLightMode::Response', nesting=0, variable='_srvServer', function='init', line=199, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)
AdvertiseServiceTuple(topic='stop_mode', callback='stopMode', message_type='cob_light::StopLightMode::Request &, cob_light::StopLightMode::Response', nesting=0, variable='_srvStopMode', function='init', line=202, overload='advertiseService(string service, bool method(MReq, MRes), T *obj)', service_event=False, param_topic=False)